<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE event [<!ELEMENT zip_code (#PCDATA)><!ELEMENT url_link_display (#PCDATA)><!ELEMENT url (#PCDATA)><!ELEMENT tracks (track+)><!ELEMENT track (#PCDATA)><!ELEMENT title (#PCDATA)><!ELEMENT timeslot (slot_id?, title, room, date, start_time, end_time, description?, acm_doi?, persons?, tracks?, tags?)><!ELEMENT tags (tag+)><!ELEMENT tag (#PCDATA)><!ELEMENT suffix (#PCDATA)><!ELEMENT subevent_logo_url (#PCDATA)><!ELEMENT subevent_id (#PCDATA)><!ELEMENT subevent (subevent_id?, title, acronym?, subevent_type, description?, room, date, url?, url_link_display?, subevent_logo_url?, acm_doi?, persons?, tracks?, tags?, sponsor?, timeslot*)><!ELEMENT state (#PCDATA)><!ELEMENT start_time (#PCDATA)><!ELEMENT start_date (#PCDATA)><!ELEMENT sponsor (#PCDATA)><!ELEMENT sort_key (#PCDATA)><!ELEMENT slot_id (#PCDATA)><!ELEMENT subevent_type EMPTY><!ATTLIST subevent_type	type (case_study | demonstration | poster | regular | tutorial | workshop) #IMPLIED><!ELEMENT room (#PCDATA)><!ELEMENT role (#PCDATA)><!ELEMENT picture_url (#PCDATA)><!ELEMENT persons (person+)><!ELEMENT person (role, sort_key, first_name, middle_name?, last_name, suffix?, affiliation, acm_profile_id?, email?, bio?, homepage_url?, picture_url?)><!ELEMENT middle_name (#PCDATA)><!ELEMENT location (facility_name, facility_map_url?, address, city, state?, country, zip_code?)><!ELEMENT last_name (#PCDATA)><!ELEMENT homepage_url (#PCDATA)><!ELEMENT first_name (#PCDATA)><!ELEMENT facility_name (#PCDATA)><!ELEMENT facility_map_url (#PCDATA)><!ELEMENT event_type EMPTY><!ATTLIST event_type	type (conference|workshop|symposium) #IMPLIED><!ELEMENT event (event_details, subevent*, timeslot*)><!ELEMENT event_logo_url (#PCDATA)><!ELEMENT event_details (title, acronym, event_type, start_date, end_date, location, description, url?, url_link_display?, event_logo_url?, persons?)><!ELEMENT end_time (#PCDATA)><!ELEMENT end_date (#PCDATA)><!ELEMENT email (#PCDATA)><!ELEMENT description (#PCDATA)><!ELEMENT date (#PCDATA)><!ELEMENT country (#PCDATA)><!ELEMENT city (#PCDATA)><!ELEMENT bio (#PCDATA)><!ELEMENT affiliation (#PCDATA)><!ELEMENT address (#PCDATA)><!ELEMENT acronym (#PCDATA)><!ELEMENT acm_profile_id (#PCDATA)><!ELEMENT acm_doi (#PCDATA)>]>
<event>
  <event_details>
    <title>ECOOP 2016</title>
    <acronym>ECOOP 2016</acronym>
    <event_type type="conference"/>
    <start_date>2016/07/17</start_date>
    <end_date>2016/07/22</end_date>
    <location>
      <facility_name>Congress Center</facility_name>
      <address>Piazza della Pilotta, 4</address>
      <city>Rome</city>
      <country>Italy</country>
    </location>
    <description>The European Conference on Object-Oriented Programming covers all areas of object technology and related software development technologies. Come celebrate the 30th edition in Rome, Italy, on July 17-22, 2016. This year CurryOn, the ECOOP Summer School, the PhD Symposium, and 11 workshops will be all co-located with ECOOP! 
   
 
 
 
 
   
      
    We are happy to announce the AITO Dahl-Nygaard Prizes for 2016. The Junior Prize is awarded to Emina Torlak for her great research potential. The Senior Prize is awarded to James Noble for his outstanding career contributions. The awards will be given during the conference.  Check AITO's DN Prizes page to find out more!  
      
   
 
 

Visit our Facebook and Google+ pages, and stay tuned by following @ECOOPConf:

 

 
 
   
   Sun, July 17 
   Mon, July 18 
   Tue, July 19 
   Wed, July 20 
   Thu, July 21 
   Fri, July 22 
   
   
    PMLDC Distributed Computing  
    Curry On  
    ECOOP  
   
   
    LIVE Live Prog. Systems  
    ICOOOLPS OO Implementation  
    FTfJP FormalTechniques  
   
   
    STOP Scripts to Programs  
    IWACO Aliasing &amp;amp; Ownership  
    GRACE Educational Programming  
  
   
    DoctoralSymposium  
    VORTEX Runtime Verification  
    JSTools JavascriptAnalysis  
    Summer School  
   
   
    PX Programming Experience  
    COP Context Orientation  
   
 
 

 Latest from @ECOOPconf</description>
    <url>http://2016.ecoop.org/home</url>
    <url_link_display>ECOOP 2016</url_link_display>
    <persons>
      <person>
        <role>Publicity chair in Organizing Committee</role>
        <sort_key>1</sort_key>
        <first_name>Emilio</first_name>
        <last_name>Coppa</last_name>
        <affiliation>Sapienza University of Rome, Italy</affiliation>
        <bio>undefined</bio>
        <homepage_url>http://ecoppa.github.io/</homepage_url>
        <picture_url>http://2016.ecoop.org/getProfileImage/emiliocoppa/ac662473-2d0b-4ae4-9b37-324e65a4f883/small.jpg</picture_url>
      </person>
      <person>
        <role>Web &amp; Housing Chair in Organizing Committee</role>
        <sort_key>2</sort_key>
        <first_name>Daniele Cono</first_name>
        <last_name>D'Elia</last_name>
        <affiliation>Sapienza University of Rome, Italy</affiliation>
        <bio>I’m a postdoctoral researcher in the SEASON Lab at Sapienza University of Rome, working on program analysis techniques with applications to online optimization and security.
In my dissertation I tackled two topical problems in adaptive program optimization: fine-grained performance profiling and on-stack replacement. I’m the creator of OSRKit, an OSR library for the LLVM compiler toolchain.</bio>
        <homepage_url>http://www.dis.uniroma1.it/~delia/</homepage_url>
        <picture_url>http://2016.ecoop.org/getProfileImage/danieleconodelia/44ba56db-be0a-445f-bd2c-e9fbbe42381f/small.jpg</picture_url>
      </person>
      <person>
        <role>General Chair in Organizing Committee</role>
        <sort_key>3</sort_key>
        <first_name>Camil</first_name>
        <last_name>Demetrescu</last_name>
        <affiliation>Sapienza University of Rome</affiliation>
        <bio>undefined</bio>
        <homepage_url>http://www.dis.uniroma1.it/~demetres/</homepage_url>
        <picture_url>http://2016.ecoop.org/getProfileImage/camildemetrescu/d6d70866-6ad9-4516-bfb7-2e1fb26921bd/small.jpg</picture_url>
      </person>
      <person>
        <role>Sponsorship Co-Chair in Organizing Committee</role>
        <sort_key>4</sort_key>
        <first_name>Irene</first_name>
        <last_name>Finocchi</last_name>
        <affiliation>Sapienza University of Rome, Italy</affiliation>
        <bio>undefined</bio>
        <homepage_url>http://wwwusers.di.uniroma1.it/~finocchi/</homepage_url>
        <picture_url>http://2016.ecoop.org/getProfileImage/irenefinocchi/bbbf2db6-7bae-4fce-8215-717a185d141e/small.jpg</picture_url>
      </person>
      <person>
        <role>Student Volunteer Co-Chair in Organizing Committee</role>
        <sort_key>5</sort_key>
        <first_name>Olivier</first_name>
        <last_name>Fluckiger</last_name>
        <affiliation>Northeastern University</affiliation>
        <bio>undefined</bio>
        <picture_url>http://2016.ecoop.org/getProfileImage/olivierfluckiger/413c1991-0ab1-4150-b564-6ec9cf328f5a/small.jpg</picture_url>
      </person>
      <person>
        <role>Committee Member in Organizing Committee</role>
        <sort_key>6</sort_key>
        <first_name>Reid</first_name>
        <last_name>Holmes</last_name>
        <affiliation>Confero</affiliation>
        <bio>undefined</bio>
        <picture_url>http://2016.ecoop.org/getProfileImage/reidholmes1/06c9b89d-d2f6-4ca4-ab54-7654e03e44cb/small.jpg</picture_url>
      </person>
      <person>
        <role>Publications Chair in Organizing Committee</role>
        <sort_key>7</sort_key>
        <first_name>Benjamin</first_name>
        <last_name>Lerner</last_name>
        <affiliation>Northeastern University</affiliation>
        <bio>undefined</bio>
        <homepage_url>http://www.ccs.neu.edu/home/blerner</homepage_url>
        <picture_url>http://2016.ecoop.org/getProfileImage/benjaminlerner/91181185-b05b-4e42-bc54-72909b447e59/small.jpg</picture_url>
      </person>
      <person>
        <role>Workshops Co-Chair in Organizing Committee</role>
        <sort_key>8</sort_key>
        <first_name>Paley</first_name>
        <last_name>Li</last_name>
        <affiliation>Northeastern University</affiliation>
        <bio>undefined</bio>
        <homepage_url>https://palez.github.io</homepage_url>
        <picture_url>http://2016.ecoop.org/getProfileImage/paleyli/5f6e3302-652d-4862-b5b6-d621e9b5a653/small.jpg</picture_url>
      </person>
      <person>
        <role>Workshops Co-Chair in Organizing Committee</role>
        <sort_key>9</sort_key>
        <first_name>Francesco</first_name>
        <last_name>Logozzo</last_name>
        <affiliation>Facebook</affiliation>
        <bio>I love static program analysis. I’ve been designing and implementing widely used static analysis tools. I published papers in the most important research conferences and gave talks at main industrial conferences as e.g., Build.</bio>
        <homepage_url>https://it.linkedin.com/in/francesco-logozzo-4106386</homepage_url>
        <picture_url>http://2016.ecoop.org/getProfileImage/francescologozzo/f70bf450-fed8-4488-88cb-579091e43a4d/small.jpg</picture_url>
      </person>
      <person>
        <role>Student Volunteer Co-Chair in Organizing Committee</role>
        <sort_key>10</sort_key>
        <first_name>Petr</first_name>
        <last_name>Maj</last_name>
        <affiliation>ReactorLabs</affiliation>
        <bio>undefined</bio>
        <picture_url>http://2016.ecoop.org/getProfileImage/petrmaj/bb0cb796-8ea6-4a03-bbf7-cd6124195e48/small.jpg</picture_url>
      </person>
      <person>
        <role>Sponsorship Co-Chair in Organizing Committee</role>
        <sort_key>11</sort_key>
        <first_name>Heather</first_name>
        <last_name>Miller</last_name>
        <affiliation>Ecole Polytechnique Federale de Lausanne</affiliation>
        <bio>I am a Research Scientist at EPFL, and the Executive Director of the Scala Center, working on the Scala programming language. In October 2015, I earned my PhD under the supervision of Professor Martin Odersky the Programming Methods Laboratory (LAMP for short) at EPFL. Before moving to Switzerland, I was born in and lived all over the US.
I’m interested in programming language and compiler support for distributed programming. In particular, I’m interested in using type systems to facilitate the design of new, functional distributed systems.</bio>
        <homepage_url>http://heather.miller.am/</homepage_url>
        <picture_url>http://2016.ecoop.org/getProfileImage/heathermiller/bcbc4db2-52f8-4135-b4ab-5bf33879d8dd/small.jpg</picture_url>
      </person>
      <person>
        <role>Treasurer &amp; Conference Manager in Organizing Committee</role>
        <sort_key>12</sort_key>
        <first_name>Annabel</first_name>
        <last_name>Satin</last_name>
        <affiliation>undefined</affiliation>
        <bio>undefined</bio>
        <picture_url>http://2016.ecoop.org/getProfileImage/annabelsatin/de3bb293-96c3-4a34-98b2-e7c46f9e53e8/small.jpg</picture_url>
      </person>
      <person>
        <role>Comfy Chair in Organizing Committee</role>
        <sort_key>13</sort_key>
        <first_name>Jan</first_name>
        <last_name>Vitek</last_name>
        <affiliation>Northeastern University</affiliation>
        <bio>Jan Vitek is a Professor of Computer Science at Northeastern University. Dr. Vitek was born in Czechoslovakia and educated in Switzerland. Over the years, he worked on topics related to programming languages, their design, use, and implementation. With Noble and Potter, he proposed the notion of flexible alias control which became know as Ownership Types. He led the Ovm project which produced the first real-time Java virtual machine to be flight tested on a ScanEagle drone (he claims no one was harmed). Outcomes of this project include the Schism real-time garbage collector and the FijiVM – a production VM for embedded systems. More recently, he worked on dynamic languages, trying to make sense of JavaScript and to design a new language called, Thorn. Nowadays, he spends his time with statisticians and data scientists. Jan believes that his 2012 election as Chair of SIGPLAN was an accident; since has been busy trying to rock the boat to ensure this does not happen again. In his spare time, Jan enjoys organizing conferences and sitting on PCs (over 25 in the last decade). He founded the MOS (mobile objects), IWACO (alias control), STOP (gradual typing), and TRANSACT (transactional memory) workshop series. He was the first program chair of VEE and chaired ESOP, ECOOP, Coordination and TOOLS. He was the general chair of PLDI (in Beijing!), ISMM and LCTES. He may still be sitting on the steering committees of ECOOP, JTRES, ICFP, OOPLSA, POPL, PLDI, LCTES, ESOP.</bio>
        <homepage_url>http://janvitek.org</homepage_url>
        <picture_url>http://2016.ecoop.org/getProfileImage/janvitek/53f115e3-8db9-4b80-b49a-f5eb2a0c8696/small.jpg</picture_url>
      </person>
    </persons>
  </event_details>
  <subevent>
    <subevent_id>0814216e-65be-4750-949f-c6553696db06</subevent_id>
    <title>VORTEX: Session 2</title>
    <subevent_type type="regular"/>
    <room>Saba</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/VORTEX-2016</url>
    <url_link_display>VORTEX</url_link_display>
    <tracks>
      <track>VORTEX</track>
    </tracks>
    <timeslot>
      <slot_id>130c1670-ef53-4ed1-8d0f-739e6b37c306</slot_id>
      <title>The Early Bird Catches the Worm: first Verify, then Monitor!</title>
      <room>Saba</room>
      <date>2016/07/18</date>
      <start_time>14:50</start_time>
      <end_time>15:19</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Angelo</first_name>
          <last_name>Ferrando</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>VORTEX</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>40b9ffb7-e262-4b19-875a-e1a4acff8f4c</slot_id>
      <title>Closing Remarks</title>
      <room>Saba</room>
      <date>2016/07/18</date>
      <start_time>15:19</start_time>
      <end_time>15:20</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Davide</first_name>
          <last_name>Ancona</last_name>
          <affiliation>University of Genova</affiliation>
          <bio>Davide Ancona (PhD in Computer Science, University of Pisa, 1998) is Associate Professor at the University of Genova. His main research interests include type systems, object-oriented programming, coinduction methods for programming languages, modules and components, software reuse and maintenance, multi-agent systems, and behavioral types. He is author of more than 70 publications. He is the secretary of the executive board of AITO, Association Internationale pour les Technologies Objets (since Jan 2013, previously Vice-President since Jan 2012), and member of the editorial board of the Central European Journal of Computer Science and of the ACM/SIGAPP Applied Computing Review (ACR). He has been guest editor of special issues of Science of Computer Programming and Journal of Object Technology. In 2009 he received, together with G. Lagorio, the best paper prize at ECOOP. He has participated to several national and European projects and has been PC member of several workshops and conferences: WOOD’04, Bytecode 2008, ESOP 2008, DLS 2009, 2010 and 2013, FOOL 2010, RP 2011 and 2012, ECOOP 2013 and 2014, POPL 2015 (External Reviewing Committee). He has been involved in the organization of several scientific events: organizing chair of ECOOP 2009, program co-chair of FTfJP06 and of OOPS special track at SAC from 2004 through 2015, co-chair of CILC 2015.</bio>
          <homepage_url>http://www.disi.unige.it/person/AnconaD/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/davideancona/b3d19c77-a788-469b-ab47-7c6f3134f87d/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Frank S.</first_name>
          <last_name>de Boer</last_name>
          <affiliation>Centrum Wiskunde &amp; Informatica, Leiden University</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://homepages.cwi.nl/~frb/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/franksdeboer/ffdb7b27-277c-4985-a5c6-4cf6961ab4c7/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>VORTEX</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>65d443f3-b3c5-44b8-a305-2b2204e423db</slot_id>
      <title>Extracting Runtime Monitors from Tests: An Overview and a way forward</title>
      <room>Saba</room>
      <date>2016/07/18</date>
      <start_time>13:50</start_time>
      <end_time>14:20</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Abigail</first_name>
          <last_name>Cauchi</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Luke</first_name>
          <last_name>Chircop</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Christian</first_name>
          <last_name>Colombo</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Adrian</first_name>
          <last_name>Francalanza</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>5</sort_key>
          <first_name>Mark</first_name>
          <last_name>Micallef</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>6</sort_key>
          <first_name>Gordon</first_name>
          <last_name>Pace</last_name>
          <affiliation>University of Malta</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.cs.um.edu.mt/gordon.pace</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/gordonpace/4b52eb89-123e-43c8-9bcd-9221fb293173/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>VORTEX</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>e21cac41-a57f-4b53-9c13-d2c4f8439efb</slot_id>
      <title>Runtime checks as nominal types</title>
      <room>Saba</room>
      <date>2016/07/18</date>
      <start_time>14:20</start_time>
      <end_time>14:50</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Paola</first_name>
          <last_name>Giannini</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Elena</first_name>
          <last_name>Zucca</last_name>
          <affiliation>University of Genova</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.disi.unige.it/person/ZuccaE/</homepage_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Marco</first_name>
          <last_name>Servetto</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>VORTEX</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>cd06e7e6-8ab4-4898-a9e3-dc25635014be</subevent_id>
    <title>VORTEX: Session 1</title>
    <subevent_type type="regular"/>
    <room>Saba</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/VORTEX-2016</url>
    <url_link_display>VORTEX</url_link_display>
    <tracks>
      <track>VORTEX</track>
    </tracks>
    <timeslot>
      <slot_id>59ffafa7-1477-463a-b0ec-7ac15d97916a</slot_id>
      <title> Monitoring JavaScript Programs with Jalangi</title>
      <room>Saba</room>
      <date>2016/07/18</date>
      <start_time>11:40</start_time>
      <end_time>12:10</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Koushik</first_name>
          <last_name>Sen</last_name>
          <affiliation>University of California, Berkeley</affiliation>
          <bio>Koushik Sen is an associate professor in the Department of Electrical Engineering and Computer Sciences at the University of California, Berkeley. His research interest lies in Software Engineering, Programming Languages, and Formal methods. He is interested in developing software tools and methodologies that improve programmer productivity and software quality. He is best known for his work on “DART: Directed Automated Random Testing” and concolic testing. He has received a NSF CAREER Award in 2008, a Haifa Verification Conference (HVC) Award in 2009, a IFIP TC2 Manfred Paul Award for Excellence in Software: Theory and Practice in 2010, a Sloan Foundation Fellowship in 2011, a Professor R. Narasimhan Lecture Award in 2014, and an Okawa Foundation Research Grant in 2015. He has won several ACM SIGSOFT Distinguished Paper Awards. He received the C.L. and Jane W-S. Liu Award in 2004, the C. W. Gear Outstanding Graduate Award in 2005, and the David J. Kuck Outstanding Ph.D. Thesis Award in 2007, and a Distinguished Alumni Educator Award in 2014 from the UIUC Department of Computer Science. He holds a B.Tech from Indian Institute of Technology, Kanpur, and M.S. and Ph.D. in CS from University of Illinois at Urbana-Champaign.</bio>
          <homepage_url>http://srl.cs.berkeley.edu/~ksen/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/koushiksen/acb915fb-8e52-49dc-973e-eb9172c3d462/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>VORTEX</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>661fc94b-62fe-416f-a71e-4a6eb5c5097a</slot_id>
      <title>StaRVOOrS: A framework for static and runtime verification of data and control properties.</title>
      <room>Saba</room>
      <date>2016/07/18</date>
      <start_time>10:10</start_time>
      <end_time>10:40</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Gerardo</first_name>
          <last_name>Schneider</last_name>
          <affiliation>University of Gothenburg</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.cse.chalmers.se/~gersch/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/gerardoschneider/88dbc706-4a1c-4417-b1ed-6ac04ce4bbe5/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>VORTEX</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>a1c82b05-66be-4814-902e-fe800cc8ea80</slot_id>
      <title>Runtime Verification with Data</title>
      <room>Saba</room>
      <date>2016/07/18</date>
      <start_time>10:40</start_time>
      <end_time>11:10</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Martin</first_name>
          <last_name>Leucker</last_name>
          <affiliation>University of Lübeck</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://www.isp.uni-luebeck.de/leucker</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/martinleucker/a3679181-6daf-4256-b932-1d8235d4c0ba/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>VORTEX</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>b07e3bea-7693-4684-9c17-1c8b011f551d</slot_id>
      <title>Runtime Verification of Safe Advisories in the Next-Generation Airborne Collision Avoidance System</title>
      <room>Saba</room>
      <date>2016/07/18</date>
      <start_time>11:10</start_time>
      <end_time>11:40</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Jean-Baptiste</first_name>
          <last_name>Jeannin</last_name>
          <affiliation>Carnegie Mellon University	</affiliation>
          <bio>I am a Researcher at Samsung Research America in Mountain View, California. Before that I was a Post Doctoral Fellow working with Andr&amp;eacute; Platzer in the Logical Systems Lab at Carnegie Mellon University. I received my Ph.D. in Computer Science from Cornell University in 2013, where I was advised by Dexter Kozen. I also received a Master of Engineering in Computer Science from Cornell University in 2008, and a Dipl&amp;ocirc;me d’Ing&amp;eacute;nieur from &amp;Eacute;cole polytechnique in 2007.</bio>
          <homepage_url>http://www.cs.cmu.edu/~jeannin/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jeanbaptistejeannin/a95f84e4-d955-43d9-9927-37572a9da843/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>VORTEX</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>ffc8d752-4f4b-4056-9db5-827411465321</slot_id>
      <title>Opening Remarks</title>
      <room>Saba</room>
      <date>2016/07/18</date>
      <start_time>10:05</start_time>
      <end_time>10:10</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Davide</first_name>
          <last_name>Ancona</last_name>
          <affiliation>University of Genova</affiliation>
          <bio>Davide Ancona (PhD in Computer Science, University of Pisa, 1998) is Associate Professor at the University of Genova. His main research interests include type systems, object-oriented programming, coinduction methods for programming languages, modules and components, software reuse and maintenance, multi-agent systems, and behavioral types. He is author of more than 70 publications. He is the secretary of the executive board of AITO, Association Internationale pour les Technologies Objets (since Jan 2013, previously Vice-President since Jan 2012), and member of the editorial board of the Central European Journal of Computer Science and of the ACM/SIGAPP Applied Computing Review (ACR). He has been guest editor of special issues of Science of Computer Programming and Journal of Object Technology. In 2009 he received, together with G. Lagorio, the best paper prize at ECOOP. He has participated to several national and European projects and has been PC member of several workshops and conferences: WOOD’04, Bytecode 2008, ESOP 2008, DLS 2009, 2010 and 2013, FOOL 2010, RP 2011 and 2012, ECOOP 2013 and 2014, POPL 2015 (External Reviewing Committee). He has been involved in the organization of several scientific events: organizing chair of ECOOP 2009, program co-chair of FTfJP06 and of OOPS special track at SAC from 2004 through 2015, co-chair of CILC 2015.</bio>
          <homepage_url>http://www.disi.unige.it/person/AnconaD/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/davideancona/b3d19c77-a788-469b-ab47-7c6f3134f87d/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Frank S.</first_name>
          <last_name>de Boer</last_name>
          <affiliation>Centrum Wiskunde &amp; Informatica, Leiden University</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://homepages.cwi.nl/~frb/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/franksdeboer/ffdb7b27-277c-4985-a5c6-4cf6961ab4c7/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>VORTEX</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>f7dc715a-0313-48ab-a1cd-3ec93f17f5f1</subevent_id>
    <title>IWACO: Session 2</title>
    <subevent_type type="regular"/>
    <room>Quasimodo</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/IWACO-2016</url>
    <url_link_display>IWACO</url_link_display>
    <tracks>
      <track>IWACO</track>
    </tracks>
    <timeslot>
      <slot_id>07a7253e-261f-4007-bed0-c622ca29009c</slot_id>
      <title>Are Ownership Types Reaching the World Yet?</title>
      <room>Quasimodo</room>
      <date>2016/07/18</date>
      <start_time>16:00</start_time>
      <end_time>16:30</end_time>
      <description>In 2011, Wrigstad and Clarke asked whether ownership types are ready for the world. A key open question about ownership types remains whether they are usable in practice. Recent years have seen a number of new programming languages; Rust is most notable for including an ownership system as a key feature, but other new and revised languages (even C++!) have related features which may provide some of the same benefits. In this talk, I’ll investigate support for ownership and related features in these languages and programmers’ acceptance of these features.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Patrick</first_name>
          <last_name>Lam</last_name>
          <affiliation>University of Waterloo, Canada</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://patricklam.ca</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/patricklam/b7e6157b-2048-4606-b269-987a08722ba2/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>IWACO</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>289b6f96-69a6-44fe-b866-d0d0c4256b4e</slot_id>
      <title>Kappa: Insights, Current Status and Future Work</title>
      <room>Quasimodo</room>
      <date>2016/07/18</date>
      <start_time>16:30</start_time>
      <end_time>17:00</end_time>
      <description>Kappa is a type system for safe concurrent object-oriented programming using reference capabilities. It uses a combination of static and dynamic techniques to guarantee data-race freedom, and, for a certain subset of the system, non-interference (and thereby deterministic parallelism). It combines many features from previous work on alias management, such as substructural types, regions, ownership types, and fractional permissions, and brings them together using a small set of primitives.
In this extended abstract we show how Kappa’s capabilities express variations of the aforementioned concepts, discuss the main insights from working with Kappa, present the current status of the implementation of Kappa in the context of the actor language Encore, and discuss ongoing and future work.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Elias</first_name>
          <last_name>Castegren</last_name>
          <affiliation>Uppsala University</affiliation>
          <bio>I am a PhD student working with capability type systems for concurrent and parallel object oriented programming. My advisor is Tobias Wrigstad</bio>
          <homepage_url>http://www.it.uu.se/katalog/elica697</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/eliascastegren/aecb1ac3-b069-40d5-b121-c19b63182708/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Tobias</first_name>
          <last_name>Wrigstad</last_name>
          <affiliation>Uppsala University</affiliation>
          <bio>I am an associate professor at Department of Information Technology, Uppsala University, Uppsala, Sweden.</bio>
          <homepage_url>http://wrigstad.com</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/tobiaswrigstad/4abf5948-cecc-4d23-8806-261022caa110/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>IWACO</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>7e080264-0f74-4a48-8701-e97fc0fe4712</slot_id>
      <title>Abstract Data Types in Object-Capability Systems</title>
      <room>Quasimodo</room>
      <date>2016/07/18</date>
      <start_time>17:00</start_time>
      <end_time>17:30</end_time>
      <description>The distinctions between the two forms of procedural data abstraction — abstract data types and objects — are well known. An abstract data type provides an opaque type declaration, and an implementation that manipulates the modules of the abstract type, while an object uses procedural abstraction to hide an individual implementation. The object-capability model has been proposed to enable object-oriented programs to be written securely, and has been adopted by a number of practical languages including JavaScript, E, and Newspeak. This short paper addresses the question: how can we implement abstract data types in an object-capability language?</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>James</first_name>
          <last_name>Noble</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>James Noble is Professor of Computer Science and Software Engineering at Victoria University of Wellington, New Zealand. James has B.Sc(Hons) and Ph.D. degrees, both from VUW, completed in 1997. After leaving VUW, James worked in Sydney, first at the University of Technology, Sydney, and then at the Microsoft Research Institute, Macquarie University. James returned to VUW as a lecturer in late 1999, just in time to avoid the predicted end of the world.
James’s research centres around software design. This includes the design of the users’ interface, the parts of software that users have to deal with every day, and the programmers’ interface, the internal structures and organisations of software that programmers see only when they are designing, building, or modifying software. His research in both of these areas is coloured by my longstanding interest in object oriented approaches to design, and topics he has studies range from aliasing and object ownership, design patterns, agile methodology, via usability, visualisation and computer music, to postmodernism and the semiotics of programming.</bio>
          <homepage_url>http://homepages.mcs.vuw.ac.nz/~kjx/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jamesnoble/6f993a92-503e-44c6-9bbb-bfd05bf4ed23/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Sophia</first_name>
          <last_name>Drossopoulou</last_name>
          <affiliation>Imperial College London</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://wp.doc.ic.ac.uk/sd/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/sophiadrossopoulou/bd48088b-edc7-4e3d-8aaf-3b8df6c65521/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Mark</first_name>
          <last_name>Miller</last_name>
          <affiliation>Google Inc.</affiliation>
          <bio>Mark S. Miller is the main designer of the E and Dr. SES distributed object-capability programming languages, inventor of Miller Columns, a pioneer of agoric (market-based secure distributed) computing, an architect of the Xanadu hypertext publishing system, a representative to the EcmaScript committee, and one of Yedalog’s creators.</bio>
          <homepage_url>http://research.google.com/pubs/author35958.html</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/markmiller/64622953-ab96-4f03-ade5-4ed19b244771/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Toby</first_name>
          <last_name>Murray</last_name>
          <affiliation>University of Melbourne</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://people.eng.unimelb.edu.au/tobym</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/tobymurray/b22e1351-c7fc-420a-acef-492aadfce115/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>5</sort_key>
          <first_name>Alex</first_name>
          <last_name>Potanin</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>I am a Senior Lecturer in the School of Engineering and Computer Science at Victoria University of Wellington, New Zealand.
I am originally from Moscow, Russia with a background in Mathematics. I have completed my PhD in programming languages in 2006 and took up a job as a Lecturer in Software Engineering at Victoria University of Wellington. During my studies I took short breaks to work as a Visiting Researcher at Purdue University, and Software Engineer at two Wellington start-ups. I spent 2013 on sabbatical at Carnegie Mellon University in Pittsburgh, PA, USA.
Research Interests: programming languages.</bio>
          <homepage_url>http://ecs.victoria.ac.nz/Main/AlexPotanin</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/alexpotanin/2a231877-8f67-4b16-ba02-1b903219e59e/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>IWACO</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>f739f5dd-41f1-49e3-b204-9f2a6586752b</subevent_id>
    <title>JSTools: Session 3</title>
    <subevent_type type="regular"/>
    <room>Alfieri</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/JSTools-2016</url>
    <url_link_display>JSTools</url_link_display>
    <tracks>
      <track>JSTools</track>
    </tracks>
    <timeslot>
      <slot_id>54b01892-75b9-43dd-a402-a6dbae113f54</slot_id>
      <title>Verification of Communication in Web Applications</title>
      <room>Alfieri</room>
      <date>2016/07/19</date>
      <start_time>16:00</start_time>
      <end_time>16:40</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Nathalie</first_name>
          <last_name>Oostvogels</last_name>
          <affiliation>Vrije Universiteit Brussel</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>JSTools</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>92219fff-f3f5-41d7-99d0-9d39cccdade9</slot_id>
      <title>Fishing for JavaScript Bugs at the Shallow End</title>
      <room>Alfieri</room>
      <date>2016/07/19</date>
      <start_time>16:40</start_time>
      <end_time>17:20</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Max</first_name>
          <last_name>Schaefer</last_name>
          <affiliation>Semmle</affiliation>
          <bio>I am a research engineer at Semmle Ltd. in Oxford. Previously, I was an assistant professor at the School of Computer Engineering of Nanyang Technological University in Singapore; a post-doctoral researcher at IBM T.J. Watson Research Center in New York; and a PhD student at the Department of Computer Science of Oxford University.</bio>
          <homepage_url>http://xiemaisi.github.io</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/maxschaefer/ca389fb8-7947-4c7b-ac76-e3f1f072ceaf/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>JSTools</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>eaf5f641-5744-4afa-9488-7232e61201ff</slot_id>
      <title>Closing Remarks</title>
      <room>Alfieri</room>
      <date>2016/07/19</date>
      <start_time>17:20</start_time>
      <end_time>17:30</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Julian</first_name>
          <last_name>Dolby</last_name>
          <affiliation>IBM Thomas J. Watson Research Center</affiliation>
          <bio>I have been a Research Staff Member at IBM’s Thomas J. Watson Research Center since 2000. I work on a range of topics, including static program analysis, software testing and the semantic web. I have also worked on the Jikes Research Virtual Machine (Jikes RVM). My program analysis work has recently been focused on scripting languages like JavaScript and on security analysis of Web applications; our work has been included in IBM products, most notably Rational AppScan products, and I am one of the primary authors of the publicly-available Watson Libraries for Analysis (WALA) program analysis infrastructure. My testing work has been primarily focused on Web applications in the Apollo project, and on finding concurrency bugs using both dynamic execution and model checking. My semantic Web work has been on scalable inference with the SHER project; recently, I have focused on representing RDF data efficiently in an RDBMS. I was educated at the University of Wisconsin-Madison as an undergraduate, and at the University of Illinois at Urbana-Champaign as a graduate student where I worked with Professor Andrew Chien on programming systems for massively-parallel machines.</bio>
          <homepage_url>http://researcher.watson.ibm.com/researcher/view.php?person=us-dolby</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/juliandolby/b788d386-6330-4ebf-baaa-6dac63bb1f17/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>JSTools</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>01acb86b-bac4-4368-894b-85c49902530e</subevent_id>
    <title>JSTools: Session 1</title>
    <subevent_type type="regular"/>
    <room>Alfieri</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/JSTools-2016</url>
    <url_link_display>JSTools</url_link_display>
    <tracks>
      <track>JSTools</track>
    </tracks>
    <timeslot>
      <slot_id>190edf28-ddf9-4c07-97bc-094735db3271</slot_id>
      <title>Sound Type Inference for JavaScript</title>
      <room>Alfieri</room>
      <date>2016/07/19</date>
      <start_time>11:30</start_time>
      <end_time>12:10</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Jean-Baptiste</first_name>
          <last_name>Jeannin</last_name>
          <affiliation>Carnegie Mellon University	</affiliation>
          <bio>I am a Researcher at Samsung Research America in Mountain View, California. Before that I was a Post Doctoral Fellow working with Andr&amp;eacute; Platzer in the Logical Systems Lab at Carnegie Mellon University. I received my Ph.D. in Computer Science from Cornell University in 2013, where I was advised by Dexter Kozen. I also received a Master of Engineering in Computer Science from Cornell University in 2008, and a Dipl&amp;ocirc;me d’Ing&amp;eacute;nieur from &amp;Eacute;cole polytechnique in 2007.</bio>
          <homepage_url>http://www.cs.cmu.edu/~jeannin/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jeanbaptistejeannin/a95f84e4-d955-43d9-9927-37572a9da843/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>JSTools</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>39c6b3d9-145f-448b-993a-37295918c343</slot_id>
      <title>So You Want to Build Memory Tooling For JavaScript?</title>
      <room>Alfieri</room>
      <date>2016/07/19</date>
      <start_time>10:50</start_time>
      <end_time>11:30</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Nick</first_name>
          <last_name>Fitzgerald</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>JSTools</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>6567ab89-d6d2-4165-be05-28a62847f7a5</slot_id>
      <title>Opening Remarks</title>
      <room>Alfieri</room>
      <date>2016/07/19</date>
      <start_time>10:05</start_time>
      <end_time>10:10</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Julian</first_name>
          <last_name>Dolby</last_name>
          <affiliation>IBM Thomas J. Watson Research Center</affiliation>
          <bio>I have been a Research Staff Member at IBM’s Thomas J. Watson Research Center since 2000. I work on a range of topics, including static program analysis, software testing and the semantic web. I have also worked on the Jikes Research Virtual Machine (Jikes RVM). My program analysis work has recently been focused on scripting languages like JavaScript and on security analysis of Web applications; our work has been included in IBM products, most notably Rational AppScan products, and I am one of the primary authors of the publicly-available Watson Libraries for Analysis (WALA) program analysis infrastructure. My testing work has been primarily focused on Web applications in the Apollo project, and on finding concurrency bugs using both dynamic execution and model checking. My semantic Web work has been on scalable inference with the SHER project; recently, I have focused on representing RDF data efficiently in an RDBMS. I was educated at the University of Wisconsin-Madison as an undergraduate, and at the University of Illinois at Urbana-Champaign as a graduate student where I worked with Professor Andrew Chien on programming systems for massively-parallel machines.</bio>
          <homepage_url>http://researcher.watson.ibm.com/researcher/view.php?person=us-dolby</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/juliandolby/b788d386-6330-4ebf-baaa-6dac63bb1f17/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>JSTools</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>97d3a64f-7e44-4eee-932a-a834058ee002</slot_id>
      <title>Invited Talk - Monitoring JavaScript Programs with Jalangi</title>
      <room>Alfieri</room>
      <date>2016/07/19</date>
      <start_time>10:10</start_time>
      <end_time>10:50</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Koushik</first_name>
          <last_name>Sen</last_name>
          <affiliation>University of California, Berkeley</affiliation>
          <bio>Koushik Sen is an associate professor in the Department of Electrical Engineering and Computer Sciences at the University of California, Berkeley. His research interest lies in Software Engineering, Programming Languages, and Formal methods. He is interested in developing software tools and methodologies that improve programmer productivity and software quality. He is best known for his work on “DART: Directed Automated Random Testing” and concolic testing. He has received a NSF CAREER Award in 2008, a Haifa Verification Conference (HVC) Award in 2009, a IFIP TC2 Manfred Paul Award for Excellence in Software: Theory and Practice in 2010, a Sloan Foundation Fellowship in 2011, a Professor R. Narasimhan Lecture Award in 2014, and an Okawa Foundation Research Grant in 2015. He has won several ACM SIGSOFT Distinguished Paper Awards. He received the C.L. and Jane W-S. Liu Award in 2004, the C. W. Gear Outstanding Graduate Award in 2005, and the David J. Kuck Outstanding Ph.D. Thesis Award in 2007, and a Distinguished Alumni Educator Award in 2014 from the UIUC Department of Computer Science. He holds a B.Tech from Indian Institute of Technology, Kanpur, and M.S. and Ph.D. in CS from University of Illinois at Urbana-Champaign.</bio>
          <homepage_url>http://srl.cs.berkeley.edu/~ksen/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/koushiksen/acb915fb-8e52-49dc-973e-eb9172c3d462/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>JSTools</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>127e505a-0567-4d35-b793-f96e374de56c</subevent_id>
    <title>JSTools: Session 2</title>
    <subevent_type type="regular"/>
    <room>Alfieri</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/JSTools-2016</url>
    <url_link_display>JSTools</url_link_display>
    <tracks>
      <track>JSTools</track>
    </tracks>
    <timeslot>
      <slot_id>06ae9854-e546-41e9-aae8-0542aa706c76</slot_id>
      <title>Invited Talk - Frozen Realms: Confining effects for safer JavaScript plugins</title>
      <room>Alfieri</room>
      <date>2016/07/19</date>
      <start_time>13:50</start_time>
      <end_time>14:20</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Mark</first_name>
          <last_name>Miller</last_name>
          <affiliation>Google Inc.</affiliation>
          <bio>Mark S. Miller is the main designer of the E and Dr. SES distributed object-capability programming languages, inventor of Miller Columns, a pioneer of agoric (market-based secure distributed) computing, an architect of the Xanadu hypertext publishing system, a representative to the EcmaScript committee, and one of Yedalog’s creators.</bio>
          <homepage_url>http://research.google.com/pubs/author35958.html</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/markmiller/64622953-ab96-4f03-ade5-4ed19b244771/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>JSTools</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>4d794633-a3fa-4d41-9338-dc34cb8c8085</slot_id>
      <title>JavaScript Verification</title>
      <room>Alfieri</room>
      <date>2016/07/19</date>
      <start_time>14:20</start_time>
      <end_time>14:50</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Philippa</first_name>
          <last_name>Gardner</last_name>
          <affiliation>Imperial College London</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.doc.ic.ac.uk/~pg/</homepage_url>
        </person>
      </persons>
      <tracks>
        <track>JSTools</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>4daea0ff-0275-422f-83cc-36f1862a93f5</slot_id>
      <title>What Went Wrong? Automatic Triage of Precision Loss During Static Analysis of JavaScript</title>
      <room>Alfieri</room>
      <date>2016/07/19</date>
      <start_time>14:50</start_time>
      <end_time>15:20</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Alexander</first_name>
          <last_name>Jordan</last_name>
          <affiliation>Oracle Labs, Australia</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://labs.oracle.com</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/alexanderjordan/0d109a3b-6f9b-4db2-a335-299486d1b8cf/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>JSTools</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>95325e29-d057-4c60-8575-4efe1db11506</subevent_id>
    <title>IWACO: Session 1</title>
    <subevent_type type="regular"/>
    <room>Quasimodo</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/IWACO-2016</url>
    <url_link_display>IWACO</url_link_display>
    <tracks>
      <track>IWACO</track>
    </tracks>
    <timeslot>
      <slot_id>65dd6bf9-fcb4-4ce5-b205-17f2799bf20b</slot_id>
      <title>Frozen Realms: Confining effects for safer JavaScript plugins</title>
      <room>Quasimodo</room>
      <date>2016/07/18</date>
      <start_time>13:50</start_time>
      <end_time>14:20</end_time>
      <description>In ECMAScript, a realm consists of a global object and an associated set of primordial objects – mutable objects like Array.prototype that must exist before any code runs. Objects within a realm implicitly share these primordials and can therefore easily disrupt each other by primordial poisoning – modifying these objects to behave badly. This disruption may happen accidentally or maliciously. Today, in the browser, realms can be created via same origin iframes. On creation, these realms are separate from each other. However, to achieve this separation, each realm needs its own primordials, making this separation too expensive to be used at fine grain.
Though initially separate, realms can be brought into intimate contact with each other via host-provided APIs. For example, in current browsers, same-origin iframes bring realms into direct contact with each other’s objects. Once such realms are in contact, the mutability of primordials enables an object in one realm to poison the prototypes of the other realms.
This talk discuss support for ultra-fine-grain protection domains in JavaScript. Minimizing standardization, development, explanation, and runtime costs. While at the same time maximizing robustness, security, compatibility, simplicity, and expressiveness benefits.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Mark</first_name>
          <last_name>Miller</last_name>
          <affiliation>Google Inc.</affiliation>
          <bio>Mark S. Miller is the main designer of the E and Dr. SES distributed object-capability programming languages, inventor of Miller Columns, a pioneer of agoric (market-based secure distributed) computing, an architect of the Xanadu hypertext publishing system, a representative to the EcmaScript committee, and one of Yedalog’s creators.</bio>
          <homepage_url>http://research.google.com/pubs/author35958.html</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/markmiller/64622953-ab96-4f03-ade5-4ed19b244771/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>IWACO</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>9d11027b-f7c0-4423-9416-9b378cd16f3c</slot_id>
      <title>Towards Enabling Low-Level Memory Optimisations at the High-Level with Ownership Annotations</title>
      <room>Quasimodo</room>
      <date>2016/07/18</date>
      <start_time>14:20</start_time>
      <end_time>14:50</end_time>
      <description>In modern architectures, due to the huge gap between CPU performance and memory bandwidth, an application’s performance highly depends on the speed at which the system is able to deliver data to operate on. The placement of data in memory affects the number of cache misses, and thus the overall speed of the application. To address this, pooling and splitting are two techniques that allow to group or split data in memory, according to whether they are usually accessed together or separately. However, these are either low-level optimisations, or outside the control of the programmer.
We propose OHMM, an object-oriented programming language that uses a variation of ownership types to express high-level constraints on how objects should be placed in memory. These annotations will allow the runtime to al- locate objects using pooling and splitting, and thus lead to efficient data accesses. In this short paper, we explain OHMM through an example, show how the objects will be laid out, and informally argue the benefits in terms of cache performance.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Juliana</first_name>
          <last_name>Franco</last_name>
          <affiliation>Imperial College London</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://wp.doc.ic.ac.uk/jvicent1/</homepage_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Tobias</first_name>
          <last_name>Wrigstad</last_name>
          <affiliation>Uppsala University</affiliation>
          <bio>I am an associate professor at Department of Information Technology, Uppsala University, Uppsala, Sweden.</bio>
          <homepage_url>http://wrigstad.com</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/tobiaswrigstad/4abf5948-cecc-4d23-8806-261022caa110/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Sophia</first_name>
          <last_name>Drossopoulou</last_name>
          <affiliation>Imperial College London</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://wp.doc.ic.ac.uk/sd/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/sophiadrossopoulou/bd48088b-edc7-4e3d-8aaf-3b8df6c65521/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>IWACO</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>d5d13911-8c24-4c79-a239-358c2d3a564c</slot_id>
      <title> Objects as Session-Typed Processes</title>
      <room>Quasimodo</room>
      <date>2016/07/18</date>
      <start_time>14:50</start_time>
      <end_time>15:20</end_time>
      <description>A key idea in object-oriented programming is that objects encapsulate state and interact with each other by message exchange. This perspective suggests a model of computation that is inherently concurrent (to facilitate simultaneous message exchange) and that accounts for the effect of message exchange on an object’s state (to express valid sequences of state transitions). In this paper we show that such a model of computation arises naturally from session-based communication. We introduce an object-oriented programming language that has processes as its only objects and employs linear session types to express the protocols of message exchange and to reason about concurrency and state. Based on various examples we show that our language supports the typical patterns of object-oriented programming (e.g., encapsulation, dynamic dispatch, and subtyping) while guaranteeing session fidelity in a concurrent setting. In addition, we show that our language facilitates new forms of expression (e.g., type-directed reuse, internal choice), which are not available in current object-oriented languages.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Stephanie</first_name>
          <last_name>Balzer</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>IWACO</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>d07ece11-434f-472f-8db7-7d05bac74ef9</subevent_id>
    <title>COP: Research Papers 2</title>
    <subevent_type type="regular"/>
    <room>Quasimodo</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/COP-2016</url>
    <url_link_display>COP</url_link_display>
    <tracks>
      <track>COP</track>
    </tracks>
    <timeslot>
      <slot_id>d516c43d-c327-4cd7-be7e-1fc59cbebcd1</slot_id>
      <title>Transaction Layers: Controlling Granularity of Change in Live Programming Environments using COP</title>
      <room>Quasimodo</room>
      <date>2016/07/19</date>
      <start_time>14:50</start_time>
      <end_time>15:20</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Toni</first_name>
          <last_name>Mattis</last_name>
          <affiliation>Hasso Plattner Institute</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Patrick</first_name>
          <last_name>Rein</last_name>
          <affiliation>Hasso Plattner Institute</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Robert</first_name>
          <last_name>Hirschfeld</last_name>
          <affiliation>HPI</affiliation>
          <bio>Robert Hirschfeld is a Full Professor of Computer Science at the Hasso Plattner Institute at the University of Potsdam, Germany. There he founded and leads the Software Architecture Group which is concerned with fundamental elements and structures of software. Methods and tools are developed for improving the comprehension and design of complex and interesting systems.
He served as a visiting professor at the Tokyo Institute of Technology (東京工業大学) and The University of Tokyo (東京大学), Japan.
Robert was a senior researcher with DoCoMo Euro-Labs, the European research facility of NTT DoCoMo Japan, where he worked on infrastructure components for next generation mobile communication systems with a focus on dynamic service adaptation and context-oriented programming.
Prior to joining DoCoMo Euro-Labs, he was a principal engineer at Windward Solutions in Sunnyvale, California, where he designed and implemented distributed object systems, consulted in the area of object database technologies, and developed innovative software products and applications.
Robert received a Ph.D. in Computer Science from the Ilmenau University of Technology, Germany.</bio>
          <homepage_url>http://www.hirschfeld.org/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/roberthirschfeld/994ef4df-a890-4f16-bc1b-73b117dab33c/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>COP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>e963925c-b847-4b45-96e7-8bb6348789a3</slot_id>
      <title>A Context-Oriented Software Architecture</title>
      <room>Quasimodo</room>
      <date>2016/07/19</date>
      <start_time>13:50</start_time>
      <end_time>14:20</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Kim</first_name>
          <last_name>Mens</last_name>
          <affiliation>Université Catholique de Louvain, Belgium</affiliation>
          <bio>Kim Mens is full Professor in Computer Science at UCL university in Belgium, where he leads the RELEASeD research laboratory on software evolution and software development technology. He holds the degrees of Licentiate in Mathematics, Licentiate in Computer Science, and PhD in Computer Science. His main research interests include software development, software maintenance, software evolution and context-oriented programming with a particular emphasis on programming languages and tool support.</bio>
          <homepage_url>http://www.uclouvain.be/kim.mens</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/kimmens/f8ef18ca-0793-4f37-8fa8-f5ec2c137c87/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Nicolas</first_name>
          <last_name>Cardózo</last_name>
          <affiliation>Trinity College Dublin, Ireland</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.scss.tcd.ie/~cardozon/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/nicolascardozo/4bf0b997-c8f9-4d9f-ba4b-7379d19ab2a3/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Benoît</first_name>
          <last_name>Duhoux</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>COP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>fb5a53d9-536b-447b-aefd-f6d9498c3ce4</slot_id>
      <title>Detecting Invalid Layer Combinations Using Control-Flow Analysis for Android</title>
      <room>Quasimodo</room>
      <date>2016/07/19</date>
      <start_time>14:20</start_time>
      <end_time>14:50</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Tetsuo</first_name>
          <last_name>Kamina</last_name>
          <affiliation>Ritsumeikan University</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.fse.cs.ritsumei.ac.jp/~kamina/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/tetsuokamina/c9984fbd-a38c-4f82-913d-2b9dd0c4b6e4/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Noriyuki</first_name>
          <last_name>Suzuki</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Katsuhisa</first_name>
          <last_name>Maruyama</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>COP</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>6b783aaa-1237-4870-841a-bd50472bc11a</subevent_id>
    <title>IWACO: Session 3</title>
    <subevent_type type="regular"/>
    <room>Quasimodo</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/IWACO-2016</url>
    <url_link_display>IWACO</url_link_display>
    <tracks>
      <track>IWACO</track>
    </tracks>
    <timeslot>
      <slot_id>84ae8835-4328-4654-afa9-51500aec77b4</slot_id>
      <title>Closing Discussions</title>
      <room>Quasimodo</room>
      <date>2016/07/18</date>
      <start_time>17:40</start_time>
      <end_time>18:30</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Paley</first_name>
          <last_name>Li</last_name>
          <affiliation>Northeastern University</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://palez.github.io</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/paleyli/5f6e3302-652d-4862-b5b6-d621e9b5a653/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>IWACO</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>6b1d1c6b-8d71-4027-829a-53605898cc3a</subevent_id>
    <title>COP: Research Papers 1</title>
    <subevent_type type="regular"/>
    <room>Quasimodo</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/COP-2016</url>
    <url_link_display>COP</url_link_display>
    <tracks>
      <track>COP</track>
    </tracks>
    <timeslot>
      <slot_id>0964047c-96ce-4645-9c91-eb27f293af49</slot_id>
      <title>Classes as Layers: Rewriting Design Patterns with COP - Alternative Implementations of Decorator, Observer and Visitor</title>
      <room>Quasimodo</room>
      <date>2016/07/19</date>
      <start_time>10:05</start_time>
      <end_time>10:50</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Matthias</first_name>
          <last_name>Springer</last_name>
          <affiliation>Tokyo Institute of Technology</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://m-sp.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/matthiasspringer/18e44512-a532-4c0f-8e61-a1cdf818c416/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Hidehiko</first_name>
          <last_name>Masuhara</last_name>
          <affiliation>Tokyo Institute of Technology</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://prg.is.titech.ac.jp/people/masuhara/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/hidehikomasuhara/e8be7fcd-4f25-4d02-83dc-217c74aa22c9/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Robert</first_name>
          <last_name>Hirschfeld</last_name>
          <affiliation>HPI</affiliation>
          <bio>Robert Hirschfeld is a Full Professor of Computer Science at the Hasso Plattner Institute at the University of Potsdam, Germany. There he founded and leads the Software Architecture Group which is concerned with fundamental elements and structures of software. Methods and tools are developed for improving the comprehension and design of complex and interesting systems.
He served as a visiting professor at the Tokyo Institute of Technology (東京工業大学) and The University of Tokyo (東京大学), Japan.
Robert was a senior researcher with DoCoMo Euro-Labs, the European research facility of NTT DoCoMo Japan, where he worked on infrastructure components for next generation mobile communication systems with a focus on dynamic service adaptation and context-oriented programming.
Prior to joining DoCoMo Euro-Labs, he was a principal engineer at Windward Solutions in Sunnyvale, California, where he designed and implemented distributed object systems, consulted in the area of object database technologies, and developed innovative software products and applications.
Robert received a Ph.D. in Computer Science from the Ilmenau University of Technology, Germany.</bio>
          <homepage_url>http://www.hirschfeld.org/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/roberthirschfeld/994ef4df-a890-4f16-bc1b-73b117dab33c/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>COP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>59b26b72-f722-4435-a7b7-68c8798ab57e</slot_id>
      <title>Consistent Unanticipated Adaptation for Context-Dependent Applications</title>
      <room>Quasimodo</room>
      <date>2016/07/19</date>
      <start_time>10:50</start_time>
      <end_time>11:40</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Nguonly</first_name>
          <last_name>Taing</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Markus</first_name>
          <last_name>Wutzler</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Thomas</first_name>
          <last_name>Springer</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Nicolas</first_name>
          <last_name>Cardózo</last_name>
          <affiliation>Trinity College Dublin, Ireland</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.scss.tcd.ie/~cardozon/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/nicolascardozo/4bf0b997-c8f9-4d9f-ba4b-7379d19ab2a3/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>5</sort_key>
          <first_name>Alexander</first_name>
          <last_name>Schill</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>COP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>e9c3ad81-f9a9-40fc-b11a-84b6d3ec2ae2</slot_id>
      <title>Optimizing Sideways Composition: Fast Context-Oriented Programming in ContextPyPy</title>
      <room>Quasimodo</room>
      <date>2016/07/19</date>
      <start_time>11:40</start_time>
      <end_time>12:25</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Tobias</first_name>
          <last_name>Pape</last_name>
          <affiliation>HPI, Germany</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/tobiaspape/05e8b3b4-2c7d-4349-af8a-15fa517a0036/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Tim</first_name>
          <last_name>Felgentreff</last_name>
          <affiliation>HPI, Germany</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/timfelgentreff/00aaad67-7db2-4e48-b38b-abc09e3201c1/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Robert</first_name>
          <last_name>Hirschfeld</last_name>
          <affiliation>HPI</affiliation>
          <bio>Robert Hirschfeld is a Full Professor of Computer Science at the Hasso Plattner Institute at the University of Potsdam, Germany. There he founded and leads the Software Architecture Group which is concerned with fundamental elements and structures of software. Methods and tools are developed for improving the comprehension and design of complex and interesting systems.
He served as a visiting professor at the Tokyo Institute of Technology (東京工業大学) and The University of Tokyo (東京大学), Japan.
Robert was a senior researcher with DoCoMo Euro-Labs, the European research facility of NTT DoCoMo Japan, where he worked on infrastructure components for next generation mobile communication systems with a focus on dynamic service adaptation and context-oriented programming.
Prior to joining DoCoMo Euro-Labs, he was a principal engineer at Windward Solutions in Sunnyvale, California, where he designed and implemented distributed object systems, consulted in the area of object database technologies, and developed innovative software products and applications.
Robert received a Ph.D. in Computer Science from the Ilmenau University of Technology, Germany.</bio>
          <homepage_url>http://www.hirschfeld.org/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/roberthirschfeld/994ef4df-a890-4f16-bc1b-73b117dab33c/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>COP</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>de82ae3e-89aa-425a-9586-17a38c40df68</subevent_id>
    <title>COP: Opening and Keynote</title>
    <subevent_type type="regular"/>
    <room>Quasimodo</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/COP-2016</url>
    <url_link_display>COP</url_link_display>
    <tracks>
      <track>COP</track>
    </tracks>
    <timeslot>
      <slot_id>d1aba4fb-9046-450e-a9d1-8265cfdc76ac</slot_id>
      <title>Opening</title>
      <room>Quasimodo</room>
      <date>2016/07/19</date>
      <start_time>08:45</start_time>
      <end_time>09:00</end_time>
      <description>undefined</description>
      <tracks>
        <track>COP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>d57aef19-bfab-4e2e-bd32-1ccbdee84a59</slot_id>
      <title>Keynote: We Demand Rigidly Defined Areas of Doubt and Uncertainty.</title>
      <room>Quasimodo</room>
      <date>2016/07/19</date>
      <start_time>09:00</start_time>
      <end_time>09:45</end_time>
      <description>A key idea behind context-oriented software development is that software cannot be described by tree structures such as OO designs, nested abstractions or layered virtual machines. Unfortunately, this means that the topologies of the software we build, and the interactions within those topologies, will be more complex than we once hoped. This talk will present a philosophical context for this analysis; show how a range of research fits into in that context, and attempt to outline some future directions.</description>
      <persons>
        <person>
          <role>Keynote Speaker</role>
          <sort_key>1</sort_key>
          <first_name>James</first_name>
          <last_name>Noble</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>James Noble is Professor of Computer Science and Software Engineering at Victoria University of Wellington, New Zealand. James has B.Sc(Hons) and Ph.D. degrees, both from VUW, completed in 1997. After leaving VUW, James worked in Sydney, first at the University of Technology, Sydney, and then at the Microsoft Research Institute, Macquarie University. James returned to VUW as a lecturer in late 1999, just in time to avoid the predicted end of the world.
James’s research centres around software design. This includes the design of the users’ interface, the parts of software that users have to deal with every day, and the programmers’ interface, the internal structures and organisations of software that programmers see only when they are designing, building, or modifying software. His research in both of these areas is coloured by my longstanding interest in object oriented approaches to design, and topics he has studies range from aliasing and object ownership, design patterns, agile methodology, via usability, visualisation and computer music, to postmodernism and the semiotics of programming.</bio>
          <homepage_url>http://homepages.mcs.vuw.ac.nz/~kjx/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jamesnoble/6f993a92-503e-44c6-9bbb-bfd05bf4ed23/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>COP</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>278cdca5-85d5-49de-a72b-9ffc228b0105</subevent_id>
    <title>PMLDC: Session 1: Programming Languages</title>
    <subevent_type type="regular"/>
    <room>Montale</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/PMLDC-2016</url>
    <url_link_display>Programming Models and Languages for Distributed Computing</url_link_display>
    <tracks>
      <track>Programming Models and Languages for Distributed Computing</track>
    </tracks>
    <timeslot>
      <slot_id>226558b4-6b30-48ea-a18f-cc4b8e499be9</slot_id>
      <title> Towards Aggregate Programming in Scala</title>
      <room>Montale</room>
      <date>2016/07/17</date>
      <start_time>11:00</start_time>
      <end_time>11:30</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Roberto</first_name>
          <last_name>Casadei</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Mirko</first_name>
          <last_name>Viroli</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>Programming Models and Languages for Distributed Computing</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>24e28332-5b55-470c-8d44-e008a4765ee4</slot_id>
      <title>Fractional Permissions for Race-Free Mutable References in a Dataflow Intermediate Language</title>
      <room>Montale</room>
      <date>2016/07/17</date>
      <start_time>12:00</start_time>
      <end_time>12:30</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Matteo</first_name>
          <last_name>Cimini</last_name>
          <affiliation>Indiana University</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Jeremy</first_name>
          <last_name>Siek</last_name>
          <affiliation>Indiana University</affiliation>
          <bio>Jeremy Siek is an Associate Professor at Indiana University Bloomington. Jeremy’s areas of research include programming language design, type systems, mechanized theorem proving using proof assistants, and optimizing compilers. Jeremy’s Ph.D. thesis explored foundations for constrained templates, aka the “concepts” proposal for C++. Prior to that, Jeremy developed the Boost Graph Library, a C++ generic library for graph algorithms and data structures. Jeremy post-doc’d at Rice University with Walid Taha with whom he developed the idea of gradual typing: a type system that integrates both dynamic and static typing in the same programming language. Jeremy is currently working on a gradually-typed version of Pytho. In 2009 Jeremy received the NSF CAREER award to fund his project: “Bridging the Gap Between Prototyping and Production”. In 2010 and again in 2015, Jeremy was awarded a Distinguished Visiting Fellowship from the Scottish Informatics &amp;amp; Computer Science Alliance.</bio>
          <homepage_url>http://homes.soic.indiana.edu/jsiek/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jeremysiek/4ceb3667-5067-4806-9a32-2b8fd3004a1d/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Programming Models and Languages for Distributed Computing</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>3bd4c6f5-4ee7-4f0c-ac3c-63539845f77e</slot_id>
      <title> Building Distributed Applications with Data and Time Frames</title>
      <room>Montale</room>
      <date>2016/07/17</date>
      <start_time>11:30</start_time>
      <end_time>12:00</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Crista</first_name>
          <last_name>Lopes</last_name>
          <affiliation>University of California, Irvine</affiliation>
          <bio>Crista Lopes is a Professor of Informatics in the School of Information and Computer Sciences at the University of California, Irvine. Her research focuses on software engineering for large-scale data and systems. Early in her career, she was a founding member of the team at Xerox PARC that developed Aspect-Oriented Programming. Along with her research program, she is also a prolific software developer. Her open source contributions include being one of the core developers of OpenSimulator, a virtual world server. She is also a founder and consultant of Encitra, a company specializing in online virtual reality for early-stage sustainable urban redevelopment projects. She has a PhD from Northeastern University, and MS and BS degrees from Instituto Superior Tecnico in Portugal. She is the recipient of several National Science Foundation grants, including a prestigious CAREER Award. She claims to be the only person in the world who is both an ACM Distinguished Scientist and Ohloh Kudos Rank 9.</bio>
          <homepage_url>https://www.ics.uci.edu/~lopes/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/cristalopes/2a709b22-4c7e-489a-8b15-9573227850bb/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Rohan</first_name>
          <last_name>Achar</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Arthur</first_name>
          <last_name>Valadares</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>Programming Models and Languages for Distributed Computing</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>648464a3-8a9e-4297-84be-89eb5eb16a10</slot_id>
      <title> Implicitly Distributing Pervasively Concurrent Programs</title>
      <room>Montale</room>
      <date>2016/07/17</date>
      <start_time>10:00</start_time>
      <end_time>10:30</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>John A.</first_name>
          <last_name>Thywissen</last_name>
          <affiliation>The University of Texas at Austin</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://www.cs.utexas.edu/~jthywiss/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/johnthywissen/a59b898f-ba1c-46fa-882e-674375d12dec/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Arthur</first_name>
          <last_name>Peters</last_name>
          <affiliation>University of Texas, Austin</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://orc.csres.utexas.edu/wiki/Wiki.jsp?page=Arthur%20Peters</homepage_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>William</first_name>
          <last_name>Cook</last_name>
          <affiliation>UT Austin</affiliation>
          <bio>William Cook is an Associate Professor in the Department of Computer Sciences at the University of Texas at Austin. His research is focused on object-oriented programming, programming languages, modeling languages, and the interface between programming languages and databases. Prior to joining UT in 2003, Dr. Cook was Chief Technology Officer and co-founder of Allegis Corporation. He was chief architect for several award-winning products, including the eBusiness Suite at Allegis, the Writer’s Solution for Prentice Hall, and the AppleScript language at Apple Computer. At HP Labs his research focused on the foundations of object-oriented languages, including formal models of mixins, inheritance, and typed models of object-oriented languages. He completed his Ph.D. in Computer Science at Brown University in 1989.</bio>
          <homepage_url>http://www.cs.utexas.edu/~wcook/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/williamcook/4b24e66e-5549-43f6-8e13-8010da47a4bf/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Programming Models and Languages for Distributed Computing</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>d1a245fd-c705-4a7b-a708-b33d5c168374</slot_id>
      <title>Static Type Checking for the Kompics Component Model -- Kola - The Kompics Language</title>
      <room>Montale</room>
      <date>2016/07/17</date>
      <start_time>10:30</start_time>
      <end_time>11:00</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Lars</first_name>
          <last_name>Kroll</last_name>
          <affiliation>KTH Royal Institute of Technology, Sweden</affiliation>
          <bio>Past 
 
 B.Sc. in Computer Science (Informatik) from University of Kiel (Christian Albrecht’s Universit&amp;auml;t zu Kiel), Germany 
 M.Sc. in Software Engineering of Distributed Systems from KTH Royal Institute of Technology, Stockholm, Sweden 

Present
Currently a PhD student at KTH Royal Institute of Technology, Stockholm, Sweden</bio>
          <homepage_url>http://www.kth.se/profile/lkroll/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/larskroll/b475f9d2-2cee-4209-afe5-1f2b41abdd6c/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Jim</first_name>
          <last_name>Dowling</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Seif</first_name>
          <last_name>Haridi</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>Programming Models and Languages for Distributed Computing</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>0d823c24-8f56-4ba1-972e-59f8c57a1743</subevent_id>
    <title>LIVE: Session 4</title>
    <subevent_type type="regular"/>
    <room>Foscolo</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/LIVE-2016</url>
    <url_link_display>LIVE</url_link_display>
    <tracks>
      <track>LIVE</track>
    </tracks>
    <timeslot>
      <slot_id>001693da-b985-4701-91a6-e15f6f37b14b</slot_id>
      <title>Leveraging live programming in the classroom — an experience report</title>
      <room>Foscolo</room>
      <date>2016/07/17</date>
      <start_time>16:00</start_time>
      <end_time>16:50</end_time>
      <description>Despite the high caliber of our students, the recurring Programming Language Design Seminar at UCLA did not consistently generate the kind of output we had hoped for. One issue was that students lacked the PL prototyping chops required to do meaningful work in such a short time — 10 weeks fly by when you’re having fun. Last year we created a new class to address this problem. Thanks in part to a novel framework that leverages live programming to minimize unnecessary friction and give students “instant gratification” when possible, the new class was a great success and turned out to be much more popular than we anticipated. In this talk, I will introduce our framework and show how it helped make the material in our class more accessible to the students.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Alessandro</first_name>
          <last_name>Warth</last_name>
          <affiliation>HARC / Y Combinator Research</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://tinlizzie.org/~awarth/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/alessandrowarth/d766fa32-aa3d-4bb3-b3ba-c58039407f3f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>LIVE</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>65a9635d-7e9b-4bbe-bb54-5811e3b79212</slot_id>
      <title>Discuss: Live Programming, Live Coding, and Intelligence Amplification</title>
      <room>Foscolo</room>
      <date>2016/07/17</date>
      <start_time>17:30</start_time>
      <end_time>18:20</end_time>
      <description>Live programming is an emerging topic that so far lacks a an agreed upon definition. Is it just about editing code while it is running, or with live feedback about edits, or is there more to it? To muddy the waters, there are also live coders who expose and rewire the innards of software while it generates improvised music and/or visuals, creating new artistic live experiences. Although a lot of work exists in these topics, it is often difficult to discern their similarities as well as transfer ideas between them given differing goals, seminal influences, and vocabulary. How can we close these gaps to create a more cohesive community around live programming, live coding, and perhaps even Engelbart-style intelligence amplification?</description>
      <persons>
        <person>
          <role>Co-chair</role>
          <sort_key>1</sort_key>
          <first_name>Sean</first_name>
          <last_name>McDirmid</last_name>
          <affiliation>Microsoft Research</affiliation>
          <bio>I am a programming language researcher at Microsoft Research Asia’s Systems Research Group who focuses on design, objects, IDEs, live programming, and how we could program with touch.</bio>
          <homepage_url>http://research.microsoft.com/en-us/people/smcdirm/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/seanmcdirmid/d85dbc0e-c0e4-4c3c-abf8-e59f46fbb59f/small.jpg</picture_url>
        </person>
        <person>
          <role>Co-chair</role>
          <sort_key>2</sort_key>
          <first_name>Jun</first_name>
          <last_name>Kato</last_name>
          <affiliation>National Institute of Advanced Industrial Science and Technology, Japan</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://junkato.jp</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/junkato/946564ad-0347-4e3c-8dbb-625e3449c713/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>LIVE</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>ad94ee9a-fccc-40d1-a76d-44d7201306c6</slot_id>
      <title>Sintr: Experimenting with liveness at scale</title>
      <room>Foscolo</room>
      <date>2016/07/17</date>
      <start_time>17:10</start_time>
      <end_time>17:30</end_time>
      <description>We describe Sintr, a work in progress system that supports live programming for interactive data-analysis at scale. We explain the existing practices of data analysis, motivate why liveness at scale is important, describe a prototype system and reflect on the lessons learnt so far.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Luke</first_name>
          <last_name>Church</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Mariana</first_name>
          <last_name>Marasoiu</last_name>
          <affiliation>University of Cambridge</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Alan</first_name>
          <last_name>Blackwell</last_name>
          <affiliation>University of Cambridge</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.cl.cam.ac.uk/~afb21/</homepage_url>
        </person>
      </persons>
      <tracks>
        <track>LIVE</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>fb7f22b1-4f30-45aa-82dc-6db7be2acaf1</slot_id>
      <title>Live Tuning: Expanding Live Programming Benefits to Non-Programmers</title>
      <room>Foscolo</room>
      <date>2016/07/17</date>
      <start_time>16:50</start_time>
      <end_time>17:10</end_time>
      <description>Live Programming allows programmers to gain information about the program continuously during its development. While it has been implemented in various integrated development environments (IDEs) for programmers, its interaction techniques such as slider widgets for continuous parameter tuning are comprehensible for people without any prior knowledge of programming and have been widely used for a long time. In this paper, we aim to introduce prior work on Live Programming research from the interaction point of view and relate it to Human-Computer Interaction research. We then name the subset of Live Programming interaction that only involves changes in constant values “Live Tuning.” Our example IDEs that implement both Live Programming and Live Tuning interactions are showcased, followed by the discussion on the possible future direction of programming experience (PX) research.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Jun</first_name>
          <last_name>Kato</last_name>
          <affiliation>National Institute of Advanced Industrial Science and Technology, Japan</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://junkato.jp</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/junkato/946564ad-0347-4e3c-8dbb-625e3449c713/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Masataka</first_name>
          <last_name>Goto</last_name>
          <affiliation>National Institute of Advanced Industrial Science and Technology, Japan</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>LIVE</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>0597678d-039a-47fe-8b38-a84cf4ed2469</subevent_id>
    <title>PMLDC: Session 3: Consistency</title>
    <subevent_type type="regular"/>
    <room>Montale</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/PMLDC-2016</url>
    <url_link_display>Programming Models and Languages for Distributed Computing</url_link_display>
    <tracks>
      <track>Programming Models and Languages for Distributed Computing</track>
    </tracks>
    <timeslot>
      <slot_id>2312d8ba-b7ac-4123-845a-1f87b3c50d7a</slot_id>
      <title>Data-centric Consistency Policies: A Programming Model for Distributed Applications with Tunable Consistency</title>
      <room>Montale</room>
      <date>2016/07/17</date>
      <start_time>16:30</start_time>
      <end_time>17:00</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Nosheen</first_name>
          <last_name>Zaza</last_name>
          <affiliation>Università della Svizzera italiana</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.nosheenzaza.com/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/nosheenzaza/f1d583ad-4dc8-48d4-a74c-43bd41109cd2/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Nathaniel</first_name>
          <last_name>Nystrom</last_name>
          <affiliation>Universita della Svizzera italiana (USI)</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>Programming Models and Languages for Distributed Computing</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>2baf4785-0755-4793-ad14-18a18208586d</slot_id>
      <title> On the Potential of Event Sourcing for Retroactive Actor-based Programming</title>
      <room>Montale</room>
      <date>2016/07/17</date>
      <start_time>17:00</start_time>
      <end_time>17:30</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Benjamin</first_name>
          <last_name>Erb</last_name>
          <affiliation>Ulm University, Germany </affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.uni-ulm.de/in/vs/~erb</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/benjaminerb/929f2deb-3be8-4a70-aaf6-4ca0f42149ec/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Gerhard</first_name>
          <last_name>Habiger</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Franz</first_name>
          <last_name>J. Hauck</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>Programming Models and Languages for Distributed Computing</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>9ccc1bfd-d4e8-4feb-9808-70fd7ee64dc0</slot_id>
      <title> The Consistency Babel</title>
      <room>Montale</room>
      <date>2016/07/17</date>
      <start_time>16:00</start_time>
      <end_time>16:30</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Rodrigo</first_name>
          <last_name>Rodrigues</last_name>
          <affiliation>Instituto Superior Técnico, University of Lisboa &amp; INESC-ID</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.gsd.inesc-id.pt/~rodrigo/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/rodrigorodrigues/98b254c0-9644-4499-bb80-ee061bc419ca/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Programming Models and Languages for Distributed Computing</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>57a251a2-bf75-41f9-9745-3f55d0f0843e</subevent_id>
    <title>Doctoral Symposium: Opening</title>
    <subevent_type type="regular"/>
    <room>Belli</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-doctoral-symposium</url>
    <url_link_display>Doctoral Symposium</url_link_display>
    <tracks>
      <track>Doctoral Symposium</track>
    </tracks>
    <timeslot>
      <slot_id>48d540c3-a516-4904-a98d-f1e123bf708b</slot_id>
      <title>Lightning Talks</title>
      <room>Belli</room>
      <date>2016/07/17</date>
      <start_time>08:55</start_time>
      <end_time>09:15</end_time>
      <description>undefined</description>
      <tracks>
        <track>Doctoral Symposium</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>91a8c9c5-5ed9-4f69-8af5-c5735d9ab658</slot_id>
      <title>Live Programming Environments for Reactive MVU Applications</title>
      <room>Belli</room>
      <date>2016/07/17</date>
      <start_time>09:15</start_time>
      <end_time>09:45</end_time>
      <description>Recent trends in user-interface programming move towards reactive programming which restricts data flow and handling of application state to achieve a more declarative and functional programming style. One example is the Model-View-Update (MVU) pattern which is an adaptation of the well-known Model-View-Controller (MVC) pattern. Customized debugging and development tools can leverage this architecture style due to its separation of application state and program code. The goal of this research is to show that omniscient debugging, live programming and programming-by-example can be integrated in a specifically designed programming environment for MVU applications with considerably less overhead and complexity compared to generic imperative applications. Omniscient debugging, live programming and programming-by-example all complement each other to support understanding of program behavior, quick experimentation and intuitive ways of specifying intended behavior.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Christopher</first_name>
          <last_name>Schuster</last_name>
          <affiliation>University of California, Santa Cruz</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.cs.ucsc.edu/~cschuster/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/christopherschuster/e83442d6-886e-4a67-83cd-77ac47511cca/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Doctoral Symposium</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>f84c50f6-f77e-416a-b33e-cb7a03d2ab3a</slot_id>
      <title>Welcome</title>
      <room>Belli</room>
      <date>2016/07/17</date>
      <start_time>08:45</start_time>
      <end_time>08:55</end_time>
      <description>undefined</description>
      <tracks>
        <track>Doctoral Symposium</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>7ee9499e-65e8-44b0-bd07-6a97a5a932bd</subevent_id>
    <title>PX: Session 3</title>
    <subevent_type type="regular"/>
    <room>Belli</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/PX-2016</url>
    <url_link_display>PX</url_link_display>
    <tracks>
      <track>PX</track>
    </tracks>
    <timeslot>
      <title></title>
      <room></room>
      <start_time>13:50</start_time>
      <end_time>15:20</end_time>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>cce18811-f2ad-4b75-bd23-f29ea63ac773</subevent_id>
    <title>GRACE: Grace</title>
    <subevent_type type="regular"/>
    <room>Saba</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/GRACE-2016</url>
    <url_link_display>GRACE</url_link_display>
    <tracks>
      <track>GRACE</track>
    </tracks>
    <timeslot>
      <slot_id>494a349d-e4e3-490b-8d49-aa8290c1bedb</slot_id>
      <title>Recent changes and language design issues in Grace</title>
      <room>Saba</room>
      <date>2016/07/19</date>
      <start_time>10:45</start_time>
      <end_time>11:55</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Andrew</first_name>
          <last_name>Black</last_name>
          <affiliation>Portland State University</affiliation>
          <bio>My research interests are in the area of programming languages, operating systems, object-oriented systems and distributed computing, and more specifically in the region where they overlap (such as language design for distributed Object-oriented computing.) My favorite system for trying out ideas is Squeak Smalltalk. I have written a few Squeak goodies that I believe are generally useful. I have been actively working on Traits with the folks from SCG in Bern; see Nathanael Sch&amp;auml;rli’s Traits page for details. I’m a co-author of two books on Smalltalk programming, Squeak by Example, and Pharo By Example.</bio>
          <homepage_url>http://www.cs.pdx.edu/~black</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/andrewblack/7a64dfdd-f952-418a-b3de-3351f76e441a/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Kim</first_name>
          <last_name>Bruce</last_name>
          <affiliation>Pomona College</affiliation>
          <bio>Kim B. Bruce has been Reuben C. and Eleanor Winslow Professor of Computer Science at Pomona College since the summer of 2005. He is the Frederick Latimer Wells Professor of Computer Science emeritus at Williams College, where he taught for 28 years. His first position out of graduate school was as an instructor in Mathematics at Princeton University from 1975 to 1977. His research program was originally in the model theory of languages with generalized quantifiers, but his interests turned to programming languages after his stay at M.I.T. His research focus evolved from models of the polymorphic lambda calculus to the study of semantics and type theory. This led to his continuing work in the design of object-oriented languages. His most recent research project involves the design of a new language, Grace, designed for use in the first two years of Computer Science education.</bio>
          <homepage_url>http://www.cs.pomona.edu/~kim/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/kimbruce/75d65698-aaf4-4173-88cc-4a4ddbaefe1f/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>James</first_name>
          <last_name>Noble</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>James Noble is Professor of Computer Science and Software Engineering at Victoria University of Wellington, New Zealand. James has B.Sc(Hons) and Ph.D. degrees, both from VUW, completed in 1997. After leaving VUW, James worked in Sydney, first at the University of Technology, Sydney, and then at the Microsoft Research Institute, Macquarie University. James returned to VUW as a lecturer in late 1999, just in time to avoid the predicted end of the world.
James’s research centres around software design. This includes the design of the users’ interface, the parts of software that users have to deal with every day, and the programmers’ interface, the internal structures and organisations of software that programmers see only when they are designing, building, or modifying software. His research in both of these areas is coloured by my longstanding interest in object oriented approaches to design, and topics he has studies range from aliasing and object ownership, design patterns, agile methodology, via usability, visualisation and computer music, to postmodernism and the semiotics of programming.</bio>
          <homepage_url>http://homepages.mcs.vuw.ac.nz/~kjx/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jamesnoble/6f993a92-503e-44c6-9bbb-bfd05bf4ed23/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>GRACE</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>76b5cd63-50b6-4270-805f-fd4b91119597</slot_id>
      <title>Experience teaching with Grace</title>
      <room>Saba</room>
      <date>2016/07/19</date>
      <start_time>10:05</start_time>
      <end_time>10:45</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Andrew</first_name>
          <last_name>Black</last_name>
          <affiliation>Portland State University</affiliation>
          <bio>My research interests are in the area of programming languages, operating systems, object-oriented systems and distributed computing, and more specifically in the region where they overlap (such as language design for distributed Object-oriented computing.) My favorite system for trying out ideas is Squeak Smalltalk. I have written a few Squeak goodies that I believe are generally useful. I have been actively working on Traits with the folks from SCG in Bern; see Nathanael Sch&amp;auml;rli’s Traits page for details. I’m a co-author of two books on Smalltalk programming, Squeak by Example, and Pharo By Example.</bio>
          <homepage_url>http://www.cs.pdx.edu/~black</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/andrewblack/7a64dfdd-f952-418a-b3de-3351f76e441a/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Kim</first_name>
          <last_name>Bruce</last_name>
          <affiliation>Pomona College</affiliation>
          <bio>Kim B. Bruce has been Reuben C. and Eleanor Winslow Professor of Computer Science at Pomona College since the summer of 2005. He is the Frederick Latimer Wells Professor of Computer Science emeritus at Williams College, where he taught for 28 years. His first position out of graduate school was as an instructor in Mathematics at Princeton University from 1975 to 1977. His research program was originally in the model theory of languages with generalized quantifiers, but his interests turned to programming languages after his stay at M.I.T. His research focus evolved from models of the polymorphic lambda calculus to the study of semantics and type theory. This led to his continuing work in the design of object-oriented languages. His most recent research project involves the design of a new language, Grace, designed for use in the first two years of Computer Science education.</bio>
          <homepage_url>http://www.cs.pomona.edu/~kim/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/kimbruce/75d65698-aaf4-4173-88cc-4a4ddbaefe1f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>GRACE</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>f96d9eaa-1c79-4377-a881-c1663cbca7bb</slot_id>
      <title>The Recurring Rainfall Problem</title>
      <room>Saba</room>
      <date>2016/07/19</date>
      <start_time>11:55</start_time>
      <end_time>12:25</end_time>
      <description>Soloway’s Rainfall problem, a classic benchmark in computing education research, has proven difficult for many CS1 students. Rainfall tests students’ abilities at plan composition, the task of integrating code fragments that implement subparts of a problem into a single program. Nearly all prior studies of Rainfall have involved students who were learning imperative programming with arrays. In our recent multi-university study, students learning functional programming produced atypical profiles of compositions and errors on Rainfall.
What do these different results suggest about the problem of plan composition and programming education? This talk raises various questions about the relationships between programming languages, program design, curricula, and how students perceive code structure.
Please come equipped with pen and paper, because the talk will require you to write some programs.
Joint work primarily with Kathi Fisler.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Shriram</first_name>
          <last_name>Krishnamurthi</last_name>
          <affiliation>Brown University</affiliation>
          <bio>I am a Professor of Computer Science at Brown University, Providence, RI, USA. You can learn more about me from my Web site.</bio>
          <homepage_url>http://cs.brown.edu/~sk/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/shriramkrishnamurthi/bd5925e0-a495-4a41-b84e-906b6e236341/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>GRACE</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>61a30c86-3091-4e5f-a7d8-1b6f8c06f2d2</subevent_id>
    <title> STOP: Session 2</title>
    <subevent_type type="regular"/>
    <room>Alfieri</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/STOP-2016</url>
    <url_link_display>STOP</url_link_display>
    <tracks>
      <track>STOP</track>
    </tracks>
    <timeslot>
      <slot_id>177a1d0e-3eb1-4028-bd1e-2e115c67e51a</slot_id>
      <title>Gradual Typing for Delimited Continuations</title>
      <room>Alfieri</room>
      <date>2016/07/17</date>
      <start_time>11:25</start_time>
      <end_time>11:55</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Yusuke</first_name>
          <last_name>Miyazaki</last_name>
          <affiliation>Kyoto University</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.fos.kuis.kyoto-u.ac.jp/~miyazaki/</homepage_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Taro</first_name>
          <last_name>Sekiyama</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Atsushi</first_name>
          <last_name>Igarashi</last_name>
          <affiliation>Kyoto University</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.fos.kuis.kyoto-u.ac.jp/~igarashi/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/atsushiigarashi/570886dc-7183-4e5b-bc64-0ccac223aceb/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>STOP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>743172cd-5b58-49e0-9144-2f7c91ccf10b</slot_id>
      <title>Optional Typing in Dart: Purity and Practice</title>
      <room>Alfieri</room>
      <date>2016/07/17</date>
      <start_time>10:05</start_time>
      <end_time>10:55</end_time>
      <description>Dart provides experience with an optionally typed language used in a demanding industrial setting. I’ll discuss our experiences with Dart’s version of optional/gradual typing and what design insights one might gain from them.</description>
      <persons>
        <person>
          <role>invited speaker</role>
          <sort_key>1</sort_key>
          <first_name>Gilad</first_name>
          <last_name>Bracha</last_name>
          <affiliation>Google</affiliation>
          <bio>Gilad Bracha is the creator of the Newspeak programming language and a software engineer at Google where he works on Dart. Previously, he was a VP at SAP Labs, a Distinguished Engineer at Cadence, and a Computational Theologist and Distinguished Engineer at Sun. He is co-author of the Java Language Specification, and a researcher in the area of object-oriented programming languages. Prior to joining Sun, he worked on Strongtalk, the Animorphic Smalltalk System. He received his B.Sc in Mathematics and Computer Science from Ben Gurion University in Israel and a Ph.D. in Computer Science from the University of Utah.</bio>
          <homepage_url>bracha.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/giladbracha/3d5ec76d-4d63-456b-859a-6b44e587d1bd/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>STOP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>9ec66e5e-893a-412e-aba0-64f56c641503</slot_id>
      <title>Beyond Types: Extending the Gradual Guarantee</title>
      <room>Alfieri</room>
      <date>2016/07/17</date>
      <start_time>10:55</start_time>
      <end_time>11:25</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>James</first_name>
          <last_name>Noble</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>James Noble is Professor of Computer Science and Software Engineering at Victoria University of Wellington, New Zealand. James has B.Sc(Hons) and Ph.D. degrees, both from VUW, completed in 1997. After leaving VUW, James worked in Sydney, first at the University of Technology, Sydney, and then at the Microsoft Research Institute, Macquarie University. James returned to VUW as a lecturer in late 1999, just in time to avoid the predicted end of the world.
James’s research centres around software design. This includes the design of the users’ interface, the parts of software that users have to deal with every day, and the programmers’ interface, the internal structures and organisations of software that programmers see only when they are designing, building, or modifying software. His research in both of these areas is coloured by my longstanding interest in object oriented approaches to design, and topics he has studies range from aliasing and object ownership, design patterns, agile methodology, via usability, visualisation and computer music, to postmodernism and the semiotics of programming.</bio>
          <homepage_url>http://homepages.mcs.vuw.ac.nz/~kjx/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jamesnoble/6f993a92-503e-44c6-9bbb-bfd05bf4ed23/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Michael</first_name>
          <last_name>Homer</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://ecs.vuw.ac.nz/~mwh</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/michaelhomer/d0f1e3dc-74d6-4562-b07c-8e27e5cae71b/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Timothy</first_name>
          <last_name>Jones</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>Programming languages PhD student at VUW working on Grace.</bio>
          <homepage_url>http://homepages.ecs.vuw.ac.nz/~tim</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/timothyjones/2f3ecea2-e161-41ad-842c-d2457b2eebaa/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Sophia</first_name>
          <last_name>Drossopoulou</last_name>
          <affiliation>Imperial College London</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://wp.doc.ic.ac.uk/sd/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/sophiadrossopoulou/bd48088b-edc7-4e3d-8aaf-3b8df6c65521/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>5</sort_key>
          <first_name>Andrew</first_name>
          <last_name>Black</last_name>
          <affiliation>Portland State University</affiliation>
          <bio>My research interests are in the area of programming languages, operating systems, object-oriented systems and distributed computing, and more specifically in the region where they overlap (such as language design for distributed Object-oriented computing.) My favorite system for trying out ideas is Squeak Smalltalk. I have written a few Squeak goodies that I believe are generally useful. I have been actively working on Traits with the folks from SCG in Bern; see Nathanael Sch&amp;auml;rli’s Traits page for details. I’m a co-author of two books on Smalltalk programming, Squeak by Example, and Pharo By Example.</bio>
          <homepage_url>http://www.cs.pdx.edu/~black</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/andrewblack/7a64dfdd-f952-418a-b3de-3351f76e441a/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>6</sort_key>
          <first_name>Kim</first_name>
          <last_name>Bruce</last_name>
          <affiliation>Pomona College</affiliation>
          <bio>Kim B. Bruce has been Reuben C. and Eleanor Winslow Professor of Computer Science at Pomona College since the summer of 2005. He is the Frederick Latimer Wells Professor of Computer Science emeritus at Williams College, where he taught for 28 years. His first position out of graduate school was as an instructor in Mathematics at Princeton University from 1975 to 1977. His research program was originally in the model theory of languages with generalized quantifiers, but his interests turned to programming languages after his stay at M.I.T. His research focus evolved from models of the polymorphic lambda calculus to the study of semantics and type theory. This led to his continuing work in the design of object-oriented languages. His most recent research project involves the design of a new language, Grace, designed for use in the first two years of Computer Science education.</bio>
          <homepage_url>http://www.cs.pomona.edu/~kim/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/kimbruce/75d65698-aaf4-4173-88cc-4a4ddbaefe1f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>STOP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>bebfd773-1c52-47e0-af3d-470c7ed1b9e2</slot_id>
      <title>Automating Gradual Typing</title>
      <room>Alfieri</room>
      <date>2016/07/17</date>
      <start_time>11:55</start_time>
      <end_time>12:25</end_time>
      <description>Gradual typing has become a standard mechanism for both progressively adding types to dynamically typed languages and liberalising existing type systems, and recent developments have produced the Gradualizer and Abstracting Gradual Typing (AGT) for systematically lifting a typed language to a corresponding gradual language. AGT applies the principles of abstract interpretation to a language’s underlying predicates and functions: we have used this technique to build a library in the dependently typed language Agda for automatically generating different type systems over the same language of terms. Our mechanisation takes an abstract description of a type system indexed by a functor and then generates a variety of different type systems, including gradual typing.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Timothy</first_name>
          <last_name>Jones</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>Programming languages PhD student at VUW working on Grace.</bio>
          <homepage_url>http://homepages.ecs.vuw.ac.nz/~tim</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/timothyjones/2f3ecea2-e161-41ad-842c-d2457b2eebaa/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>STOP</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>9c0f344b-2409-4591-a2ae-bffd09ca0113</subevent_id>
    <title>Doctoral Symposium: Session 1</title>
    <subevent_type type="regular"/>
    <room>Belli</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-doctoral-symposium</url>
    <url_link_display>Doctoral Symposium</url_link_display>
    <tracks>
      <track>Doctoral Symposium</track>
    </tracks>
    <timeslot>
      <slot_id>22acf07b-714d-4a25-a1b6-23ef18bc4eae</slot_id>
      <title>Coffee break</title>
      <room>Belli</room>
      <date>2016/07/17</date>
      <start_time>11:05</start_time>
      <end_time>11:25</end_time>
      <description>undefined</description>
      <tracks>
        <track>Doctoral Symposium</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>29fba5a0-83e6-490a-92ae-e3121bc0a2e1</slot_id>
      <title>User-Centric Static Analysis</title>
      <room>Belli</room>
      <date>2016/07/17</date>
      <start_time>10:05</start_time>
      <end_time>10:35</end_time>
      <description>Despite years of research and development of static code analysis tools, industrial adoption of such tools still shows high abandonment rates. End-user experience highlights common issues that severely impact tool adoption. Long waiting times, numerous false positives, and a high number of warnings count among them. While past research has largely focused on improving the scalability and the precision of the tools, we advocate the notion of designing static analyses in a user-centric fashion. We achieve this by embedding the needs of the end-users - the code developers- into the analysis, providing them with tools that make static analysis easier to understand and to handle.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Lisa</first_name>
          <last_name>Nguyen Quang Do</last_name>
          <affiliation>Fraunhofer IEM</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://de.linkedin.com/in/nguyenqdlisa/en</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/lisanguyenquangdo/ac17c0cc-4eb6-41f4-a45c-05593f05045f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Doctoral Symposium</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>33537ee5-9dda-4958-b05a-5c6cb2b0f562</slot_id>
      <title>Language Design for Validatable Information System Specifications</title>
      <room>Belli</room>
      <date>2016/07/17</date>
      <start_time>11:25</start_time>
      <end_time>11:55</end_time>
      <description>A programming language design must strike a balance between validatability, expressiveness, and efficiency. Bridging the gap between domain concepts and the encoding of these concepts in a programming language is one of the core challenges of software engineering. The validatability of a language is a measure of the size of this gap. In a language with a high validatability index, one can express intent with relatively little encoding, which makes it straightforward to establish that a program ‘does the right thing’. Validatability decreases with increasing encoding.
The objective of my thesis work is to do a case study to investigate this balance in the domain of information systems. Information systems are systems for the collection, organization, storage, and communication of information. Information systems aim to support operations, management and decision-making. In order to do this, the data in information systems is filtered and processed to create new data.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Daco</first_name>
          <last_name>Harkes</last_name>
          <affiliation>Delft University of Technology</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/dacoharkes/fec5babc-7401-4a7e-8ba1-bcccbc523031/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Doctoral Symposium</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>899f714a-ab06-40a2-ad80-c1c3605941e0</slot_id>
      <title>Compositional and Mechanically Verified Program Analyzers</title>
      <room>Belli</room>
      <date>2016/07/17</date>
      <start_time>11:55</start_time>
      <end_time>12:25</end_time>
      <description>Program analyzers have proven effective in detecting undesired behavior in programs such as crashes, bugs, and security vulnerabilities. Some settings require high assurance in the results of program analysis, such as software embedded in automobiles or airplanes. To achieve high assurance in the correctness or security of a piece of software, formal methods are used to automatically construct or check proofs of these properties using computers. Achieving high assurance for a piece of software is a monumental task, and is widely considered by experts to be out of reach for mainstream use using current methods. As a result, verification is only attempted for the most critical software components. In this thesis, I describe how to bring high assurance software closer to a reality by improving the methods used to develop implementations and proofs for program analyzers.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>David</first_name>
          <last_name>Darais</last_name>
          <affiliation>University of Maryland, College Park</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://david.darais.com</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/daviddarais/84b89731-ca3c-4d97-9540-4ce4db09d1d1/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Doctoral Symposium</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>b97d5c5f-ae8c-44bb-b824-cb9f27fe3b49</slot_id>
      <title>Domain-based Simulation Modelling to Enable Continuous Testing for Software Development in the Chemical Industry</title>
      <room>Belli</room>
      <date>2016/07/17</date>
      <start_time>10:35</start_time>
      <end_time>11:05</end_time>
      <description>It is widely considered that the adoption of iterative software engineering methodologies and in particular continuous testing helps ensure high quality software and reduce bugs. The successful application of continuous testing however rests on the assumptions that testing is cheap, fast and easily repeatable. Software development for control systems in the chemical production domain generally cannot satisfy that constraint as evaluating the correctness of a recipe program requires its execution on a live production environment which can take multiple days to complete, usually comes at great expense in raw materials and can sometimes create a reliance on safety systems to manage risk. As a result testing in the chemical domain becomes a bottleneck that prevents true iterative cycles taking place. This in turn leads to a linear waterfall-like process with all its inherent problems and limitations.
To help resolve this problem, we propose a generic simulation framework, based on a domain model of core components of chemical productions plants. This simulation can be used in place of the live plant during a first phase of testing. Only once an engineer is satisfied that the software is performing as expected on the simulation, will that live plant hardware need to be involved. This will help greatly in reducing the bottleneck in the testing phase by allowing this to be quick and automated while reducing the risk and cost involved.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Adam</first_name>
          <last_name>Ziolkowski</last_name>
          <affiliation>University of East Anglia</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>Doctoral Symposium</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>f2cebc64-b24e-4155-8ff6-7faa633a7f34</subevent_id>
    <title>PX: Session 4</title>
    <subevent_type type="regular"/>
    <room>Belli</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/PX-2016</url>
    <url_link_display>PX</url_link_display>
    <tracks>
      <track>PX</track>
    </tracks>
    <timeslot>
      <title></title>
      <room></room>
      <start_time>16:00</start_time>
      <end_time>17:30</end_time>
    </timeslot>        
  </subevent>
  <subevent>
    <subevent_id>077eca4f-72d2-437f-8729-c1fca3e57cff</subevent_id>
    <title>PX: Session 2</title>
    <subevent_type type="regular"/>
    <room>Belli</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/PX-2016</url>
    <url_link_display>PX</url_link_display>
    <tracks>
      <track>PX</track>
    </tracks>
    <timeslot>
      <title></title>
      <room></room>
      <start_time>10:05</start_time>
      <end_time>12:30</end_time>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>db633d25-021e-4308-9d3b-9ba276dcc471</subevent_id>
    <title>FTfJP: Session 4</title>
    <subevent_type type="regular"/>
    <room>Belli</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/FTfJP-2016</url>
    <url_link_display>FTfJP</url_link_display>
    <tracks>
      <track>FTfJP</track>
    </tracks>
    <timeslot>
      <slot_id>100ecefd-a21b-473e-b8d7-d3474b52d280</slot_id>
      <title>Permission and Authority Revisited: Towards a Formalization</title>
      <room>Belli</room>
      <date>2016/07/19</date>
      <start_time>18:00</start_time>
      <end_time>18:30</end_time>
      <description>Miller’s notions of permissions and authority are foundational to the analysis of object-capability programming. Informal definitions of these concepts were given in Miller’s thesis. In this paper we propose precise definitions for permissions and authority, based on a small object-oriented calculus. We quantify their bounds (current, eventual, behavioural, topological), and delineate the relationships between these definitions.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Sophia</first_name>
          <last_name>Drossopoulou</last_name>
          <affiliation>Imperial College London</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://wp.doc.ic.ac.uk/sd/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/sophiadrossopoulou/bd48088b-edc7-4e3d-8aaf-3b8df6c65521/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>James</first_name>
          <last_name>Noble</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>James Noble is Professor of Computer Science and Software Engineering at Victoria University of Wellington, New Zealand. James has B.Sc(Hons) and Ph.D. degrees, both from VUW, completed in 1997. After leaving VUW, James worked in Sydney, first at the University of Technology, Sydney, and then at the Microsoft Research Institute, Macquarie University. James returned to VUW as a lecturer in late 1999, just in time to avoid the predicted end of the world.
James’s research centres around software design. This includes the design of the users’ interface, the parts of software that users have to deal with every day, and the programmers’ interface, the internal structures and organisations of software that programmers see only when they are designing, building, or modifying software. His research in both of these areas is coloured by my longstanding interest in object oriented approaches to design, and topics he has studies range from aliasing and object ownership, design patterns, agile methodology, via usability, visualisation and computer music, to postmodernism and the semiotics of programming.</bio>
          <homepage_url>http://homepages.mcs.vuw.ac.nz/~kjx/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jamesnoble/6f993a92-503e-44c6-9bbb-bfd05bf4ed23/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Mark</first_name>
          <last_name>Miller</last_name>
          <affiliation>Google Inc.</affiliation>
          <bio>Mark S. Miller is the main designer of the E and Dr. SES distributed object-capability programming languages, inventor of Miller Columns, a pioneer of agoric (market-based secure distributed) computing, an architect of the Xanadu hypertext publishing system, a representative to the EcmaScript committee, and one of Yedalog’s creators.</bio>
          <homepage_url>http://research.google.com/pubs/author35958.html</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/markmiller/64622953-ab96-4f03-ade5-4ed19b244771/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Toby</first_name>
          <last_name>Murray</last_name>
          <affiliation>University of Melbourne</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://people.eng.unimelb.edu.au/tobym</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/tobymurray/b22e1351-c7fc-420a-acef-492aadfce115/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>FTfJP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>2360cd70-cdad-4928-8582-d5d84d2aadea</slot_id>
      <title>Towards Modular Reasoning for Context-Oriented Programs</title>
      <room>Belli</room>
      <date>2016/07/19</date>
      <start_time>17:30</start_time>
      <end_time>18:00</end_time>
      <description>Context-oriented programming (COP) is an approach to modularity for applications whose behavior may vary depending on the status of the environment in which they execute and the software’s own state. Languages supporting COP provide partial methods to modularly define behavioral variations of methods specific to a context, layers to group the partial methods and layer activation mechanisms to dynamically compose layers. Because the behavior of these partial methods often differs from that of the base methods they override, reasoning about context-oriented programs seems to require a case analysis based on partial methods and context information from the entire program, which is not scalable. In this paper we explain a new language feature, layer interfaces, which allows modular specification and verification of context-oriented programs. We demonstrate these techniques by using examples.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Tomoyuki</first_name>
          <last_name>Aotani</last_name>
          <affiliation>Tokyo Institute of Technology, Japan</affiliation>
          <bio>Tomoyuki Aotani is an assistant professor in Dept. of Mathematical and Computing Sciences, Tokyo Institute of Technology. He received his BSc from Hosei University in 2004 and MA and PhD from the University of Tokyo in 2006 and 2009, respectively.</bio>
          <homepage_url>https://taotani.wordpress.com/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/tomoyukiaotani/204233c8-a4d9-40e6-9452-b1c66e17a875/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Gary</first_name>
          <last_name>Leavens</last_name>
          <affiliation>Central Florida University</affiliation>
          <bio>The long term goal of my research is to better understand how to solve programming problems: how to specify such problems, methods for thinking about such problems, notations for expressing solutions, and ways to check that the solutions are correct. In pursuing this goal, I have worked in two main areas: formal methods and programming languages. formal methods and programming languages.</bio>
          <homepage_url>http://www.eecs.ucf.edu/~leavens</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/garyleavens/dfa2c000-4f7d-43b5-9d2b-38e6edd6002c/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>FTfJP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>ac96f078-93b4-444b-9f6d-616c5ad5f76e</slot_id>
      <title>Partial Solutions to VerifyThis 2016 Challenges 2 and 3 Using VeriFast</title>
      <room>Belli</room>
      <date>2016/07/19</date>
      <start_time>16:30</start_time>
      <end_time>17:00</end_time>
      <description>We describe our partial solutions, using our VeriFast separation-logic based tool for modular formal verification of C and Java programs, to Challenges 2 and 3 of the VerifyThis 2016 Verification Competition, involving the verification of crash-freedom and certain correctness properties of code fragments implementing constant-space tree traversal and a tree barrier.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Bart</first_name>
          <last_name>Jacobs</last_name>
          <affiliation>iMinds - Distrinet, KU Leuven</affiliation>
          <bio>Assistant professor at the iMinds-DistriNet research group at the Department of Computer Science, KU Leuven - University of Leuven, Belgium</bio>
          <homepage_url>http://www.cs.kuleuven.be/~bartj/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/bartjacobs/208ad8e4-9df9-45fa-a8b1-cee6658ebdda/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>FTfJP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>c703b3be-a89a-43bb-9c09-439a7d4bbc8b</slot_id>
      <title>Tool Demonstration: The VeriFast Verification System for Java and C</title>
      <room>Belli</room>
      <date>2016/07/19</date>
      <start_time>16:00</start_time>
      <end_time>16:30</end_time>
      <description>VeriFast is a verification tool for single- and multi-threaded C and Java programs annotated with preconditions and postconditions written in separation logic. To enable rich specifications, the programmer may define inductive datatypes, primitive recursive pure functions over these datatypes, and abstract separation logic predicates. To enable verification of these rich specifications, the programmer may write lemma functions, i.e., functions that serve only as proofs that their precondition implies their postcondition. The verifier checks that lemma functions terminate and do not have side-effects. Since neither VeriFast itself nor the underlying SMT solver need to do any significant search, verification time is predictable and low. VeriFast comes with an IDE that enables interactive annotation insertion and symbolic debugging.
So far, we have used VeriFast to experiment with novel approaches for modular specification and verification of functional correctness of fine-grained concurrent algorithms [POPL 2011], memory-safety of programs that dynamically load and unload modules [FM 2011], the interactive behavior of programs that use APIs like stdio.h or java.io [ESOP 2015], termination of programs involving dynamically bound method calls [ECOOP 2015], and deadlock-freedom of programs where threads wait for other threads in the presence of exceptions [FTfJP 2015]. Furthermore, we have used VeriFast to verify crash-freedom of Java Card software for the Belgian eID card, a Linux device driver, a C program routing packets in a home gateway, and functional correctness of the complex Multiple-Compare-and-Swap lock-free concurrent algorithm, and to participate in verification competitions, winning at VerifyThis 2012 and 2016.
VeriFast is available for download at https://people.cs.kuleuven.be/~bart.jacobs/verifast/.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Bart</first_name>
          <last_name>Jacobs</last_name>
          <affiliation>iMinds - Distrinet, KU Leuven</affiliation>
          <bio>Assistant professor at the iMinds-DistriNet research group at the Department of Computer Science, KU Leuven - University of Leuven, Belgium</bio>
          <homepage_url>http://www.cs.kuleuven.be/~bartj/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/bartjacobs/208ad8e4-9df9-45fa-a8b1-cee6658ebdda/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>FTfJP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>d90374b7-9561-4492-a0eb-845bc521faba</slot_id>
      <title>Coupling Catch Clauses with Local Declarations</title>
      <room>Belli</room>
      <date>2016/07/19</date>
      <start_time>17:00</start_time>
      <end_time>17:30</end_time>
      <description>We propose an alternative to the usual try-catch construct, where catch clauses are coupled with the declaration of a local variable, rather than with an arbitrary expression. That is, in case initialization of the local variable fails, they provide an alternative computation which does not depend on such variable. This alternative mechanism subsumes the standard one and allows a more natural and functional programming style. We illustrate such advantages by some paradigmatic examples. The proposal is formalized as an extension of Featherweight Java (FJ) with a type system which can be proved to be sound.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Paola</first_name>
          <last_name>Giannini</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Marco</first_name>
          <last_name>Servetto</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Elena</first_name>
          <last_name>Zucca</last_name>
          <affiliation>University of Genova</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.disi.unige.it/person/ZuccaE/</homepage_url>
        </person>
      </persons>
      <tracks>
        <track>FTfJP</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>44480df7-eff0-408f-8f4e-9fa4477ae832</subevent_id>
    <title> STOP: Session 1</title>
    <subevent_type type="regular"/>
    <room>Alfieri</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/STOP-2016</url>
    <url_link_display>STOP</url_link_display>
    <tracks>
      <track>STOP</track>
    </tracks>
    <timeslot>
      <slot_id>b346f139-710f-4772-90d6-d76d8b4ca5b7</slot_id>
      <title>Opening remarks</title>
      <room>Alfieri</room>
      <date>2016/07/17</date>
      <start_time>08:45</start_time>
      <end_time>08:55</end_time>
      <description>undefined</description>
      <tracks>
        <track>STOP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>f82fb146-6200-4193-bf39-2b29fe2aee74</slot_id>
      <title>Types for Ruby</title>
      <room>Alfieri</room>
      <date>2016/07/17</date>
      <start_time>08:55</start_time>
      <end_time>09:45</end_time>
      <description>Ruby is a popular, object-oriented, dynamic scripting language. Over the last several years, we have been working to bring some of the benefits of static typing to Ruby. In this talk, I will discuss how our approach has evolved from pure static analysis to pure dynamic analysis and finally to what we think is the right mixture of both. I will also discuss some of the challenges of working with a complex and evolving language as well as future plans.</description>
      <persons>
        <person>
          <role>invited speaker</role>
          <sort_key>1</sort_key>
          <first_name>Jeffrey S.</first_name>
          <last_name>Foster</last_name>
          <affiliation>University of Maryland, College Park</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.cs.umd.edu/~jfoster</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jeffreysfoster/b22ce952-32b0-48bd-be56-12fd87bf3469/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>STOP</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>fa2fd73c-9808-4b2e-8585-a19581439a87</subevent_id>
    <title>FTfJP: Invited talk</title>
    <subevent_type type="regular"/>
    <room>Belli</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/FTfJP-2016</url>
    <url_link_display>FTfJP</url_link_display>
    <tracks>
      <track>FTfJP</track>
    </tracks>
    <timeslot>
      <slot_id>ae235d7a-933f-4fc3-82db-fe56c2db3e23</slot_id>
      <title>Java Generics are Turing Complete</title>
      <room>Belli</room>
      <date>2016/07/19</date>
      <start_time>10:10</start_time>
      <end_time>11:00</end_time>
      <description>Although not the most popular feature of Java’s generics, bounded wildcards have their uses. On the negative side, bounded wildcards render type checking undecidable. On the positive side, bounded wildcards let us encode any computation at compile time; so, Java’s type checker can recognize any recursive language.
The first part of the talk will review how bounded wildcards are used in the implementation of Java’s standard library. The second part of the talk will review the proof that bounded wildcards render subtype checking undecidable. The third part of the talk will discuss a parser generator for fluent interfaces, which employs Java’s type checker as an interpreter for CYK parsers.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Radu</first_name>
          <last_name>Grigore</last_name>
          <affiliation>University of Oxford</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.cs.ox.ac.uk/people/radu.grigore/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/radugrigore/3fc33aae-dfd0-4124-bf9f-9c79f3726fa1/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>FTfJP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>c5ef1a1c-aea6-40de-831a-e8e0e5ae713b</slot_id>
      <title>Opening</title>
      <room>Belli</room>
      <date>2016/07/19</date>
      <start_time>10:05</start_time>
      <end_time>10:10</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Vladimir</first_name>
          <last_name>Klebanov</last_name>
          <affiliation>Karlsruhe Institute of Technology</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://formal.iti.kit.edu/~klebanov/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/vladimirklebanov/ed412675-3d2d-413b-87a9-3602ae63c38b/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>FTfJP</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>3cd50029-ac23-4005-af93-a3953d79eb94</subevent_id>
    <title>LIVE: Session 3</title>
    <subevent_type type="regular"/>
    <room>Foscolo</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/LIVE-2016</url>
    <url_link_display>LIVE</url_link_display>
    <tracks>
      <track>LIVE</track>
    </tracks>
    <timeslot>
      <slot_id>26a4b747-2019-45c0-a580-c490530b75c5</slot_id>
      <title>Live Literals</title>
      <room>Foscolo</room>
      <date>2016/07/17</date>
      <start_time>14:10</start_time>
      <end_time>14:30</end_time>
      <description>Live programming environments improve programmer experience by providing views of program execution which are continuously, and instantaneously updated. In most existing work on liveness, these views are considered part of the IDE: separate windows, panels, or widgets allow programmers to inspect and interact with live data and program execution. In this paper we present “live literals” where the source code itself is used as vehicle for immediate feedback and direct manipulation. Live literals are like ordinary programming language literals, but they are automatically updated after changes to the code. We illustrate the concept of live literals in Javascript using three applications: embedded spreadsheets, live units tests, and probes.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Tijs</first_name>
          <last_name>van der Storm</last_name>
          <affiliation>CWI</affiliation>
          <bio>Tijs van der Storm is researcher at Centrum Wiskunde &amp;amp; Informatica (CW), the Dutch national institute for computer science and mathematics and teaches Software Construction at the Universiteit van Amsterdam (UvA). In his work he tries to solve software engineering problems through better language design and language engineering. He is one of the designers of the Rascal language. Apart from all that, he likes literature and hates ugly code.</bio>
          <homepage_url>http://www.cwi.nl/~storm/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/tijsvanderstorm/292525ce-bb43-4bcf-9ec0-4ba85faca75b/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Felienne</first_name>
          <last_name>Hermans</last_name>
          <affiliation>Delft University of Technology</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.felienne.com</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/feliennehermans/5654c978-d230-4269-8b1c-2a58871d2f88/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>LIVE</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>44634f86-1eb1-4d42-83a8-06e01d497c0a</slot_id>
      <title>Live Lightning Talks</title>
      <room>Foscolo</room>
      <date>2016/07/17</date>
      <start_time>14:50</start_time>
      <end_time>15:20</end_time>
      <description>5 minute lightning talks will be arranged the day of the workshop using Slack. Interested attendees can submit one sentence proposals, which will be voted on if more than 6 talks are submitted. The talk will consist of one slide.</description>
      <persons>
        <person>
          <role>Chair</role>
          <sort_key>1</sort_key>
          <first_name>Jonathan</first_name>
          <last_name>Edwards</last_name>
          <affiliation>CDG Labs</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://alarmingdevelopment.org/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jonathanedwards/fd5775b6-98f3-483f-b326-4e72542b6fca/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>LIVE</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>7e649c1d-9943-4541-b8db-b2b14e8f4055</slot_id>
      <title>Live Programming by Example: Using Direct Manipulation for Live Program Synthesis</title>
      <room>Foscolo</room>
      <date>2016/07/17</date>
      <start_time>13:50</start_time>
      <end_time>14:10</end_time>
      <description>To provide a better programming experience, live programming environments allow changes to the code of running programs. These changes are usually made by editing the source code. In this paper, we introduce live programming by example which enables updates to the code by direct manipulation of the program’s user interface. Besides a formal definition of live programming by example, we also present a concrete prototype implementation for JavaScript that enables the programmer to change string literals in the source code by direct manipulation of the HTML output based on a dynamic string origin analysis. While this prototype only supports light-weight synthesis, future live program synthesis algorithms could support a wider range of program edits.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Christopher</first_name>
          <last_name>Schuster</last_name>
          <affiliation>University of California, Santa Cruz</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.cs.ucsc.edu/~cschuster/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/christopherschuster/e83442d6-886e-4a67-83cd-77ac47511cca/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Cormac</first_name>
          <last_name>Flanagan</last_name>
          <affiliation>University of California, Santa Cruz</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://users.soe.ucsc.edu/~cormac/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/cormacflanagan/fd454a8e-4230-4fa5-a4da-1d16a1027de3/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>LIVE</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>d4da5cb7-9ab4-41c2-b952-6d952448b98c</slot_id>
      <title>Liveness for Verification</title>
      <room>Foscolo</room>
      <date>2016/07/17</date>
      <start_time>14:30</start_time>
      <end_time>14:50</end_time>
      <description>We explore the use of liveness for interactive program verification for a simple concurrent object language. Our experimental IDE integrates two (formally dual) kinds of continuous testing into the development environment: compatibility-checking, which verifies an object’s use of other objects, and compliance-checking, which verifies an object’s claim to refine the behaviour of another object. Source code errors highlighted by the IDE are not static type errors but the reflection back to the source of runtime errors that occur in some execution of the system. We demonstrate our approach, and discuss opportunities and challenges.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Roly</first_name>
          <last_name>Perera</last_name>
          <affiliation>University of {Glasgow, Edinburgh}</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://dynamicaspects.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/rolyperera/67dad7a3-d23d-4113-bb8a-de5ff33ef76f/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Simon J.</first_name>
          <last_name>Gay</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>LIVE</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>99dfa4ae-917e-4d6b-a3e9-ca03936a5f4d</subevent_id>
    <title>GRACE: Opening session</title>
    <subevent_type type="regular"/>
    <room>Saba</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/GRACE-2016</url>
    <url_link_display>GRACE</url_link_display>
    <tracks>
      <track>GRACE</track>
    </tracks>
    <timeslot>
      <slot_id>2c9b0cdb-bfa2-4b49-a8b3-1d55b95bafa4</slot_id>
      <title>Overview of the Grace project and language</title>
      <room>Saba</room>
      <date>2016/07/19</date>
      <start_time>08:45</start_time>
      <end_time>09:45</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Kim</first_name>
          <last_name>Bruce</last_name>
          <affiliation>Pomona College</affiliation>
          <bio>Kim B. Bruce has been Reuben C. and Eleanor Winslow Professor of Computer Science at Pomona College since the summer of 2005. He is the Frederick Latimer Wells Professor of Computer Science emeritus at Williams College, where he taught for 28 years. His first position out of graduate school was as an instructor in Mathematics at Princeton University from 1975 to 1977. His research program was originally in the model theory of languages with generalized quantifiers, but his interests turned to programming languages after his stay at M.I.T. His research focus evolved from models of the polymorphic lambda calculus to the study of semantics and type theory. This led to his continuing work in the design of object-oriented languages. His most recent research project involves the design of a new language, Grace, designed for use in the first two years of Computer Science education.</bio>
          <homepage_url>http://www.cs.pomona.edu/~kim/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/kimbruce/75d65698-aaf4-4173-88cc-4a4ddbaefe1f/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Andrew</first_name>
          <last_name>Black</last_name>
          <affiliation>Portland State University</affiliation>
          <bio>My research interests are in the area of programming languages, operating systems, object-oriented systems and distributed computing, and more specifically in the region where they overlap (such as language design for distributed Object-oriented computing.) My favorite system for trying out ideas is Squeak Smalltalk. I have written a few Squeak goodies that I believe are generally useful. I have been actively working on Traits with the folks from SCG in Bern; see Nathanael Sch&amp;auml;rli’s Traits page for details. I’m a co-author of two books on Smalltalk programming, Squeak by Example, and Pharo By Example.</bio>
          <homepage_url>http://www.cs.pdx.edu/~black</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/andrewblack/7a64dfdd-f952-418a-b3de-3351f76e441a/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>GRACE</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>56e90ac2-0a28-4e9a-813d-fe4156ff510a</subevent_id>
    <title>Doctoral Symposium: Session 2</title>
    <subevent_type type="regular"/>
    <room>Belli</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-doctoral-symposium</url>
    <url_link_display>Doctoral Symposium</url_link_display>
    <tracks>
      <track>Doctoral Symposium</track>
    </tracks>
    <timeslot>
      <slot_id>0b8a47b4-2ba5-4f9b-9444-39b1b26c307b</slot_id>
      <title>Exploring optional security typing</title>
      <room>Belli</room>
      <date>2016/07/17</date>
      <start_time>14:50</start_time>
      <end_time>15:20</end_time>
      <description>Security-typed languages provide effective ways to statically enforce security policies, such as confidentiality. Downsides that make a security typing discipline hard to adopt are the annotation overhead and the rigidity of the typing discipline itself. Those problems can be approached using both optional typing and gradual typing. Prior work have focused on the gradual security typing approach. In this work we start to explore the design space of optional security typing since there are different interpretations of what optional security typing means. We describe two interpretations that produce type systems with different levels of strictness regarding the security analysis. This suggests that programmers may benefit from being given the possibility to choose depending on the desired flexibility.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Raimil</first_name>
          <last_name>Cruz</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>Doctoral Symposium</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>0fdfb3e5-2b66-421c-a0eb-7ac0013adffc</slot_id>
      <title>Concept Parameters as a New Mechanism of Generic Programming for C# Language</title>
      <room>Belli</room>
      <date>2016/07/17</date>
      <start_time>14:20</start_time>
      <end_time>14:50</end_time>
      <description>As was shown in earlier studies, mainstream object-oriented (OO) languages C# and Java provide weaker support for generic programming (GP) as compared with functional languages such as Haskell or SML. Having explored the instruments for GP in modern OO languages Scala, Ceylon, Kotlin, Rust, and Swift, we have found out that all of them, as well as C# and Java, stick to the same approach to constraining type parameters, which we called the “Constraints-are-Types” approach. It turns out that the approach has several inevitable limitations, and because of that Haskell type classes still provide better support for GP than modern object-oriented languages do. This research is aimed to discover a mechanism that would allow to radically improve the support for generic programming in OO languages. We identify the requirements that such mechanism should satisfy, present a design of the appropriate mechanism (concept parameters), and propose a sketch of its implementation for the C# language.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Julia</first_name>
          <last_name>Belyakova</last_name>
          <affiliation>Southern Federal University</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://staff.mmcs.sfedu.ru/~juliet/index.en.html</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/juliabelyakova/b35236df-c22a-44f1-8048-aecfeba8ac2e/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Doctoral Symposium</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>f579879d-5916-4873-a056-65e0fa12531c</slot_id>
      <title>Invited Talk: How to get your Ph.D. DONE</title>
      <room>Belli</room>
      <date>2016/07/17</date>
      <start_time>13:50</start_time>
      <end_time>14:20</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Eric</first_name>
          <last_name>Jul</last_name>
          <affiliation>Alcatel-Lucent Bell Labs</affiliation>
          <bio>From 1982 Ph.D. student at the University of Washington–defended Ph.D.: “Object Mobility in a Distributed Object-Oriented System” December 1988, Seattle, Washington, USA.. Moved back to Roskilde 1987. Assistant Professor Dept. of Computer Science, University of Copenhagen, 1987, Associate Professor from 1989, Department Chair 1989-92. Full professor since 2000.</bio>
          <homepage_url>http://ericjul.dk</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/ericjul/3752976d-2b68-4641-b45a-a6fca64e4bb7/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Doctoral Symposium</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>0a27ff0d-99a9-4ff3-843e-b97f0ae50e6b</subevent_id>
    <title>GRACE: Discussion</title>
    <subevent_type type="regular"/>
    <room>Saba</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/GRACE-2016</url>
    <url_link_display>GRACE</url_link_display>
    <tracks>
      <track>GRACE</track>
    </tracks>
    <timeslot>
      <slot_id>084bb973-7a14-4587-b5a5-4fbffbefda62</slot_id>
      <title>Next steps with Grace</title>
      <room>Saba</room>
      <date>2016/07/19</date>
      <start_time>16:00</start_time>
      <end_time>17:30</end_time>
      <description>undefined</description>
      <tracks>
        <track>GRACE</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>af2b035a-5727-4394-9e60-be45128a4105</subevent_id>
    <title>PMLDC: Invited talk</title>
    <subevent_type type="regular"/>
    <room>Montale</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/PMLDC-2016</url>
    <url_link_display>Programming Models and Languages for Distributed Computing</url_link_display>
    <tracks>
      <track>Programming Models and Languages for Distributed Computing</track>
    </tracks>
    <timeslot>
      <slot_id>5c684195-6b98-4289-a01b-5763cbb69b43</slot_id>
      <title> We Are All Distributed System Engineers</title>
      <room>Montale</room>
      <date>2016/07/17</date>
      <start_time>09:00</start_time>
      <end_time>09:45</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Carl</first_name>
          <last_name>Lerche</last_name>
          <affiliation>Independent Consultant</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/carllerche/b18e41db-f26c-46a5-b87c-fc47e3f42cd8/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Programming Models and Languages for Distributed Computing</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>d1abe638-036e-4087-9077-dcb33e36322d</slot_id>
      <title>Opening Remarks</title>
      <room>Montale</room>
      <date>2016/07/17</date>
      <start_time>08:45</start_time>
      <end_time>09:00</end_time>
      <description>undefined</description>
      <tracks>
        <track>Programming Models and Languages for Distributed Computing</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>79d26410-1f26-477f-92a7-e88e929f8e5b</subevent_id>
    <title>Doctoral Symposium: Session 3</title>
    <subevent_type type="regular"/>
    <room>Belli</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-doctoral-symposium</url>
    <url_link_display>Doctoral Symposium</url_link_display>
    <tracks>
      <track>Doctoral Symposium</track>
    </tracks>
    <timeslot>
      <slot_id>334a618f-9e07-4914-988a-e8e47e2385b6</slot_id>
      <title>Invited Talk: PhD Reflections</title>
      <room>Belli</room>
      <date>2016/07/17</date>
      <start_time>17:00</start_time>
      <end_time>17:30</end_time>
      <description>What has worked for me during my PhD? What did not work? And how to tell the difference? I will reflect on my experiences and discuss strategies that I found useful.</description>
      <persons>
        <person>
          <role>invited speaker</role>
          <sort_key>1</sort_key>
          <first_name>Sebastian</first_name>
          <last_name>Erdweg</last_name>
          <affiliation>TU Delft</affiliation>
          <bio>http://twitter.com/seba0_  http://erdweg.org</bio>
          <homepage_url>http://erdweg.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/sebastianerdweg/ad62cbaa-3b48-428b-88dc-a31f5c6f657b/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Doctoral Symposium</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>3809618e-3841-4ca4-ac1a-cdd4b4b83611</slot_id>
      <title>Invited Talk: Papers vs. Artefacts</title>
      <room>Belli</room>
      <date>2016/07/17</date>
      <start_time>16:30</start_time>
      <end_time>17:00</end_time>
      <description>Artifacts developed alongside research presented in papers serve several important roles. They enable reproducing research results by independent researchers; they enable practically evaluating ideas and theories; they enable experimentation with variations and extensions (not only by the original authors); and so forth.
However, developing high-quality artifacts requires a lot of effort that is not always justified. Importantly, as it stands, artifacts have no influence on acceptance of a research paper at the top conferences in programming languages and software engineering. Moreover, the main requirement for completing a PhD is producing publishable research results. As a result, one of the most difficult questions for many doctoral students is: “how much time should be spent on developing artifacts?”
In this talk I share my experience contributing to the Scala programming language, tools, and libraries during my own graduate studies. Among the artifacts that I discuss: a library that was picked up by Twitter and secured a book deal; and a compiler plugin that (to my knowledge) only one other person in the world tried to use–and gave up. “How can artifacts support research and publication? How can artifacts support the discovery of important research problems? How can artifacts contribute to a successful career?” My talk attempts to shed light on these and related questions.</description>
      <persons>
        <person>
          <role>invited speaker</role>
          <sort_key>1</sort_key>
          <first_name>Philipp</first_name>
          <last_name>Haller</last_name>
          <affiliation>KTH Royal Institute of Technology</affiliation>
          <bio>My areas of research are programming languages, type systems, and concurrent/distributed programming.
Previously, I was a researcher, software engineer, and consultant at Typesafe. Prior to Typesafe, I was a post-doctoral fellow in the Pervasive Parallelism Lab at Stanford University and in the Programming Methods Lab (LAMP) at EPFL, Switzerland. Prior to that I was a PhD student of Martin Odersky. My main research interests are in the design and implementation of programming languages and managed runtime environments to support concurrent and parallel software. I received a PhD in Computer Science from EPFL in Lausanne, Switzerland, in 2010.
I am a top-10 contributor of the Scala project. Recently, I have been working on Scala 2.10 futures (SIP-14) as well as Scala’s upcoming Async feature (SIP-22) for asynchronous and concurrent programming.</bio>
          <homepage_url>http://www.csc.kth.se/~phaller/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/philipphaller/d849ca98-9227-4990-bdce-051715793721/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Doctoral Symposium</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>420a421e-5936-452e-a5ce-cb6a5802fbe1</slot_id>
      <title>Sulong: Memory Safe and Efficient Execution of LLVM-Based Languages</title>
      <room>Belli</room>
      <date>2016/07/17</date>
      <start_time>16:00</start_time>
      <end_time>16:30</end_time>
      <description>Memory errors in C/C++ can allow an attacker to read sensitive data, corrupt the memory, or crash the executing process. The renowned top 25 of most dangerous software errors as published by the SANS Institute, as well as recent security disasters such as Heartbleed show how important it is to tackle memory safety for C/C++. We present Sulong, an efficient interpreter for LLVM-based languages that runs on the JVM. Sulong guarantees memory safety for C/C++ and other LLVM-based languages by using managed allocations and automatic memory management. Through dynamic compilation, Sulong will achieve peak performance close to state of the art compilers such as GCC or Clang, which do not produce memory-safe code. By efficiently implementing memory safety, Sulong strives to be a real-world solution for mitigating software security problems.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Manuel</first_name>
          <last_name>Rigger</last_name>
          <affiliation>Johannes Kepler University, Linz, Austria</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://ssw.jku.at/General/Staff/ManuelRigger/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/manuelrigger/47e268e9-158c-471f-a7e9-442216c54550/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Doctoral Symposium</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>24f5c3db-d1d9-42e5-b141-4a492b008715</subevent_id>
    <title>PX: Session 1</title>
    <subevent_type type="regular"/>
    <room>Belli</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/PX-2016</url>
    <url_link_display>PX</url_link_display>
    <tracks>
      <track>PX</track>
    </tracks>
    <timeslot>
      <title></title>
      <room></room>
      <start_time>08:45</start_time>
      <end_time>09:45</end_time>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>321a62be-f987-4e6e-9d00-ce7b9f1ed895</subevent_id>
    <title>LIVE: Session 2</title>
    <subevent_type type="regular"/>
    <room>Foscolo</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/LIVE-2016</url>
    <url_link_display>LIVE</url_link_display>
    <tracks>
      <track>LIVE</track>
    </tracks>
    <timeslot>
      <slot_id>4dd09a1a-df07-485a-b255-84758438deb7</slot_id>
      <title>Live end-user programming: a demo/manifesto</title>
      <room>Foscolo</room>
      <date>2016/07/17</date>
      <start_time>11:15</start_time>
      <end_time>11:35</end_time>
      <description>How will live programming get from our current aspirational demos to use in the real world? Modern professional programming will not change easily: our technology stack is a vast edifice built up over decades to optimize performance and compatibility, not ease of use. It is unlikely we can retrofit live programming into this edifice without substantial redesign and reengineering, which would face immense technical, economic, and cultural challenges. The one way forward we see is to retrace the steps of the original live programming environment: spreadsheets. Spreadsheets help non-programmers solve small-scale problems. If we do likewise, we can offer a fully live and radically simplified programming experience that is actually useful in practice, albeit to non-programmers. Perhaps that could be a launching pad to subsequently address professional programming. As a case in point we demonstrate the Chorus project (previously named Transcript), which focuses on do-it-yourself mobile social apps. By restricting ourselves to small problems and non-professional programmers we can provide a highly integrated programming experience that for the first time incorporates live database programming. We demonstrate our initial progress in order to spark a discussion in the live-programming community about the tradeoffs of researching professional vs. end-user programming.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Jonathan</first_name>
          <last_name>Edwards</last_name>
          <affiliation>CDG Labs</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://alarmingdevelopment.org/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jonathanedwards/fd5775b6-98f3-483f-b326-4e72542b6fca/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Jodie</first_name>
          <last_name>Chen</last_name>
          <affiliation>MIT</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Alessandro</first_name>
          <last_name>Warth</last_name>
          <affiliation>HARC / Y Combinator Research</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://tinlizzie.org/~awarth/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/alessandrowarth/d766fa32-aa3d-4bb3-b3ba-c58039407f3f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>LIVE</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>661cc5bc-f572-4bc2-a031-28187195010b</slot_id>
      <title>Language Hacking in a Live Programming Environment</title>
      <room>Foscolo</room>
      <date>2016/07/17</date>
      <start_time>10:05</start_time>
      <end_time>10:25</end_time>
      <description>We are interested in improving the experience of prototyping and implementing programming languages. In this paper, we outline some ways in which principles from live programming could make the life of the “language hacker” easier, and introduce novel visualizations that manifest the normally opaque semantics of parsing and semantic actions. We demonstrate the application of these ideas in the Ohm Editor, a tool we are building to support our new language implementation framework, but we believe they are equally applicable to other language-hacking tools.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Patrick</first_name>
          <last_name>Dubroy</last_name>
          <affiliation>HARC / Y Combinator Research</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/patrickdubroy/809e3776-4917-4397-a6c5-b85d7a3e7839/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Saketh</first_name>
          <last_name>Kasibatla</last_name>
          <affiliation>Communications Design Group / UCLA</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Meixian</first_name>
          <last_name>Li</last_name>
          <affiliation>Communications Design Group / Y Combinator Research</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Marko</first_name>
          <last_name>Röder</last_name>
          <affiliation>HARC / Y Combinator Research</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>5</sort_key>
          <first_name>Alessandro</first_name>
          <last_name>Warth</last_name>
          <affiliation>HARC / Y Combinator Research</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://tinlizzie.org/~awarth/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/alessandrowarth/d766fa32-aa3d-4bb3-b3ba-c58039407f3f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>LIVE</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>9ee9084a-37df-46fc-a6f0-b10a0846636e</slot_id>
      <title>Live Programming with Code Portals</title>
      <room>Foscolo</room>
      <date>2016/07/17</date>
      <start_time>10:45</start_time>
      <end_time>11:05</end_time>
      <description>Programming is often a cycle between programming activities and understanding the results of those activities. Hence, modern development environments support many different tools to increase the speed of development, e.g., for refactoring or to visualize variable values or type information in a running program. However, current development environments provide these different tools in various ways, from wizards for refactorings with special preview pages to tooltips and watch views for showing specific information. In this paper, we present code portals as a generic technical concept to enable showing live and continuously updated information about the program and its state. We illustrate code portals on three different types of programming languages, procedural, functional and homoiconic. A qualitative user study shows that code portals and their applications are seen helpful by users. A video demonstration can be found at: https://goo.gl/PumhQR</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Alexander</first_name>
          <last_name>Breckel</last_name>
          <affiliation>Institute of Software Engineering and Compiler Construction</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Matthias</first_name>
          <last_name>Tichy</last_name>
          <affiliation>Chalmers University of Technology</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.cse.chalmers.se/~tichy/</homepage_url>
        </person>
      </persons>
      <tracks>
        <track>LIVE</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>a32bb726-edeb-41ff-adaa-4f3a238fbca0</slot_id>
      <title>Towards Live Language Development</title>
      <room>Foscolo</room>
      <date>2016/07/17</date>
      <start_time>10:25</start_time>
      <end_time>10:45</end_time>
      <description>We would like to see live programming applied to language development, to get live language development. With live language development, a language developer gets fast feedback when they change their language, enabling experimentation with language design and development.
In this paper, we describe what live language development is and why it is useful, and we analyze what is needed to achieve live language development. Moreover, we describe our work in progress in supporting live language development in the Spoofax language workbench.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Gabriël</first_name>
          <last_name>Konat</last_name>
          <affiliation>TU Delft</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Sebastian</first_name>
          <last_name>Erdweg</last_name>
          <affiliation>TU Delft</affiliation>
          <bio>http://twitter.com/seba0_  http://erdweg.org</bio>
          <homepage_url>http://erdweg.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/sebastianerdweg/ad62cbaa-3b48-428b-88dc-a31f5c6f657b/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Eelco</first_name>
          <last_name>Visser</last_name>
          <affiliation>Delft University of Technology</affiliation>
          <bio>Eelco Visser is Antoni van Leeuwenhoek Professor of Computer Science at Delft University of Technology. He received a master’s and doctorate in computer science from the University of Amsterdam in 1993 and 1997, respectively. Previously he served as postdoc at the Oregon Graduate Institute, as Assistant Professor at Utrecht University, and as Associate Professor at TU Delft.
His research interests include programming languages, software language engineering, domain-specific programming languages, program transformation, software security, and interaction design. With his students he has designed and implemented the Spoofax language workbench, as well as many domain-specific languages, including DSLs for syntax definition (SDF), program transformation (Stratego), software deployment (Nix), web application development (WebDSL), and mobile phone applications (mobl). He is the lead developer of the researchr bibliography management system and the WebLab learning management system.</bio>
          <homepage_url>http://eelcovisser.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/eelcovisser/9f5c00bc-90ba-4aba-b5bf-9fc9085cbe1f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>LIVE</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>c6b9df25-3398-40de-b1c6-a301afce3262</slot_id>
      <title>Discuss: New Interfaces for Programming</title>
      <room>Foscolo</room>
      <date>2016/07/17</date>
      <start_time>11:35</start_time>
      <end_time>12:25</end_time>
      <description>Liveness provides continuous feedback on the relationship between program and output, with the potential to fundamentally change the way we interact with programs. What are some of the UI implications? Here are some questions we might like to think about: 
 
 When does it makes sense to manipulate the output and have changes be reflected back to the program? 
 How useful is liveness for discrete (non-continuous) domains? Are there any prospects for “datatype-generic” visualisation? 
 Immediate feedback may be undesirable for performance reasons, ergonomic reasons, or both. Are there mechanisms (e.g. granularity control) that speak to this concern? 
 Liveness makes the language implementation an inseparable part of the “experience”. Do we risk being overly dependent on a particular UI? 
 Can liveness scale to large programs and datasets? 
 Visualising intermediate values can be as important as visualising output. Such values require an execution context to understand. What can be/has been done here? 
 Are there formal principles that might inform UI design, or is it all fundamentally subjective? 

This discussion can draw on both examples from the workshop, and prior work in the field.</description>
      <persons>
        <person>
          <role>Chair</role>
          <sort_key>1</sort_key>
          <first_name>Roly</first_name>
          <last_name>Perera</last_name>
          <affiliation>University of {Glasgow, Edinburgh}</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://dynamicaspects.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/rolyperera/67dad7a3-d23d-4113-bb8a-de5ff33ef76f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>LIVE</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>3903b8b2-a753-4c28-9d76-f4b9d7fe507a</subevent_id>
    <title>GRACE: Contributed Papers</title>
    <subevent_type type="regular"/>
    <room>Saba</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/GRACE-2016</url>
    <url_link_display>GRACE</url_link_display>
    <tracks>
      <track>GRACE</track>
    </tracks>
    <timeslot>
      <slot_id>26ee3467-e6b8-41c3-be60-0cfa94dc5af5</slot_id>
      <title>Tooling matters – Why Grace needs a good IDE </title>
      <room>Saba</room>
      <date>2016/07/19</date>
      <start_time>14:50</start_time>
      <end_time>15:20</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Michael</first_name>
          <last_name>Kölling</last_name>
          <affiliation>University of Kent</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://www.cs.kent.ac.uk/people/staff/mik/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/michaelkolling/d623106c-4e82-4082-9a19-e3553ee07672/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>GRACE</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>46f74348-3915-469d-b8df-7f40e80b4bbd</slot_id>
      <title>Grace in Spoofax: Readable Specification and Implementation in One</title>
      <room>Saba</room>
      <date>2016/07/19</date>
      <start_time>13:50</start_time>
      <end_time>14:20</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Michiel</first_name>
          <last_name>Haisma</last_name>
          <affiliation>TU Delft</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/michielhaisma/78ea9329-26f9-4da4-ad79-7e50a6381aa2/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Vlad</first_name>
          <last_name>Vergu</last_name>
          <affiliation>TU Delft</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Eelco</first_name>
          <last_name>Visser</last_name>
          <affiliation>Delft University of Technology</affiliation>
          <bio>Eelco Visser is Antoni van Leeuwenhoek Professor of Computer Science at Delft University of Technology. He received a master’s and doctorate in computer science from the University of Amsterdam in 1993 and 1997, respectively. Previously he served as postdoc at the Oregon Graduate Institute, as Assistant Professor at Utrecht University, and as Associate Professor at TU Delft.
His research interests include programming languages, software language engineering, domain-specific programming languages, program transformation, software security, and interaction design. With his students he has designed and implemented the Spoofax language workbench, as well as many domain-specific languages, including DSLs for syntax definition (SDF), program transformation (Stratego), software deployment (Nix), web application development (WebDSL), and mobile phone applications (mobl). He is the lead developer of the researchr bibliography management system and the WebLab learning management system.</bio>
          <homepage_url>http://eelcovisser.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/eelcovisser/9f5c00bc-90ba-4aba-b5bf-9fc9085cbe1f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>GRACE</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>4c5fb9cd-54e9-4acc-adb7-0ab57e20185a</slot_id>
      <title>Traitorous Traits</title>
      <room>Saba</room>
      <date>2016/07/19</date>
      <start_time>14:20</start_time>
      <end_time>14:50</end_time>
      <description>Grace traits are intended to be stateless, immutable, free of fields, and without side effects when used, so that it does not matter how many times a trait is repeatedly included into an object, in what order, or by what chain of parents. We show constructions of traits recovering each of these excluded properties.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Michael</first_name>
          <last_name>Homer</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://ecs.vuw.ac.nz/~mwh</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/michaelhomer/d0f1e3dc-74d6-4562-b07c-8e27e5cae71b/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Timothy</first_name>
          <last_name>Jones</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>Programming languages PhD student at VUW working on Grace.</bio>
          <homepage_url>http://homepages.ecs.vuw.ac.nz/~tim</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/timothyjones/2f3ecea2-e161-41ad-842c-d2457b2eebaa/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>GRACE</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>369cb10b-f240-439c-99b1-07a0182bee7b</subevent_id>
    <title>FTfJP: Session 3</title>
    <subevent_type type="regular"/>
    <room>Belli</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/FTfJP-2016</url>
    <url_link_display>FTfJP</url_link_display>
    <tracks>
      <track>FTfJP</track>
    </tracks>
    <timeslot>
      <slot_id>30f87b5c-6f7a-4e5c-beab-8eaa7857e2a0</slot_id>
      <title>Towards a Model of Corecursion with Default</title>
      <room>Belli</room>
      <date>2016/07/19</date>
      <start_time>14:50</start_time>
      <end_time>15:20</end_time>
      <description>We face the problem of providing a denotational semantics for corecursive methods with default, a programming feature for manipulating cyclic structures without ad-hoc machinery. To this aim, we study new lattices for which the theorem of Kleene is applicable so that the semantics of a corecursive method with default corresponds to the greatest fixed point computed as the greatest lower bound of a descending chain. The proposed definition allows us to prove correctness of some kinds of corecursive methods. This solution is only partly satisfactory, and a different and more general approach is currently under development.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Davide</first_name>
          <last_name>Ancona</last_name>
          <affiliation>University of Genova</affiliation>
          <bio>Davide Ancona (PhD in Computer Science, University of Pisa, 1998) is Associate Professor at the University of Genova. His main research interests include type systems, object-oriented programming, coinduction methods for programming languages, modules and components, software reuse and maintenance, multi-agent systems, and behavioral types. He is author of more than 70 publications. He is the secretary of the executive board of AITO, Association Internationale pour les Technologies Objets (since Jan 2013, previously Vice-President since Jan 2012), and member of the editorial board of the Central European Journal of Computer Science and of the ACM/SIGAPP Applied Computing Review (ACR). He has been guest editor of special issues of Science of Computer Programming and Journal of Object Technology. In 2009 he received, together with G. Lagorio, the best paper prize at ECOOP. He has participated to several national and European projects and has been PC member of several workshops and conferences: WOOD’04, Bytecode 2008, ESOP 2008, DLS 2009, 2010 and 2013, FOOL 2010, RP 2011 and 2012, ECOOP 2013 and 2014, POPL 2015 (External Reviewing Committee). He has been involved in the organization of several scientific events: organizing chair of ECOOP 2009, program co-chair of FTfJP06 and of OOPS special track at SAC from 2004 through 2015, co-chair of CILC 2015.</bio>
          <homepage_url>http://www.disi.unige.it/person/AnconaD/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/davideancona/b3d19c77-a788-469b-ab47-7c6f3134f87d/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Francesco</first_name>
          <last_name>Dagnino</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Elena</first_name>
          <last_name>Zucca</last_name>
          <affiliation>University of Genova</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.disi.unige.it/person/ZuccaE/</homepage_url>
        </person>
      </persons>
      <tracks>
        <track>FTfJP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>38fe95f4-8a0e-4d6e-a59e-bd4db81937b8</slot_id>
      <title>An Extended Buffered Memory Model With Full Reorderings</title>
      <room>Belli</room>
      <date>2016/07/19</date>
      <start_time>14:20</start_time>
      <end_time>14:50</end_time>
      <description>Modern multicore processor architectures and compilers of shared-memory concurrent programming languages provide only weak memory consistency guarantees. A memory model specifies which write action can be seen by a read action between concurrent threads. The most well known memory model is the sequentially consistent (SC) model but, to improve performance, modern architectures and languages employ relaxed memory models where a read may not see the most recent write that has been performed by other threads. These models come in different formalization styles (axiomatic, operational) and have their own advantages and disadvantages.
In a POPL’13 paper, Demange et al [12], proposed an alternative style that is fully characterized in terms of the reorderings it allows. This Buffered Memory Model (BMM) targets the Java programming language. It is strictly less relaxed than the Java Memory Model. It is shown equivalent to an operational model but is restricted to TSO relaxations.
This paper extends the BMM in order to allows more reorderings. We present the new set of memory event reorderings rules that fully characterize the model and an alternative operational model that is again shown equivalent.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Gurvan</first_name>
          <last_name>Cabon</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>David</first_name>
          <last_name>Cachera</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>David</first_name>
          <last_name>Pichardie</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>FTfJP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>43f9342c-9b2e-49ce-ab4c-7fcf438d84c1</slot_id>
      <title>Generating Concurrency Checks Automatically</title>
      <room>Belli</room>
      <date>2016/07/19</date>
      <start_time>13:50</start_time>
      <end_time>14:20</end_time>
      <description>This article introduces ATAB, a tool that automatically generates pairwise reachability checks for action trees. Ac- tion trees can be used to study the behaviour of real-world concurrent programs. ATAB encodes pairwise reachability checks into alternating tree automata (ATA) that determine whether an action tree has a schedule where any pair of given points in the program are simultaneously reachable. Because the pairwise reachability problem is undecidable in general ATAB operates under a restricted form of lock-based concurrency. ATAB produces ATA that are more compact and more efficiently checkable than those that have been previously used. The process is entirely automated, which simplifies the process of encoding checks for more complex action trees. The ATA produced are easier to scale to large numbers of locks than previous constructions.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Jonathan</first_name>
          <last_name>Hoyland</last_name>
          <affiliation>Royal Holloway University of London</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Matthew</first_name>
          <last_name>Hague</last_name>
          <affiliation>Royal Holloway University of London</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>FTfJP</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>1f1f23c5-24aa-470e-adec-4c35eb8fd326</subevent_id>
    <title>FTfJP: Session 2</title>
    <subevent_type type="regular"/>
    <room>Belli</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/FTfJP-2016</url>
    <url_link_display>FTfJP</url_link_display>
    <tracks>
      <track>FTfJP</track>
    </tracks>
    <timeslot>
      <slot_id>4e591e6a-6847-4874-826f-b023a1c7e624</slot_id>
      <title>A Mechanical Soundness Proof for Subtyping Over Recursive Types</title>
      <room>Belli</room>
      <date>2016/07/19</date>
      <start_time>11:00</start_time>
      <end_time>11:30</end_time>
      <description>Structural type systems provide an interesting alternative to the more common nominal typing scheme. Several existing languages employ structural types in some form, including Modula-3, Scala and various extensions proposed for Java. However, formalising a recursive structural type system is challenging. In particular, the need to use structural coinduction remains a hindrance for many. We formalise in Agda a simple recursive and structural type system with products and unions. Agda proves useful here because it has explicit support for coinduction and will raise an error if this is misused. The implementation distinguishes between inductively and coinductively defined types: the former corresponds to a finite representation, such as found in source code or the internals of a compiler, while the latter corresponds to a mathematical ideal with which we can coinductively define relations and proofs that are easily applied back to the inductive interpretation. As an application of this, we provide a mechanised proof of subtyping soundness against a semantic embedding of the types into Agda.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Timothy</first_name>
          <last_name>Jones</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>Programming languages PhD student at VUW working on Grace.</bio>
          <homepage_url>http://homepages.ecs.vuw.ac.nz/~tim</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/timothyjones/2f3ecea2-e161-41ad-842c-d2457b2eebaa/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>David</first_name>
          <last_name>Pearce</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://homepages.ecs.vuw.ac.nz/~djp/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/davidpearce/fda6716e-da67-4ab2-aa41-3d189aad83fd/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>FTfJP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>633f9d6a-b1b6-4e25-8644-7a9effab59a1</slot_id>
      <title>A formal account of SSA in Java-like languages</title>
      <room>Belli</room>
      <date>2016/07/19</date>
      <start_time>11:30</start_time>
      <end_time>12:00</end_time>
      <description>Static Single Assignment (SSA) intermediate representation is widely used to optimize and compile code in imperative and object-oriented languages, but it can also be useful for static type analysis. We introduce FJSSA , a Java-like imperative calculus supporting programs in SSA form; we define its big-step operational semantics, and a judgment to statically check whether a program is in SSA form, and prove its soundness. FJSSA provides a formal basis for type analysis of programs in SSA form in object-oriented languages.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Davide</first_name>
          <last_name>Ancona</last_name>
          <affiliation>University of Genova</affiliation>
          <bio>Davide Ancona (PhD in Computer Science, University of Pisa, 1998) is Associate Professor at the University of Genova. His main research interests include type systems, object-oriented programming, coinduction methods for programming languages, modules and components, software reuse and maintenance, multi-agent systems, and behavioral types. He is author of more than 70 publications. He is the secretary of the executive board of AITO, Association Internationale pour les Technologies Objets (since Jan 2013, previously Vice-President since Jan 2012), and member of the editorial board of the Central European Journal of Computer Science and of the ACM/SIGAPP Applied Computing Review (ACR). He has been guest editor of special issues of Science of Computer Programming and Journal of Object Technology. In 2009 he received, together with G. Lagorio, the best paper prize at ECOOP. He has participated to several national and European projects and has been PC member of several workshops and conferences: WOOD’04, Bytecode 2008, ESOP 2008, DLS 2009, 2010 and 2013, FOOL 2010, RP 2011 and 2012, ECOOP 2013 and 2014, POPL 2015 (External Reviewing Committee). He has been involved in the organization of several scientific events: organizing chair of ECOOP 2009, program co-chair of FTfJP06 and of OOPS special track at SAC from 2004 through 2015, co-chair of CILC 2015.</bio>
          <homepage_url>http://www.disi.unige.it/person/AnconaD/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/davideancona/b3d19c77-a788-469b-ab47-7c6f3134f87d/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Andrea</first_name>
          <last_name>Corradi</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>FTfJP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>d033827f-06e2-41c3-ad60-7e1180aaa5b7</slot_id>
      <title>A Note on the Soundness of Difference Propagation</title>
      <room>Belli</room>
      <date>2016/07/19</date>
      <start_time>12:00</start_time>
      <end_time>12:25</end_time>
      <description>Difference propagation is an algorithm widely used in points-to and alias analysis. To the best of our knowledge, the soundness of the version of the algorithm used for the static analysis of Java programs has not yet been proven. An attempt to do this yields a surprise: when the algorithm is used to compute field sensitive points-to for Java programs, soundness cannot be guaranteed when self-loads (statements of the kind x=x.f) are present. We discuss such a scenario and suggest a modification of the algorithm that is sufficient to prove soundness.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Jens</first_name>
          <last_name>Dietrich</last_name>
          <affiliation>Massey University, New Zealand</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://sites.google.com/site/jensdietrich/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jensdietrich/ab54c290-4f44-4d77-9842-cdc18922d7b4/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Nicholas</first_name>
          <last_name>Hollingum</last_name>
          <affiliation>The University of Sydney</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Bernhard</first_name>
          <last_name>Scholz</last_name>
          <affiliation>University of Sydney, Australia</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://sydney.edu.au/engineering/people/bernhard.scholz.php</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/bernhardscholz1/2ad1b16f-f423-4db2-bfce-56e86799d860/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>FTfJP</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>6ffb85d4-01fe-4f75-b968-34e608814728</subevent_id>
    <title>LIVE: Session 1</title>
    <subevent_type type="regular"/>
    <room>Foscolo</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/LIVE-2016</url>
    <url_link_display>LIVE</url_link_display>
    <tracks>
      <track>LIVE</track>
    </tracks>
    <timeslot>
      <slot_id>ec83581e-2bba-4be9-994c-f1cdc5da0746</slot_id>
      <title>The Promise of Live Programming</title>
      <room>Foscolo</room>
      <date>2016/07/17</date>
      <start_time>08:45</start_time>
      <end_time>09:45</end_time>
      <description>Live programming aims to create a more fluid feedback loop between the programmer and programmed. Unfortunately, it is not very clear what this feedback does and how it is useful: does it just lead to better debugging, or to something revolutionary? To answer this question, we clarify the experiential design challenges that must be overcome before live programming can emerge as a serious topic.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Sean</first_name>
          <last_name>McDirmid</last_name>
          <affiliation>Microsoft Research</affiliation>
          <bio>I am a programming language researcher at Microsoft Research Asia’s Systems Research Group who focuses on design, objects, IDEs, live programming, and how we could program with touch.</bio>
          <homepage_url>http://research.microsoft.com/en-us/people/smcdirm/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/seanmcdirmid/d85dbc0e-c0e4-4c3c-abf8-e59f46fbb59f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>LIVE</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>ef80a719-75ab-466f-891f-bf701a7a9d77</subevent_id>
    <title>PMLDC: Session 2: Conflict-Free Replicated Data Types</title>
    <subevent_type type="regular"/>
    <room>Montale</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/PMLDC-2016</url>
    <url_link_display>Programming Models and Languages for Distributed Computing</url_link_display>
    <tracks>
      <track>Programming Models and Languages for Distributed Computing</track>
    </tracks>
    <timeslot>
      <slot_id>05142465-c3db-4371-9f57-62257cb01513</slot_id>
      <title>Join Decompositions for Efficient Synchronization of CRDTs after a Network Partition</title>
      <room>Montale</room>
      <date>2016/07/17</date>
      <start_time>14:20</start_time>
      <end_time>14:50</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Vitor</first_name>
          <last_name>Enes</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Carlos</first_name>
          <last_name>Baquero</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Paulo</first_name>
          <last_name>Sérgio Almeida</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Ali</first_name>
          <last_name>Shoker</last_name>
          <affiliation>HASLab/INESC TEC &amp; University of Minho</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.alishoker.com</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/alishoker/726b7d0c-cc8e-48ec-94be-d3f818ceeec4/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Programming Models and Languages for Distributed Computing</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>70ab9c57-2f98-482b-a1d1-5de3e7f9af75</slot_id>
      <title> Integration Challenges of Pure Operation-based CRDTs in Redis</title>
      <room>Montale</room>
      <date>2016/07/17</date>
      <start_time>14:50</start_time>
      <end_time>15:20</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Georges</first_name>
          <last_name>Younes</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Ali</first_name>
          <last_name>Shoker</last_name>
          <affiliation>HASLab/INESC TEC &amp; University of Minho</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.alishoker.com</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/alishoker/726b7d0c-cc8e-48ec-94be-d3f818ceeec4/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Paulo</first_name>
          <last_name>Sérgio Almeida</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Carlos</first_name>
          <last_name>Baquero</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>Programming Models and Languages for Distributed Computing</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>95c220f0-a4bc-4e42-be85-eca0b8b9eff7</slot_id>
      <title> Tracking the Elephants in the System</title>
      <room>Montale</room>
      <date>2016/07/17</date>
      <start_time>13:50</start_time>
      <end_time>14:20</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Zach</first_name>
          <last_name>Tellman</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://ideolalia.com</homepage_url>
        </person>
      </persons>
      <tracks>
        <track>Programming Models and Languages for Distributed Computing</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>ddda284f-fa72-4b86-bad1-c9b080483137</subevent_id>
    <title> STOP: Session 3</title>
    <subevent_type type="regular"/>
    <room>Alfieri</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/STOP-2016</url>
    <url_link_display>STOP</url_link_display>
    <tracks>
      <track>STOP</track>
    </tracks>
    <timeslot>
      <slot_id>d1d0aa5d-0434-4481-8368-6632b9d8d3c5</slot_id>
      <title>Gradual types for real-world objects</title>
      <room>Alfieri</room>
      <date>2016/07/17</date>
      <start_time>13:50</start_time>
      <end_time>14:40</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>invited speaker</role>
          <sort_key>1</sort_key>
          <first_name>Jan</first_name>
          <last_name>Vitek</last_name>
          <affiliation>Northeastern University</affiliation>
          <bio>Jan Vitek is a Professor of Computer Science at Northeastern University. Dr. Vitek was born in Czechoslovakia and educated in Switzerland. Over the years, he worked on topics related to programming languages, their design, use, and implementation. With Noble and Potter, he proposed the notion of flexible alias control which became know as Ownership Types. He led the Ovm project which produced the first real-time Java virtual machine to be flight tested on a ScanEagle drone (he claims no one was harmed). Outcomes of this project include the Schism real-time garbage collector and the FijiVM – a production VM for embedded systems. More recently, he worked on dynamic languages, trying to make sense of JavaScript and to design a new language called, Thorn. Nowadays, he spends his time with statisticians and data scientists. Jan believes that his 2012 election as Chair of SIGPLAN was an accident; since has been busy trying to rock the boat to ensure this does not happen again. In his spare time, Jan enjoys organizing conferences and sitting on PCs (over 25 in the last decade). He founded the MOS (mobile objects), IWACO (alias control), STOP (gradual typing), and TRANSACT (transactional memory) workshop series. He was the first program chair of VEE and chaired ESOP, ECOOP, Coordination and TOOLS. He was the general chair of PLDI (in Beijing!), ISMM and LCTES. He may still be sitting on the steering committees of ECOOP, JTRES, ICFP, OOPLSA, POPL, PLDI, LCTES, ESOP.</bio>
          <homepage_url>http://janvitek.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/janvitek/53f115e3-8db9-4b80-b49a-f5eb2a0c8696/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>STOP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>d770ec20-7b77-4e44-a740-eec2b745d8dd</slot_id>
      <title>A Systematic Performance Evaluation of Gradually Typed Functions and References</title>
      <room>Alfieri</room>
      <date>2016/07/17</date>
      <start_time>14:40</start_time>
      <end_time>15:10</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Andre</first_name>
          <last_name>Kuhlenschmidt</last_name>
          <affiliation>Indiana University</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Deyaaeldeen</first_name>
          <last_name>Almahallawi</last_name>
          <affiliation>Indiana University</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Jeremy</first_name>
          <last_name>Siek</last_name>
          <affiliation>Indiana University</affiliation>
          <bio>Jeremy Siek is an Associate Professor at Indiana University Bloomington. Jeremy’s areas of research include programming language design, type systems, mechanized theorem proving using proof assistants, and optimizing compilers. Jeremy’s Ph.D. thesis explored foundations for constrained templates, aka the “concepts” proposal for C++. Prior to that, Jeremy developed the Boost Graph Library, a C++ generic library for graph algorithms and data structures. Jeremy post-doc’d at Rice University with Walid Taha with whom he developed the idea of gradual typing: a type system that integrates both dynamic and static typing in the same programming language. Jeremy is currently working on a gradually-typed version of Pytho. In 2009 Jeremy received the NSF CAREER award to fund his project: “Bridging the Gap Between Prototyping and Production”. In 2010 and again in 2015, Jeremy was awarded a Distinguished Visiting Fellowship from the Scottish Informatics &amp;amp; Computer Science Alliance.</bio>
          <homepage_url>http://homes.soic.indiana.edu/jsiek/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jeremysiek/4ceb3667-5067-4806-9a32-2b8fd3004a1d/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>STOP</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>866dde26-9d75-402f-84f9-c2922aecd1dd</subevent_id>
    <title> STOP: Session 4</title>
    <subevent_type type="regular"/>
    <room>Alfieri</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/STOP-2016</url>
    <url_link_display>STOP</url_link_display>
    <tracks>
      <track>STOP</track>
    </tracks>
    <timeslot>
      <slot_id>4fbe4f2f-88e2-4228-a5ba-a584f2c5eb7d</slot_id>
      <title>Closing remarks</title>
      <room>Alfieri</room>
      <date>2016/07/17</date>
      <start_time>16:30</start_time>
      <end_time>16:40</end_time>
      <description>undefined</description>
      <tracks>
        <track>STOP</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>a2f5a8e7-3b7f-44b2-b851-ba58ebb76178</slot_id>
      <title>From Optional to Gradual Typing via Transient Checks</title>
      <room>Alfieri</room>
      <date>2016/07/17</date>
      <start_time>16:00</start_time>
      <end_time>16:30</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Michael</first_name>
          <last_name>Vitousek</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Jeremy</first_name>
          <last_name>Siek</last_name>
          <affiliation>Indiana University</affiliation>
          <bio>Jeremy Siek is an Associate Professor at Indiana University Bloomington. Jeremy’s areas of research include programming language design, type systems, mechanized theorem proving using proof assistants, and optimizing compilers. Jeremy’s Ph.D. thesis explored foundations for constrained templates, aka the “concepts” proposal for C++. Prior to that, Jeremy developed the Boost Graph Library, a C++ generic library for graph algorithms and data structures. Jeremy post-doc’d at Rice University with Walid Taha with whom he developed the idea of gradual typing: a type system that integrates both dynamic and static typing in the same programming language. Jeremy is currently working on a gradually-typed version of Pytho. In 2009 Jeremy received the NSF CAREER award to fund his project: “Bridging the Gap Between Prototyping and Production”. In 2010 and again in 2015, Jeremy was awarded a Distinguished Visiting Fellowship from the Scottish Informatics &amp;amp; Computer Science Alliance.</bio>
          <homepage_url>http://homes.soic.indiana.edu/jsiek/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jeremysiek/4ceb3667-5067-4806-9a32-2b8fd3004a1d/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>STOP</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>96664cfa-778e-4a46-adfd-ee6521f04789</subevent_id>
    <title>ICOOOLPS: Session 2</title>
    <subevent_type type="regular"/>
    <room>Alfieri</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/ICOOOLPS-2016</url>
    <url_link_display>ICOOOLPS</url_link_display>
    <tracks>
      <track>ICOOOLPS</track>
    </tracks>
    <timeslot>
      <slot_id>316909b7-e3fa-49de-9005-6f8449ff1e09</slot_id>
      <title>The Performance of Object Encodings in JavaScript</title>
      <room>Alfieri</room>
      <date>2016/07/18</date>
      <start_time>11:05</start_time>
      <end_time>11:35</end_time>
      <description>We investigate how to represent objects when JavaScript is used as a compilation target.This is an interesting question because JavaScript is the object language of choice for compiler writers who wish to ”the Internet“, and because JavaScript offers many ways to say the same thing. 
We looked at three axes of variability: whether an object’s methods are stored in the object itself, or in a prototype; whether the object uses Javascript’s closures or builds its own, and whether an object’s fields are accessed directly or via accessor methods.The results reveal that certain variations are more than a hundred times faster than others. We conclude that the particular choices we make may be critical.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Forrest</first_name>
          <last_name>Alexander</last_name>
          <affiliation>Portland State University</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Andrew</first_name>
          <last_name>Black</last_name>
          <affiliation>Portland State University</affiliation>
          <bio>My research interests are in the area of programming languages, operating systems, object-oriented systems and distributed computing, and more specifically in the region where they overlap (such as language design for distributed Object-oriented computing.) My favorite system for trying out ideas is Squeak Smalltalk. I have written a few Squeak goodies that I believe are generally useful. I have been actively working on Traits with the folks from SCG in Bern; see Nathanael Sch&amp;auml;rli’s Traits page for details. I’m a co-author of two books on Smalltalk programming, Squeak by Example, and Pharo By Example.</bio>
          <homepage_url>http://www.cs.pdx.edu/~black</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/andrewblack/7a64dfdd-f952-418a-b3de-3351f76e441a/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>ICOOOLPS</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>5c12fea9-7f74-4dec-bd91-4d6c43b5fe2a</slot_id>
      <title>Beneath the Bytecode: Observing the JVM at Work Using Bytecode Instrumentation</title>
      <room>Alfieri</room>
      <date>2016/07/18</date>
      <start_time>10:05</start_time>
      <end_time>11:05</end_time>
      <description>Many dynamic program analysis (DPA) tools for profiling, debugging, and monitoring programs executing on managed platforms such as the Java Virtual Machine (JVM) rely on bytecode instrumentation (sometimes combined with agents utilizing the JVM Tool Interface and native code libraries) to observe the base program behavior. While this is both the recommended and preferred technique for implementing DPA tools, it has certain noticeable drawbacks.
One, the analysis runs in the same process as the base program, and often shares the Java Class Library (JCL) and other resources with the base program. This creates potential for interference that may result in deadlocks, or state corruption in code that does not expect reentrancy. Two, certain parts of the JCL are typically off-limits for instrumentation, because they either play a vital role during the JVM bootstrap, or the JVM implementation makes certain assumptions about properties of specific classes, or both. These two issues are typically solved by reducing the scope of the instrumentation, leading to under-approximation of the program’s behavior.
And three, bytecode instrumentation only allows observig base program events at the bytecode level. The instrumentation code remains oblivious to optimizations performed by the dynamic compiler, and conversely, the compiler is completely unaware of the presence of the instrumentation code. Because the instrumentation code may significantly inflate the base program code and create additional data dependencies as a result of observing the program’s behavior, various optimizations performed by the dynamic compiler (e.g., inlining, partial escape analysis, code motion) will be perturbed by the presence of the instrumentation code. As a result, the dynamic analysis may observe events that would not have happened in the base program had it been left alone, thus over-approximating the actual behavior.
In this talk, we will discuss some of the challenges in making the JVM more observable for instrumentation-based DPA tools, with specific focus on getting accurate profiling information in presence of an optimizing dynamic compiler.</description>
      <persons>
        <person>
          <role>Presenter</role>
          <sort_key>1</sort_key>
          <first_name>Lubomír</first_name>
          <last_name>Bulej</last_name>
          <affiliation>Charles University</affiliation>
          <bio>Lubom&amp;iacute;r is an assistant professor at the Department of Distributed and Dependable Systems, Charles University, Prague, Czech Republic. His primary research interests include performance-related topics focusing on performance evaluation, testing, and monitoring. In addition to performance, his research interests include also dynamic program analysis, with specific focus on making the programs running on the Java (and Dalvik) Virtual Machines more observable. He holds an MSc. from the Czech Technical University in Prague, and a PhD from the Charles University in Prague. He is a member of the ACM.</bio>
          <homepage_url>http://d3s.mff.cuni.cz/~bulej</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/lubomirbulej/e80975d6-6d6a-43a0-a88c-3c96101ef6c7/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>ICOOOLPS</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>6c7126af-1d86-4513-a866-635d3d063bf2</slot_id>
      <title>Virtual Machine Warm-up Blows Hot and Cold</title>
      <room>Alfieri</room>
      <date>2016/07/18</date>
      <start_time>11:35</start_time>
      <end_time>12:05</end_time>
      <description>Virtual Machines (VMs) with Just-In-Time (JIT) compilers are traditionally thought to execute programs in two phases: first the \emph{warmup} phase determines which parts of a program would most benefit from dynamic compilation; after compilation has occurred the program is said to be at \emph{peak performance}. When measuring the performance of JIT compiling VMs, data collected during the warmup phase is generally discarded, placing the focus on peak performance. In this paper we run a number of small, deterministic benchmarks on a variety of well known VMs. In our experiment, less than one quarter of the benchmark/VM pairs conform to the traditional notion of warmup, and none of the VMs we tested consistently warms up in the traditional notion. This raises a number of questions about VM benchmarking, which are of interest to both VM authors and end users.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Edd</first_name>
          <last_name>Barrett</last_name>
          <affiliation>King's College London</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://eddbarrett.co.uk/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/eddbarrett/182cdf91-a04a-4978-bfc7-12499b838a3e/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Carl Friedrich</first_name>
          <last_name>Bolz</last_name>
          <affiliation>King's College London </affiliation>
          <bio>I am researcher in Computer Science with Laurence Tratt as a member of the Software Development Team at King’s College London since 2013. I live in Hamburg. Before, I was at Hasso-Plattner-Institute Potsdam with Robert Hirschfeld and Heinrich-Heine-Universit&amp;auml;t D&amp;uuml;sseldorf with Michael Leuschel.
My main research interests are techniques for the efficient implementation of dynamic programming languages. I am interested in tracing JITs, optimizations, partial evaluation, particularly at runtime. I am a member of the Python Software Foundation.</bio>
          <homepage_url>http://cfbolz.de/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/carlfriedrichbolz/ef3ea68a-4eec-4490-95a3-6386f14eaa74/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Rebecca</first_name>
          <last_name>Killick</last_name>
          <affiliation>Department of Mathematics and Statistics, University of Lancaster</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.lancs.ac.uk/~killick</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/rebeccakillick/3f025b85-9f3e-42e6-8bd6-5655103f4226/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Vincent</first_name>
          <last_name>Knight</last_name>
          <affiliation>School of Mathematics, Cardiff University</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>5</sort_key>
          <first_name>Sarah</first_name>
          <last_name>Mount</last_name>
          <affiliation>King's College London</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.snim2.org/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/sarahmount/6384b1e5-26d9-469b-b336-bb504ad3063f/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>6</sort_key>
          <first_name>Laurence</first_name>
          <last_name>Tratt</last_name>
          <affiliation>King's College London</affiliation>
          <bio>I am a programmer and Reader in Software Development in the Department of Informatics at King’s College London where I lead the Software Development Team. I am an EPSRC Fellow. I co-founded Elbatrop.</bio>
          <homepage_url>http://tratt.net/laurie/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/laurietratt/e1b23f1a-fac9-4566-856c-a8fea953adb2/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>ICOOOLPS</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>9a7ccb3c-b30d-44c8-98d1-64a03dc5a206</slot_id>
      <title>Discussions</title>
      <room>Alfieri</room>
      <date>2016/07/18</date>
      <start_time>12:05</start_time>
      <end_time>12:25</end_time>
      <description>undefined</description>
      <tracks>
        <track>ICOOOLPS</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>c0d79d3f-9ece-4c45-aa8a-d89ae3168345</subevent_id>
    <title>ICOOOLPS: Session 4</title>
    <subevent_type type="regular"/>
    <room>Alfieri</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/ICOOOLPS-2016</url>
    <url_link_display>ICOOOLPS</url_link_display>
    <tracks>
      <track>ICOOOLPS</track>
    </tracks>
    <timeslot>
      <slot_id>15726dca-d2bf-43fd-9fcb-c20ff5c98015</slot_id>
      <title>Efficient Profiling of Actor-based Applications in Parallel and Distributed Systems</title>
      <room>Alfieri</room>
      <date>2016/07/18</date>
      <start_time>17:00</start_time>
      <end_time>17:30</end_time>
      <description>Applications employing the actor model of concurrent computation are becoming popular nowadays. On the one hand, the foundational characteristics of the actor model make it attractive in parallel and distributed settings. On the other hand, effective investigation of poor performance in actor-based applications requires dedicated metrics and profiling methods. Unfortunately, little research has been conducted on this topic to date, and developers are forced to investigate suboptimal performance with general-purpose profilers that fall short in locating scalability bottlenecks and performance inefficiencies. This position paper advocates the need for dedicated profiling techniques and tools for actor-based applications, focusing specifically on inter-actor communication and actor utilization. Our preliminary results support the importance of dedicated actor profiling and motivate further research on this topic.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Andrea</first_name>
          <last_name>Rosà</last_name>
          <affiliation>Università della Svizzera italiana</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.inf.usi.ch/phd/rosaa</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/andrearosa/56bfbe88-343d-473c-b65b-a085469b0cae/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Lydia Y.</first_name>
          <last_name>Chen</last_name>
          <affiliation>IBM Research Lab Zurich</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Walter</first_name>
          <last_name>Binder</last_name>
          <affiliation>University of Lugano</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>ICOOOLPS</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>45728137-e810-4335-903c-6e191bae9e81</slot_id>
      <title>TruffleReloader: A Low-Overhead Language-Neutral Reloader</title>
      <room>Alfieri</room>
      <date>2016/07/18</date>
      <start_time>16:00</start_time>
      <end_time>16:30</end_time>
      <description>Updating running programs is a well-researched and increasingly popular feature of programming language implementations. While there are solutions targeting specific languages and platforms, implementing dynamic update for new languages can require significant effort. We have built TruffleReloader, a reusable dynamic updating solution, on top of the Truffle language implementation framework, and adapted the Truffle implementations of Python, Ruby and JavaScript to use this feature. We show how TruffleReloader adds reloading capabilities to these implementations requiring limited language-specific modifications. With Truffle’s just-in-time compiler enabled, our solution incurs close to zero overhead on steady-state performance. This approach reduces the effort required to add dynamic update support for existing and future languages.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Tõnis</first_name>
          <last_name>Pool</last_name>
          <affiliation>ZeroTurnaround / University of Tartu</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/tonispool/89237610-da52-46f7-8042-219cfcf5eb15/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Allan Raundahl</first_name>
          <last_name>Gregersen</last_name>
          <affiliation>ZeroTurnaround</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Vesal</first_name>
          <last_name>Vojdani</last_name>
          <affiliation>University of Tartu</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>ICOOOLPS</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>ca371582-1134-4310-8d02-30a38b45606f</slot_id>
      <title>Sulong - Execution of LLVM-Based Languages on the JVM</title>
      <room>Alfieri</room>
      <date>2016/07/18</date>
      <start_time>16:30</start_time>
      <end_time>17:00</end_time>
      <description>For the last decade, the Java Virtual Machine (JVM) has been a popular platform to host languages other than Java. Language implementation frameworks like Truffle allow the implementation of dynamic languages such as JavaScript or Ruby with competitive performance and completeness. However, statically typed languages are still rare under Truffle. We present Sulong, an LLVM IR interpreter that brings all LLVM-based languages including C, C++, and Fortran in one stroke to the JVM. Executing these languages on the JVM enables a wide area of future research, including high- performance interoperability between high-level and low- level languages, combination of static and dynamic optimizations, and a memory-safe execution of otherwise unsafe and unmanaged languages.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Manuel</first_name>
          <last_name>Rigger</last_name>
          <affiliation>Johannes Kepler University, Linz, Austria</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://ssw.jku.at/General/Staff/ManuelRigger/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/manuelrigger/47e268e9-158c-471f-a7e9-442216c54550/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Matthias</first_name>
          <last_name>Grimmer</last_name>
          <affiliation>Johannes Kepler University Linz</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://ssw.jku.at/General/Staff/Grimmer/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/matthiasgrimmer/b55cbeb5-b0fd-40d9-92c1-d0e2526fd65f/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Hanspeter</first_name>
          <last_name>Mössenböck</last_name>
          <affiliation>Johannes Kepler University Linz</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://ssw.jku.at/General/Staff/HM/</homepage_url>
        </person>
      </persons>
      <tracks>
        <track>ICOOOLPS</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>478750f0-94d7-427a-bb89-a61e54ed4720</subevent_id>
    <title>ICOOOLPS: Session 3</title>
    <subevent_type type="regular"/>
    <room>Alfieri</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/ICOOOLPS-2016</url>
    <url_link_display>ICOOOLPS</url_link_display>
    <tracks>
      <track>ICOOOLPS</track>
    </tracks>
    <timeslot>
      <slot_id>03702d4e-f89f-47dc-9c3f-3ff789f04470</slot_id>
      <title>Growing an Abstract Grammar: Teaching Language Engineering</title>
      <room>Alfieri</room>
      <date>2016/07/18</date>
      <start_time>13:50</start_time>
      <end_time>14:50</end_time>
      <description>Abstract grammars are neglected resources in language processor implementations. In the most favourable case they are used to format first-class program representations. In the worst case they serve as a temporary interface between compiler phases. But they can enable so much more … certainly in teaching.
In this presentation we report on a long-running experiment (&amp;gt;5 y.) to develop a language interpreter that is maximally supported by an extensible (abstract) grammar. The context of the experiment is an advanced course on Programming Language Engineering. The reference language is a simplified variation on Scheme, so: no objects in this story.
In this course abstract grammars serve as backbone for material ranging from formal language specifications to low-level implementation with an eye for optimisation. In order to do so, we require that an instance of an abstract grammar be first class, and that all of its attributes should be setable and getable from within any program that is associated with this instance. Depending on the level of detail at which its semantics are captured in the abstract grammar, this regulates the depth at which the program can reflect over its specification. Nothing new here, this is lisp and s-expressions, only more so.
A central idea to this notion of a rich abstract grammar, is a unified memory model. At a basic level no distinction is made between stacks, heaps, frames &amp;amp;c. concerning their residence in memory. This of course raises potential performance issues about memory management — but a sufficiently powerful garbage collector and various caching and inlining tactics go a long way in mitigating this concern. We will consider what it takes to explain memory models and garbage collection at a sufficient level of detail to investigate performance issues. We proceed with s-expressions and grow this in successive steps to describe the various structures employed by a language interpreter. Considering that the eval operation should ultimately map the grammar onto itself, the obvious ones are computational values that do not correspond with literals, such as closures and continuations. But with the introduction of lexical addressing, we should also include frames and environments; and if the interpretation strategy is based on a transformation into continuation passing style (as is the case here), structures resulting from lambda-lifting should be considered. However, the most interesting extensions to the abstract grammar are related to optimisations: tail call optimisation, inlining, prevalent function call patterns, &amp;amp;c.
This approach proved to be an interesting setting to expose graduate students to the vagaries low level language processor implementations. But it has also been suitable as a platform for sophisticated experiments with optimisations for language interpreters.</description>
      <persons>
        <person>
          <role>Presenter</role>
          <sort_key>1</sort_key>
          <first_name>Theo</first_name>
          <last_name>D'Hondt</last_name>
          <affiliation>Vrije Universiteit Brussel</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>ICOOOLPS</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>4b7065d4-7062-4ea9-ad29-92bcb2ab21b1</slot_id>
      <title>MHDeS: Deduplicate Method Handle Graph for Efficient Dynamic JVM Language Implementations</title>
      <room>Alfieri</room>
      <date>2016/07/18</date>
      <start_time>14:50</start_time>
      <end_time>15:20</end_time>
      <description>A method handle (MH) is a reference to an underlying Java method with potential method type transformations. Multiple interconnected method handles form a method handle graph (MHG). Together with the Java Virtual Machine (JVM) instruction, invokedynamic, the implementation of MHGs is significant to dynamically typed language implementations on the JVM. Addressing the abundance of equivalent MHGs during program runtime, this paper presents an MHG equivalence model and an online Method Handle Deduplication System (MHDeS). The equivalence model determines the equivalence of two MHGs in terms of two kinds of keys, i.e., MH key and MHG key, which uniquely identify the transformation of an MH and an MHG, respectively. MHDeS is an implementation of the equivalence model. Instead of creating equivalent MHGs and then detecting their equivalency, MHDeS employs a light-weight structure, the MHG index key, which wraps constructor parameters of an MH. MHDeS uses a transformation index, fast-path comparison, and filters, to speed up the equivalency detection of an MHG index key. Our experimental results with the Computer Language Benchmark Game (CLBG) JRuby micro-indy show that 1) MHDeS with filter off can speed up the benchmark by 4.67% and reduces memory usage by 7.19% on average; 2) the deduplication result can be affected by the choice of MH transformations for filtering; 3) MHDeS can have the MH JIT compilation performed earlier; and 4) as much as 32% of MHG index keys are detected as non-unique and eliminated by MHDeS, and the expense for a single detection is trivial.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Shijie</first_name>
          <last_name>Xu</last_name>
          <affiliation>University of New Brunswick</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>David</first_name>
          <last_name>Bremner</last_name>
          <affiliation>University of New Brunswick</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Daniel</first_name>
          <last_name>Heidinga</last_name>
          <affiliation>IBM</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>ICOOOLPS</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>3a96db53-03d3-4dcf-b29e-d29d725b0bd0</subevent_id>
    <title>ICOOOLPS: Session 1</title>
    <subevent_type type="regular"/>
    <room>Alfieri</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/ICOOOLPS-2016</url>
    <url_link_display>ICOOOLPS</url_link_display>
    <tracks>
      <track>ICOOOLPS</track>
    </tracks>
    <timeslot>
      <slot_id>beb7881c-1436-4d07-a3c6-95c922b4eddb</slot_id>
      <title>Building Object-Oriented Programs out of Pieces</title>
      <room>Alfieri</room>
      <date>2016/07/18</date>
      <start_time>08:45</start_time>
      <end_time>09:15</end_time>
      <description>This paper presents a technique for assembling Smalltalk programs out of pieces using propositional Horn clauses. The technique allows the dependencies and restrictions of a piece to be stated inside the piece or outside, allowing components from other dialects to be used. The technique is applicable to any OO language allowing class extensions.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Richard</first_name>
          <last_name>O'Keefe</last_name>
          <affiliation>Computer Science, University of Otago</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>ICOOOLPS</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>d39d4069-8e40-4a17-a813-1ae73e6c5fe4</slot_id>
      <title>Source Language Representation of Function Summaries in Static Analysis</title>
      <room>Alfieri</room>
      <date>2016/07/18</date>
      <start_time>09:15</start_time>
      <end_time>09:45</end_time>
      <description>Static analysis is a popular method to find bugs. In context-sensitive static analysis the analyzer considers the calling context when evaluating a function call. This approach makes it possible to find bugs that span across multiple functions. In order to find those issues the analyzer engine requires information about both the calling context and the callee. Unfortunately the implementation of the callee might only be available in a separate translation unit or module. In these scenarios the analyzer either makes some assumptions about the behavior of the callee (which may be unsound) or conservatively creates a program state that marks every value that might be affected by this function call. In this case the marked value becomes unknown which implies significant loss of precision.
In order to mitigate this overapproximation a common approach is to assign a summary to some of the functions, and each time the implementation is not available, use the summary to analyze the effect of the function call. These summaries are in fact approximations of the function implementations that can be used to model some behavior of the called functions in a given context. The most proper way to represent summaries, however, remains an open question.
This paper describes a method of representing C/C++ functions’ summaries in the same language. We evaluate the advantages and disadvantages of this approach. It is challenging to use source language representation efficiently due to the compilation model of C/C++. We propose an efficient solution. The emphasis of the paper is on using static analysis to find errors in the programs, however the same approach can be used to optimize programs or any other tasks that static analysis is capable of. Our proof of concept implementation is available in the upstream version of the Clang compiler.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Gábor</first_name>
          <last_name>Horváth</last_name>
          <affiliation>Eötvös Loránd University, Faculty of Informatics, Department of Programming Languages and Compilers</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Norbert</first_name>
          <last_name>Pataki</last_name>
          <affiliation>Eötvös Loránd University, Faculty of Informatics, Department of Programming Languages and Compilers</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>ICOOOLPS</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>1ef36b44-d0bf-4bf6-99ab-97637b85ee65</subevent_id>
    <title>ICOOOLPS: Session 5</title>
    <subevent_type type="regular"/>
    <room>Alfieri</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/ICOOOLPS-2016</url>
    <url_link_display>ICOOOLPS</url_link_display>
    <tracks>
      <track>ICOOOLPS</track>
    </tracks>
    <timeslot>
      <slot_id>64c92da8-88e7-4f2b-a70d-7d588797cd97</slot_id>
      <title>Discussions and Wrap Up</title>
      <room>Alfieri</room>
      <date>2016/07/18</date>
      <start_time>18:05</start_time>
      <end_time>18:30</end_time>
      <description>undefined</description>
      <tracks>
        <track>ICOOOLPS</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>8d605710-76b6-4cea-bfb1-607d9bde6407</slot_id>
      <title>Demo of Docking: Enabling Language Based Dynamic Coupling</title>
      <room>Alfieri</room>
      <date>2016/07/18</date>
      <start_time>17:40</start_time>
      <end_time>18:05</end_time>
      <description>In many object-oriented languages, for two objects to communicate at least one of them must have a reference to the other object, or transitively, a reference to an object that has a reference to the other object. In graph terms, if objects are nodes and an object reference is a directed edge then two object can communicate if and only if at least one of them can reach the other via a directed path in the object graph. Thus two objects that are NOT in the same connected subset of the graph can never communicate because they cannot obtain a reference to one another. In the Internet of Things, IoT, this can be a problem because we may want objects to communicate merely because they are physically close to one another, for example, when a user walks into a building, apps on the user’s mobile phone may want to communicate with local services. In the object oriented world, objects in the app and in the local services cannot communicate—there is no way for them to get to know each other.
We have proposed and implemented a mechanism that enables objects to get to know each other, e.g., if they both are interested, a reference from one to another can be created. We call our new mechanism docking. With this docking connection, objects in disjunct subsets of the object graph can obtain reference to one another.
Our mechanism is that a thread executing in an object, A, can state that it wants to know new objects of a particular type. If another object, B, that conforms to this type arrives at the node where A resides, our docking mechanism allows a reference to be created from one to the other.
This demo will show an implementation in the object oriented language Emerald running on Android-based mobile phones.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Magnus Haugom</first_name>
          <last_name>Christensen</last_name>
          <affiliation>University of Oslo</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Eric</first_name>
          <last_name>Jul</last_name>
          <affiliation>Alcatel-Lucent Bell Labs</affiliation>
          <bio>From 1982 Ph.D. student at the University of Washington–defended Ph.D.: “Object Mobility in a Distributed Object-Oriented System” December 1988, Seattle, Washington, USA.. Moved back to Roskilde 1987. Assistant Professor Dept. of Computer Science, University of Copenhagen, 1987, Associate Professor from 1989, Department Chair 1989-92. Full professor since 2000.</bio>
          <homepage_url>http://ericjul.dk</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/ericjul/3752976d-2b68-4641-b45a-a6fca64e4bb7/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>ICOOOLPS</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>4efa013b-02ef-4df9-8df2-c78eed8b3b6c</subevent_id>
    <title>Summer School: Lecture 2a</title>
    <subevent_type type="regular"/>
    <room>Leopardi</room>
    <date>2016/07/20</date>
    <url>http://2016.ecoop.org/track/Summer+School</url>
    <url_link_display>Summer School</url_link_display>
    <tracks>
      <track>Summer School</track>
    </tracks>
    <timeslot>
      <slot_id>734e5352-a3c5-4418-9d4d-44313b00eddb</slot_id>
      <title>Building a Research Program for Scripting Languages</title>
      <room>Leopardi</room>
      <date>2016/07/20</date>
      <start_time>13:30</start_time>
      <end_time>15:00</end_time>
      <description>Scripting languages — the JavaScripts, Pythons, Luas of this world — play a central role in today’s programming, but offer significant challenges to traditional programming languages activities like designing formal semantics, type systems, and other analytic tools. In this presentation I will discuss lessons learned from a ten year investigation at Brown into scripting languages.
Homework to prepare for the session: please watch the Wat talk by Gary Bernhardt (&amp;lt; 5 minutes).</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Shriram</first_name>
          <last_name>Krishnamurthi</last_name>
          <affiliation>Brown University</affiliation>
          <bio>I am a Professor of Computer Science at Brown University, Providence, RI, USA. You can learn more about me from my Web site.</bio>
          <homepage_url>http://cs.brown.edu/~sk/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/shriramkrishnamurthi/bd5925e0-a495-4a41-b84e-906b6e236341/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Summer School</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>7f147657-0e09-4a7e-b8e8-6ac8eff2ace8</subevent_id>
    <title>Summer School: Lecture 1</title>
    <subevent_type type="regular"/>
    <room>Leopardi</room>
    <date>2016/07/20</date>
    <url>http://2016.ecoop.org/track/Summer+School</url>
    <url_link_display>Summer School</url_link_display>
    <tracks>
      <track>Summer School</track>
    </tracks>
    <timeslot>
      <slot_id>2b6f7c3b-a042-440d-9bd3-07b19511cce6</slot_id>
      <title>25 Years of Types for Untyped Languages: A Random Walk Thru TypeLand </title>
      <room>Leopardi</room>
      <date>2016/07/20</date>
      <start_time>10:30</start_time>
      <end_time>12:00</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Matthias</first_name>
          <last_name>Felleisen</last_name>
          <affiliation>Northeastern University</affiliation>
          <bio>Matthias Felleisen, a Trustee Professor at Northeastern University’s College of Computer Science, has spent 30 years exploring programming languages and the pedagogy of software development. After receiving his PhD at Indiana University in 1987, he launched his academic career at Rice University; in 2001, he moved to Northeastern.
For the first decade of his career, Felleisen developed a new theoretical framework for modeling programming languages. Over time, this framework has provided the most widely used technique for proving type soundness theorems, the fundamental correctness claims for programming languages.
In 1995, Felleisen launched two related projects: (1) a K-12 outreach project with the goal of synthesizing mathematics and programming education and (2) the Racket language design project in support of the outreach project. Felleisen and his team taught dozens of intensive 5-day teacher training workshops over 20 years, focusing on program design as systematic problem solving. Working with Northeastern undergraduates, they also created the Bootstrap curriculum for middle schools; the curriculum has been adopted by code.org. The team’s Racket programming language has become a test bed for language design ideas from mixins to frameworks for domain-specific languages, from software contracts to gradual typing systems, and from web programming disciplines to distributed interactions. It is used in many applications, from DoD software to Naughty Dog’s games.
For his research on programming languages, Felleisen was inducted as an ACM Fellow in 2006 and received ACM SIGPLAN’s Achievement Award in 2012. Also in 2012, his paper on contracts for higher-order languages was picked asthe most influential ICFP 2002 publication. Felleisen has delivered keynote addresses at many programming language conferences, including POPL, ECOOP, and ICFP. For his educational outreach, ACM honored Felleisen with the Karl V. Karlstrom Award in 2010. ACM SIGCSE named Felleisen Outstanding Educator of the Year in 2011. In conjunction with the latter, he delivered the keynote at the annual Symposium on Computer Science Education.</bio>
          <homepage_url>http://www.ccs.neu.edu/home/matthias/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/matthiasfelleisen/7a851444-de7f-4206-86ed-a00a9536f985/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Summer School</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>9e0500a4-0440-4986-8094-33de01b575fc</subevent_id>
    <title>Summer School: Lecture 3</title>
    <subevent_type type="regular"/>
    <room>Leopardi</room>
    <date>2016/07/21</date>
    <url>http://2016.ecoop.org/track/Summer+School</url>
    <url_link_display>Summer School</url_link_display>
    <tracks>
      <track>Summer School</track>
    </tracks>
    <timeslot>
      <slot_id>1c6a3b41-c771-4be0-aa06-611465283e19</slot_id>
      <title>Gradual Type Systems</title>
      <room>Leopardi</room>
      <date>2016/07/21</date>
      <start_time>10:30</start_time>
      <end_time>12:00</end_time>
      <description>Gradual typing is an approach for designing programming languages that integrate static and dynamic type checking. Gradual typing gives the programmer control over which regions of a program are statically checked and which regions are dynamically checked. Over the last decade, there has been renewed interest in such an integration partly due to the rise in popularity of dynamic languages. They have been used to create large programs, which exposed the need for the early error detection and modularity provided by static type checking. Gradual typing provides a practical migration path for dynamically typed programs to become more statically typed. This lecture will give a comprehensive review of the state of the art in gradual typing. It will describe a) the major challenges in the design and implementation of gradually typed languages, b) the research that has addressed many of of these challenges, and c) the open problems that need to be solved. The challenges facing gradual typing include both theoretical questions and system design problems. On the theoretical side, there are challenges like characterizing what gradual typing is, what type soundness should mean, and whether relational parametricity can be preserved. On the system design side, there are challenges such as creating language runtimes that implement gradual typing in a time and space-efficient manner.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Jeremy</first_name>
          <last_name>Siek</last_name>
          <affiliation>Indiana University</affiliation>
          <bio>Jeremy Siek is an Associate Professor at Indiana University Bloomington. Jeremy’s areas of research include programming language design, type systems, mechanized theorem proving using proof assistants, and optimizing compilers. Jeremy’s Ph.D. thesis explored foundations for constrained templates, aka the “concepts” proposal for C++. Prior to that, Jeremy developed the Boost Graph Library, a C++ generic library for graph algorithms and data structures. Jeremy post-doc’d at Rice University with Walid Taha with whom he developed the idea of gradual typing: a type system that integrates both dynamic and static typing in the same programming language. Jeremy is currently working on a gradually-typed version of Pytho. In 2009 Jeremy received the NSF CAREER award to fund his project: “Bridging the Gap Between Prototyping and Production”. In 2010 and again in 2015, Jeremy was awarded a Distinguished Visiting Fellowship from the Scottish Informatics &amp;amp; Computer Science Alliance.</bio>
          <homepage_url>http://homes.soic.indiana.edu/jsiek/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jeremysiek/4ceb3667-5067-4806-9a32-2b8fd3004a1d/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Summer School</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>67cc6952-47bf-4e62-a9c7-774a6f689cd9</subevent_id>
    <title>Summer School: Lecture 4b</title>
    <subevent_type type="regular"/>
    <room>Leopardi</room>
    <date>2016/07/21</date>
    <url>http://2016.ecoop.org/track/Summer+School</url>
    <url_link_display>Summer School</url_link_display>
    <tracks>
      <track>Summer School</track>
    </tracks>
    <timeslot>
      <slot_id>57ed5d39-9f3b-4d1b-975d-fd0f8e25a58f</slot_id>
      <title>A JIT Compiler (almost) for Free</title>
      <room>Leopardi</room>
      <date>2016/07/21</date>
      <start_time>15:30</start_time>
      <end_time>17:00</end_time>
      <description>Writing JIT compilers for dynamic languages by hand is an arduous and heroic process, particularly for dynamic languages with “interesting” semantics. Meta-tracing is an approach for reducing that effort; VM authors only write an interpreter and some hints. In this hands-on session students will implement a small dynamic language from scratch as well as a JITusing the RPython meta-tracing language that underlies the PyPy project.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Carl Friedrich</first_name>
          <last_name>Bolz</last_name>
          <affiliation>King's College London </affiliation>
          <bio>I am researcher in Computer Science with Laurence Tratt as a member of the Software Development Team at King’s College London since 2013. I live in Hamburg. Before, I was at Hasso-Plattner-Institute Potsdam with Robert Hirschfeld and Heinrich-Heine-Universit&amp;auml;t D&amp;uuml;sseldorf with Michael Leuschel.
My main research interests are techniques for the efficient implementation of dynamic programming languages. I am interested in tracing JITs, optimizations, partial evaluation, particularly at runtime. I am a member of the Python Software Foundation.</bio>
          <homepage_url>http://cfbolz.de/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/carlfriedrichbolz/ef3ea68a-4eec-4490-95a3-6386f14eaa74/small.jpg</picture_url>
        </person>
        <person>
          <role>Speaker</role>
          <sort_key>2</sort_key>
          <first_name>Laurence</first_name>
          <last_name>Tratt</last_name>
          <affiliation>King's College London</affiliation>
          <bio>I am a programmer and Reader in Software Development in the Department of Informatics at King’s College London where I lead the Software Development Team. I am an EPSRC Fellow. I co-founded Elbatrop.</bio>
          <homepage_url>http://tratt.net/laurie/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/laurietratt/e1b23f1a-fac9-4566-856c-a8fea953adb2/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Summer School</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>fc11ab88-caac-4a0b-ae76-70062c918ac6</subevent_id>
    <title>Summer School: Lecture 4a</title>
    <subevent_type type="regular"/>
    <room>Leopardi</room>
    <date>2016/07/21</date>
    <url>http://2016.ecoop.org/track/Summer+School</url>
    <url_link_display>Summer School</url_link_display>
    <tracks>
      <track>Summer School</track>
    </tracks>
    <timeslot>
      <slot_id>014dd9c2-573e-4510-a47b-d8078e9b254d</slot_id>
      <title>A JIT Compiler (almost) for Free</title>
      <room>Leopardi</room>
      <date>2016/07/21</date>
      <start_time>13:30</start_time>
      <end_time>15:00</end_time>
      <description>Writing JIT compilers for dynamic languages by hand is an arduous and heroic process, particularly for dynamic languages with “interesting” semantics. Meta-tracing is an approach for reducing that effort; VM authors only write an interpreter and some hints. In this hands-on session students will implement a small dynamic language from scratch as well as a JITusing the RPython meta-tracing language that underlies the PyPy project.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Carl Friedrich</first_name>
          <last_name>Bolz</last_name>
          <affiliation>King's College London </affiliation>
          <bio>I am researcher in Computer Science with Laurence Tratt as a member of the Software Development Team at King’s College London since 2013. I live in Hamburg. Before, I was at Hasso-Plattner-Institute Potsdam with Robert Hirschfeld and Heinrich-Heine-Universit&amp;auml;t D&amp;uuml;sseldorf with Michael Leuschel.
My main research interests are techniques for the efficient implementation of dynamic programming languages. I am interested in tracing JITs, optimizations, partial evaluation, particularly at runtime. I am a member of the Python Software Foundation.</bio>
          <homepage_url>http://cfbolz.de/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/carlfriedrichbolz/ef3ea68a-4eec-4490-95a3-6386f14eaa74/small.jpg</picture_url>
        </person>
        <person>
          <role>Speaker</role>
          <sort_key>2</sort_key>
          <first_name>Laurence</first_name>
          <last_name>Tratt</last_name>
          <affiliation>King's College London</affiliation>
          <bio>I am a programmer and Reader in Software Development in the Department of Informatics at King’s College London where I lead the Software Development Team. I am an EPSRC Fellow. I co-founded Elbatrop.</bio>
          <homepage_url>http://tratt.net/laurie/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/laurietratt/e1b23f1a-fac9-4566-856c-a8fea953adb2/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Summer School</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>917841e3-ff0d-4783-a6a7-644dd5a86598</subevent_id>
    <title>Summer School: Lecture 5b</title>
    <subevent_type type="regular"/>
    <room>Leopardi</room>
    <date>2016/07/22</date>
    <url>http://2016.ecoop.org/track/Summer+School</url>
    <url_link_display>Summer School</url_link_display>
    <tracks>
      <track>Summer School</track>
    </tracks>
    <timeslot>
      <slot_id>28fe19d1-2c7e-43e0-87d0-d54de8128f54</slot_id>
      <title>Adjourn</title>
      <room>Leopardi</room>
      <date>2016/07/22</date>
      <start_time>15:10</start_time>
      <end_time>15:20</end_time>
      <description>undefined</description>
      <tracks>
        <track>Summer School</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>46b8e369-4757-4ac8-a175-6bb96ca5ad55</slot_id>
      <title>Experimental Evaluation of Programming Systems</title>
      <room>Leopardi</room>
      <date>2016/07/22</date>
      <start_time>13:40</start_time>
      <end_time>15:10</end_time>
      <description>Scientific progress is predicated on quantifiable advances. The questions of what to measure and how to measure it are central to empirical computer science. From compiler to distributed machine learning algorithms, setting up experiments and reporting their outcome is something we keep getting wrong. This course will provide motivation in the form of a number of cautionary tales, and then will give simple techniques for designing experiments along with the statistical basics suited for most common benchmarking situations. We will also introduce the concepts of reproducibility and repeatability and do some hands on exercises in R.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Tomas</first_name>
          <last_name>Kalibera</last_name>
          <affiliation>Northeastern University</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://www.linkedin.com/in/kalibera</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/tomaskalibera/5e8fabb7-7e91-49dc-9fd6-dd6eb1d7c323/small.jpg</picture_url>
        </person>
        <person>
          <role>Speaker</role>
          <sort_key>2</sort_key>
          <first_name>Jan</first_name>
          <last_name>Vitek</last_name>
          <affiliation>Northeastern University</affiliation>
          <bio>Jan Vitek is a Professor of Computer Science at Northeastern University. Dr. Vitek was born in Czechoslovakia and educated in Switzerland. Over the years, he worked on topics related to programming languages, their design, use, and implementation. With Noble and Potter, he proposed the notion of flexible alias control which became know as Ownership Types. He led the Ovm project which produced the first real-time Java virtual machine to be flight tested on a ScanEagle drone (he claims no one was harmed). Outcomes of this project include the Schism real-time garbage collector and the FijiVM – a production VM for embedded systems. More recently, he worked on dynamic languages, trying to make sense of JavaScript and to design a new language called, Thorn. Nowadays, he spends his time with statisticians and data scientists. Jan believes that his 2012 election as Chair of SIGPLAN was an accident; since has been busy trying to rock the boat to ensure this does not happen again. In his spare time, Jan enjoys organizing conferences and sitting on PCs (over 25 in the last decade). He founded the MOS (mobile objects), IWACO (alias control), STOP (gradual typing), and TRANSACT (transactional memory) workshop series. He was the first program chair of VEE and chaired ESOP, ECOOP, Coordination and TOOLS. He was the general chair of PLDI (in Beijing!), ISMM and LCTES. He may still be sitting on the steering committees of ECOOP, JTRES, ICFP, OOPLSA, POPL, PLDI, LCTES, ESOP.</bio>
          <homepage_url>http://janvitek.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/janvitek/53f115e3-8db9-4b80-b49a-f5eb2a0c8696/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Summer School</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>865f0e52-61a7-4b72-a78b-632432cffa31</subevent_id>
    <title>Summer School: Lecture 5a</title>
    <subevent_type type="regular"/>
    <room>Leopardi</room>
    <date>2016/07/22</date>
    <url>http://2016.ecoop.org/track/Summer+School</url>
    <url_link_display>Summer School</url_link_display>
    <tracks>
      <track>Summer School</track>
    </tracks>
    <timeslot>
      <slot_id>3ac07323-35ac-4b68-969b-953b4a44c782</slot_id>
      <title>Experimental Evaluation of Programming Systems</title>
      <room>Leopardi</room>
      <date>2016/07/22</date>
      <start_time>10:30</start_time>
      <end_time>12:00</end_time>
      <description>Scientific progress is predicated on quantifiable advances. The questions of what to measure and how to measure it are central to empirical computer science. From compiler to distributed machine learning algorithms, setting up experiments and reporting their outcome is something we keep getting wrong. This course will provide motivation in the form of a number of cautionary tales, and then will give simple techniques for designing experiments along with the statistical basics suited for most common benchmarking situations. We will also introduce the concepts of reproducibility and repeatability and do some hands on exercises in R.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Tomas</first_name>
          <last_name>Kalibera</last_name>
          <affiliation>Northeastern University</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://www.linkedin.com/in/kalibera</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/tomaskalibera/5e8fabb7-7e91-49dc-9fd6-dd6eb1d7c323/small.jpg</picture_url>
        </person>
        <person>
          <role>Speaker</role>
          <sort_key>2</sort_key>
          <first_name>Jan</first_name>
          <last_name>Vitek</last_name>
          <affiliation>Northeastern University</affiliation>
          <bio>Jan Vitek is a Professor of Computer Science at Northeastern University. Dr. Vitek was born in Czechoslovakia and educated in Switzerland. Over the years, he worked on topics related to programming languages, their design, use, and implementation. With Noble and Potter, he proposed the notion of flexible alias control which became know as Ownership Types. He led the Ovm project which produced the first real-time Java virtual machine to be flight tested on a ScanEagle drone (he claims no one was harmed). Outcomes of this project include the Schism real-time garbage collector and the FijiVM – a production VM for embedded systems. More recently, he worked on dynamic languages, trying to make sense of JavaScript and to design a new language called, Thorn. Nowadays, he spends his time with statisticians and data scientists. Jan believes that his 2012 election as Chair of SIGPLAN was an accident; since has been busy trying to rock the boat to ensure this does not happen again. In his spare time, Jan enjoys organizing conferences and sitting on PCs (over 25 in the last decade). He founded the MOS (mobile objects), IWACO (alias control), STOP (gradual typing), and TRANSACT (transactional memory) workshop series. He was the first program chair of VEE and chaired ESOP, ECOOP, Coordination and TOOLS. He was the general chair of PLDI (in Beijing!), ISMM and LCTES. He may still be sitting on the steering committees of ECOOP, JTRES, ICFP, OOPLSA, POPL, PLDI, LCTES, ESOP.</bio>
          <homepage_url>http://janvitek.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/janvitek/53f115e3-8db9-4b80-b49a-f5eb2a0c8696/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Summer School</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>baeaa8a4-95ef-4de7-8373-3c7225d1d90d</subevent_id>
    <title>Summer School: Lecture 2b</title>
    <subevent_type type="regular"/>
    <room>Leopardi</room>
    <date>2016/07/20</date>
    <url>http://2016.ecoop.org/track/Summer+School</url>
    <url_link_display>Summer School</url_link_display>
    <tracks>
      <track>Summer School</track>
    </tracks>
    <timeslot>
      <slot_id>292095a9-e6b8-4c6b-a7e9-942e73dc52c2</slot_id>
      <title>Building a Research Program for Scripting Languages</title>
      <room>Leopardi</room>
      <date>2016/07/20</date>
      <start_time>15:30</start_time>
      <end_time>17:00</end_time>
      <description>Scripting languages — the JavaScripts, Pythons, Luas of this world — play a central role in today’s programming, but offer significant challenges to traditional programming languages activities like designing formal semantics, type systems, and other analytic tools. In this presentation I will discuss lessons learned from a ten year investigation at Brown into scripting languages.
Homework to prepare for the session: please watch the Wat talk by Gary Bernhardt (&amp;lt; 5 minutes).</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Shriram</first_name>
          <last_name>Krishnamurthi</last_name>
          <affiliation>Brown University</affiliation>
          <bio>I am a Professor of Computer Science at Brown University, Providence, RI, USA. You can learn more about me from my Web site.</bio>
          <homepage_url>http://cs.brown.edu/~sk/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/shriramkrishnamurthi/bd5925e0-a495-4a41-b84e-906b6e236341/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Summer School</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>805e87f6-7691-4951-99da-b3c806d1da8e</subevent_id>
    <title>Catering: Coffee break</title>
    <subevent_type type="regular"/>
    <room>Ariosto</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/curryon-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>de6fb44a-36f5-4ec6-bc54-39fc64ffd8ce</slot_id>
      <title>Coffee break</title>
      <room>Ariosto</room>
      <date>2016/07/17</date>
      <start_time>09:45</start_time>
      <end_time>10:05</end_time>
      <description>undefined</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>d4474146-01a1-431a-9f07-2120838573e4</subevent_id>
    <title>Catering: Lunch</title>
    <subevent_type type="regular"/>
    <room>Ariosto</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/curryon-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>512495d4-8570-4296-9730-717cae86830b</slot_id>
      <title>Lunch</title>
      <room>Ariosto</room>
      <date>2016/07/17</date>
      <start_time>12:25</start_time>
      <end_time>13:50</end_time>
      <description>Lunch</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>b2d4c25a-80f7-485f-a90d-cda5b7736b1f</subevent_id>
    <title>Catering: Banquet</title>
    <subevent_type type="regular"/>
    <room>Pinacoteca del Tesoriere</room>
    <date>2016/07/21</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>624ce0f4-e091-4b93-90c8-cb37998fa246</slot_id>
      <title>ECOOP Banquet</title>
      <room>Pinacoteca del Tesoriere</room>
      <date>2016/07/21</date>
      <start_time>19:30</start_time>
      <end_time>23:00</end_time>
      <description>undefined</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>d15a2a8c-8baa-4b95-ace2-11d3bc586fdd</subevent_id>
    <title>Catering: Coffee break</title>
    <subevent_type type="regular"/>
    <room>Ariosto</room>
    <date>2016/07/17</date>
    <url>http://2016.ecoop.org/track/curryon-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>35b5c7e5-13f5-4c08-ba9e-76b27907e260</slot_id>
      <title>Coffee break</title>
      <room>Ariosto</room>
      <date>2016/07/17</date>
      <start_time>15:20</start_time>
      <end_time>16:00</end_time>
      <description>undefined</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>ce8900fa-0d97-419f-8c60-fb5db848ba8c</subevent_id>
    <title>Catering: Poster Session &amp; Workshops Reception</title>
    <subevent_type type="regular"/>
    <room>Manzoni</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/curryon-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>73966dea-70ae-45a0-8e4f-93b8c2282081</slot_id>
      <title>Poster Session &amp; Workshops Reception</title>
      <room>Manzoni</room>
      <date>2016/07/19</date>
      <start_time>17:30</start_time>
      <end_time>18:30</end_time>
      <description>undefined</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>09b55d40-d761-4f98-91ea-22de29c5d058</subevent_id>
    <title>Catering: Lunch</title>
    <subevent_type type="regular"/>
    <room>Ariosto + Manzoni</room>
    <date>2016/07/20</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>eb55c875-837a-4e8a-9fde-624ae4804764</slot_id>
      <title>Lunch</title>
      <room>Ariosto + Manzoni</room>
      <date>2016/07/20</date>
      <start_time>12:00</start_time>
      <end_time>13:30</end_time>
      <description>Lunch</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>f6a72b37-064a-41b1-81f1-d6226ecd9754</subevent_id>
    <title>Catering: Coffee break</title>
    <subevent_type type="regular"/>
    <room>Ariosto + Manzoni</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/curryon-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>f81035d7-f482-4c75-b706-9bf070fb7f0e</slot_id>
      <title>Coffee break</title>
      <room>Ariosto + Manzoni</room>
      <date>2016/07/19</date>
      <start_time>15:20</start_time>
      <end_time>16:00</end_time>
      <description>undefined</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>1c782d4d-7690-4a40-8721-32c90864bb20</subevent_id>
    <title>Catering: Coffee break</title>
    <subevent_type type="regular"/>
    <room>Ariosto + Manzoni</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/curryon-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>58d03549-fe0b-4dc9-9467-37446e47c1bb</slot_id>
      <title>Coffee break</title>
      <room>Ariosto + Manzoni</room>
      <date>2016/07/19</date>
      <start_time>09:45</start_time>
      <end_time>10:05</end_time>
      <description>undefined</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>690dbe74-296f-4741-95fa-e1018294c102</subevent_id>
    <title>Catering: Lunch</title>
    <subevent_type type="regular"/>
    <room>Ariosto + Manzoni</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/curryon-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>c4bef6aa-a903-4c91-b823-4df67662182c</slot_id>
      <title>Lunch</title>
      <room>Ariosto + Manzoni</room>
      <date>2016/07/18</date>
      <start_time>12:25</start_time>
      <end_time>13:50</end_time>
      <description>Lunch</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>eeb853c6-72d5-4466-b75d-ad1febc485a0</subevent_id>
    <title>Catering: Coffee break</title>
    <subevent_type type="regular"/>
    <room>Ariosto + Manzoni</room>
    <date>2016/07/21</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>a90f8652-64fb-48f5-8c29-8c52e916f973</slot_id>
      <title>Coffee break</title>
      <room>Ariosto + Manzoni</room>
      <date>2016/07/21</date>
      <start_time>15:00</start_time>
      <end_time>15:30</end_time>
      <description>undefined</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>77d7218b-bec3-4738-ab0a-66a338146d82</subevent_id>
    <title>Catering: Coffee break</title>
    <subevent_type type="regular"/>
    <room>Ariosto + Manzoni</room>
    <date>2016/07/20</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>36e18b05-76e9-496a-acf4-b02ee0099c54</slot_id>
      <title>Coffee break</title>
      <room>Ariosto + Manzoni</room>
      <date>2016/07/20</date>
      <start_time>10:00</start_time>
      <end_time>10:30</end_time>
      <description>undefined</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>24cd281d-d97d-43e2-bc2c-49a35fe713cb</subevent_id>
    <title>Catering: Coffee break</title>
    <subevent_type type="regular"/>
    <room>Ariosto + Manzoni</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/curryon-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>708dab2b-bff0-432b-8a97-150522901b75</slot_id>
      <title>Coffee break</title>
      <room>Ariosto + Manzoni</room>
      <date>2016/07/18</date>
      <start_time>15:20</start_time>
      <end_time>16:00</end_time>
      <description>undefined</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>2878dab4-fd8b-4202-af5a-c9ac9afdbb3a</subevent_id>
    <title>Catering: Coffee break</title>
    <subevent_type type="regular"/>
    <room>Ariosto + Manzoni</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/curryon-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>fbca0c38-039c-40ca-b00f-b0f966e90cc4</slot_id>
      <title>Coffee break</title>
      <room>Ariosto + Manzoni</room>
      <date>2016/07/18</date>
      <start_time>09:45</start_time>
      <end_time>10:05</end_time>
      <description>undefined</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>ddd1cc13-a952-4110-8de0-28f6ee83f2ce</subevent_id>
    <title>Catering: Coffee break</title>
    <subevent_type type="regular"/>
    <room>Ariosto + Manzoni</room>
    <date>2016/07/20</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>6692a8bc-bd0c-4bd8-ab18-196da13cb0ed</slot_id>
      <title>Coffee break</title>
      <room>Ariosto + Manzoni</room>
      <date>2016/07/20</date>
      <start_time>15:00</start_time>
      <end_time>15:30</end_time>
      <description>undefined</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>8e5eae06-a10d-4325-b474-e522228c7d46</subevent_id>
    <title>Catering: Lunch</title>
    <subevent_type type="regular"/>
    <room>Ariosto + Manzoni</room>
    <date>2016/07/22</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>4643ec2b-8c5a-4c1e-ae29-776eaf28abee</slot_id>
      <title>Lunch</title>
      <room>Ariosto + Manzoni</room>
      <date>2016/07/22</date>
      <start_time>11:45</start_time>
      <end_time>13:30</end_time>
      <description>Lunch</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>b3bcf1ef-a174-441e-bd0b-f59f377ae574</subevent_id>
    <title>Catering: Coffee break</title>
    <subevent_type type="regular"/>
    <room>Ariosto + Manzoni</room>
    <date>2016/07/22</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>b3ad4e8c-bcd8-4330-8db7-bd57391b7822</slot_id>
      <title>Coffee break</title>
      <room>Ariosto + Manzoni</room>
      <date>2016/07/22</date>
      <start_time>10:00</start_time>
      <end_time>10:30</end_time>
      <description>undefined</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>57fc6d2e-a2ad-4af1-a556-3438b9b6dd03</subevent_id>
    <title>Catering: Lunch</title>
    <subevent_type type="regular"/>
    <room>Ariosto + Manzoni</room>
    <date>2016/07/21</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>399ab64e-e407-4c44-a09b-23e1e2f08bec</slot_id>
      <title>Lunch</title>
      <room>Ariosto + Manzoni</room>
      <date>2016/07/21</date>
      <start_time>11:45</start_time>
      <end_time>13:30</end_time>
      <description>Lunch</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>934a8f8b-1eb2-42ac-83e2-5370bbe4fafd</subevent_id>
    <title>Catering: Lunch</title>
    <subevent_type type="regular"/>
    <room>Ariosto + Manzoni</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/curryon-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>c2e8fd72-47a2-4f39-b579-839ebaf053dd</slot_id>
      <title>Lunch</title>
      <room>Ariosto + Manzoni</room>
      <date>2016/07/19</date>
      <start_time>12:25</start_time>
      <end_time>13:50</end_time>
      <description>Lunch</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>2bfffa02-e59b-4587-a37a-76756572176c</subevent_id>
    <title>Catering: Coffee break</title>
    <subevent_type type="regular"/>
    <room>Ariosto + Manzoni</room>
    <date>2016/07/21</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>09f2b648-6802-44a6-9cb7-1fc7a95d1b05</slot_id>
      <title>Coffee break</title>
      <room>Ariosto + Manzoni</room>
      <date>2016/07/21</date>
      <start_time>10:00</start_time>
      <end_time>10:30</end_time>
      <description>undefined</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>8134dce0-a5eb-4f5a-bc96-9ef5fab9ddff</subevent_id>
    <title>Catering: Ice Cream Social</title>
    <subevent_type type="regular"/>
    <room>Manzoni</room>
    <date>2016/07/22</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-catering</url>
    <url_link_display>Catering</url_link_display>
    <tracks>
      <track>Catering</track>
    </tracks>
    <timeslot>
      <slot_id>a75914e9-76e1-4152-b833-bb5c444b5cb8</slot_id>
      <title>Social</title>
      <room>Manzoni</room>
      <date>2016/07/22</date>
      <start_time>15:20</start_time>
      <end_time>16:20</end_time>
      <description>undefined</description>
      <tracks>
        <track>Catering</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>9897ecce-2105-4c3b-9d9f-832a41d0f964</subevent_id>
    <title>Research Track: Session 5</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/21</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-papers</url>
    <url_link_display>Research Track</url_link_display>
    <tracks>
      <track>Research Track</track>
    </tracks>
    <timeslot>
      <slot_id>65567df8-0b66-4e0a-91ef-8f99d3df8c1c</slot_id>
      <title>Lightweight session programming in Scala</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/21</date>
      <start_time>14:10</start_time>
      <end_time>14:35</end_time>
      <description>Designing, developing and maintaining concurrent applications is an error-prone and time-consuming task; most difficulties arise because compilers are usually unable to check whether the inputs/outputs performed by a program at runtime will adhere to a given protocol specification. To address this problem, we propose lightweight session programming in Scala: we leverage the native features of the Scala type system and standard library, to introduce (1) a representation of session types as Scala types, and (2) a library, called lchannels, with a convenient API for session-based programming, supporting local and distributed communication. We generalise the idea of Continuation-Passing Style (CPS) protocols, studying their formal relationship with session types. We illustrate how session programming can be carried over in Scala: how to formalise a communication protocol, and represent it using Scala classes and lchannels, letting the compiler help spotting protocol violations. We attest the practicality of our approach with a complex use case, and evaluate the performance of lchannels with a series of benchmarks.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Alceste</first_name>
          <last_name>Scalas</last_name>
          <affiliation>Imperial College London</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Nobuko</first_name>
          <last_name>Yoshida</last_name>
          <affiliation>Imperial College London, UK</affiliation>
          <bio>Nobuko Yoshida is Professor of Computing. She has applied session types to Web services and programming languages, and introduced multiparty session types. Based on Multiparty session types, she established JBoss Red Hat Scribble project. She was awarded a CNRS visiting fellowship and visiting professorship at Paris VII. She is an editor of Journal of Logical Algebraic Methods in Programming, the chief editor of The Computer-aided Verification and Concurrency Column for EATCS Bulletin and the editor of Acta Informatica. She has served as a PC member for over 50 conferences in the past five years. She was regularly invited to give the key note talks – recent invited talks include 8th International Symposium on Trustworthy Global Computing (TGC 2013) at Buenos Aires and Joint 25th International Conference on Rewriting Techniques and Applications and 12th International Conference on Typed Lambda Calculi and Applications in 2014. She is a member of IFIP 2.4, and the JBoss Red Hat Savara and Scribble Projects. Her industry partners include Cognizant, Red Hat, VMware, Pivotal and Ocean Observatories Initiative.</bio>
          <homepage_url>http://www.doc.ic.ac.uk/~yoshida/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/nobukoyoshida/d8aec887-27c4-4e9b-86ae-6ab4783541ad/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>b081f8ee-09b4-4eb6-80f5-8ed39718966c</slot_id>
      <title>Trace Typing: An Approach for Evaluating Retrofitted Type Systems</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/21</date>
      <start_time>14:35</start_time>
      <end_time>15:00</end_time>
      <description>Recent years have seen growing interest in the retrofitting of type systems onto dynamically-typed programming languages, in order to improve type safety, programmer productivity, or performance. In such cases, type system developers must strike a delicate balance between disallowing popular coding patterns in order to keep the type system simple and intuitively appealing, or including them at the expense of additional complexity and effort. Thus far, the process for designing retrofitted type systems has been largely ad-hoc, because evaluating multiple variations of a type system on large bodies of existing code is a significant undertaking.
We present trace typing: a framework for automatically and quantitatively evaluating variations of a retrofitted type system on large code bases. The trace typing approach involves gathering traces of program executions, inferring types for instances of variables and expressions occurring in a trace, and merging types according to merge strategies that reflect specific (combinations of) choices in the source-level type system design space.
We evaluate trace typing through several experiments. We compare several variations of type systems retrofitted onto JavaScript, and measuring the number of program locations with type errors reported in each case on a benchmark suite of over two hundred thousand lines of JavaScript code. We also report on using trace typing to validate and guide the design of a new retrofitted type system, whose purpose is to enable ahead-of-time compilation for JavaScript. Finally, we leverage the types computed by trace typing to automatically identify tag tests - dynamic checks that refine a type - and examine the variety of tests identified.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Esben</first_name>
          <last_name>Andreasen</last_name>
          <affiliation>Aarhus University</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://cs.au.dk/~esbena</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/esbenandreasen/6ad65be5-989c-453b-83cf-af26b10a0764/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Colin</first_name>
          <last_name>Gordon</last_name>
          <affiliation>Drexel University</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://cs.drexel.edu/~csgordon/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/colingordon/d373869e-7c3a-4a84-9e4e-d03f3606d5b3/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Satish</first_name>
          <last_name>Chandra</last_name>
          <affiliation>Samsung Research America</affiliation>
          <bio>Satish Chandra obtained a PhD from the University of Wisconsin-Madison in 1997, and a B.Tech from the Indian Institute of Technology-Kanpur in 1991, both in computer science. From 1997 to 2002, he was a member of technical staff at Bell Laboratories, where his research focused on program analysis, domain-specific languages, and data-communication protocols. From 2002 to 2013, he was a research staff member at IBM Research, where his research focused on bug finding and verification, software synthesis, and test automation. He joined Samsung Electronics in 2013, where he leads the advanced programming tools research team. He is an ACM Distinguished Scientist.</bio>
          <homepage_url>https://sites.google.com/site/schandraacmorg/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/satishchandra/6500e1d7-9e95-407e-880e-7448724e58b8/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Manu</first_name>
          <last_name>Sridharan</last_name>
          <affiliation>Samsung Research America</affiliation>
          <bio>I am a researcher at Samsung Research America in the area of programming languages and software engineering. I received my PhD from the University of California, Berkeley in 2007. My dissertation focused on refinement-based program analysis tools. Since then, I have done research on a variety of topics in static analysis, dynamic analysis, and software engineering. I worked at IBM Research from 2008–2013. A list of my publications is here; also see DBLP and my Google Scholar page.</bio>
          <homepage_url>http://manu.sridharan.net</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/manusridharan/afa0da7e-8685-4cce-a195-141adc9f2922/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>5</sort_key>
          <first_name>Frank</first_name>
          <last_name>Tip</last_name>
          <affiliation>Samsung Research America</affiliation>
          <bio>Frank Tip is a Principal Engineer in the Frontier Computer Science Lab at Samsung Research America in San Jose, California and an Adjunct Professor at the David R. Cheriton School of Computer Science at the University of Waterloo. Previously, he was a Professor and Cheriton Research Chair in the David R. Cheriton School of Computer Science at the University of Waterloo (2012-2014), and a Research Staff Member and Manager at the Software Technology Department at the IBM T.J. Watson Research Center (1995-2012). He received his PhD in 1995 from the University of Amsterdam.</bio>
          <homepage_url>http://www.franktip.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/franktip/d5a8b37b-b602-4198-bbca-ac4e6215ee58/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>6</sort_key>
          <first_name>Koushik</first_name>
          <last_name>Sen</last_name>
          <affiliation>University of California, Berkeley</affiliation>
          <bio>Koushik Sen is an associate professor in the Department of Electrical Engineering and Computer Sciences at the University of California, Berkeley. His research interest lies in Software Engineering, Programming Languages, and Formal methods. He is interested in developing software tools and methodologies that improve programmer productivity and software quality. He is best known for his work on “DART: Directed Automated Random Testing” and concolic testing. He has received a NSF CAREER Award in 2008, a Haifa Verification Conference (HVC) Award in 2009, a IFIP TC2 Manfred Paul Award for Excellence in Software: Theory and Practice in 2010, a Sloan Foundation Fellowship in 2011, a Professor R. Narasimhan Lecture Award in 2014, and an Okawa Foundation Research Grant in 2015. He has won several ACM SIGSOFT Distinguished Paper Awards. He received the C.L. and Jane W-S. Liu Award in 2004, the C. W. Gear Outstanding Graduate Award in 2005, and the David J. Kuck Outstanding Ph.D. Thesis Award in 2007, and a Distinguished Alumni Educator Award in 2014 from the UIUC Department of Computer Science. He holds a B.Tech from Indian Institute of Technology, Kanpur, and M.S. and Ph.D. in CS from University of Illinois at Urbana-Champaign.</bio>
          <homepage_url>http://srl.cs.berkeley.edu/~ksen/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/koushiksen/acb915fb-8e52-49dc-973e-eb9172c3d462/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>b35925e1-c8cf-4b5b-a1ea-1cf154efaa75</slot_id>
      <title>LJGS: Gradual Security Types for Object-Oriented Languages</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/21</date>
      <start_time>13:45</start_time>
      <end_time>14:10</end_time>
      <description>LJGS is a lightweight Java core calculus with a gradual security type system. The calculus guarantees secure information flow for sequential, class-based, object-oriented programming with mutable objects and virtual method calls. An LJGS program is composed of fragments that are checked either statically or dynamically. Statically checked fragments adhere to a security type system so that they incur no run-time penalty whereas dynamically checked fragments rely on run-time security labels. The programmer marks the boundaries between static and dynamic checking with casts so that it is always clear whether a program fragment requires run-time checks. LJGS requires security annotations on fields and methods. A field annotation either specifies a fixed static security level or it prescribes dynamic checking. A method annotation specifies a constrained polymorphic security signature. The types of local variables in method bodies are analyzed flow-sensitively and require no annotation. The dynamic checking of fields relies on a static points-to analysis to approximate implicit flows. We prove type soundness and non-interference for LJGS.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Luminous</first_name>
          <last_name>Fennell</last_name>
          <affiliation>University of Freiburg, Germany</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Peter</first_name>
          <last_name>Thiemann</last_name>
          <affiliation>University of Freiburg</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www2.informatik.uni-freiburg.de/~thiemann/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/peterthiemann/70f54421-3a29-4c8e-b261-9849ef81afd7/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>7c0d9a9c-a654-4c9f-9608-c0338e380f4e</subevent_id>
    <title>Research Track: Session 1</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/20</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-papers</url>
    <url_link_display>Research Track</url_link_display>
    <tracks>
      <track>Research Track</track>
    </tracks>
    <timeslot>
      <slot_id>0315005d-b980-48d6-b385-a8248e151c09</slot_id>
      <title>Awards</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/20</date>
      <start_time>11:45</start_time>
      <end_time>12:00</end_time>
      <description>undefined</description>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>a0c891ac-c62c-4103-ad4c-6e2761a106fa</slot_id>
      <title>Magic with Dynamo – Flexible Cross-Component Linking for Java with Invokedynamic</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/20</date>
      <start_time>11:20</start_time>
      <end_time>11:45</end_time>
      <description>Modern software systems are not built from scratch. They use functionality provided by libraries. These libraries evolve and often upgrades are deployed without the systems being recompiled. In Java, this process is particularly error-prone due to the mismatch between source and binary compatibility, and the lack of API stability in many popular libraries. We propose a novel approach to mitigate this problem based on the use of invokedynamic instructions for cross-component method invocations. The dispatch mechanism of invokedynamic is used to provide on-the-fly signature adaptation. We show how this idea can be used to construct a Java compiler that produces more resilient byte code. We present the dynamo compiler, a proof-of-concept implemented as javac post compiler, and evaluate our approach using several benchmark examples and two case studies showing how the use of the dynamo compiler can prevent certain types of linkage and stack overflow errors that have been observed in real-world systems.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Kamil</first_name>
          <last_name>Jezek</last_name>
          <affiliation>University of West Bohemia, Pilsen, CZ</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/kamiljezek/6591b741-9039-4f8b-9b2f-496e0c370d20/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Jens</first_name>
          <last_name>Dietrich</last_name>
          <affiliation>Massey University, New Zealand</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://sites.google.com/site/jensdietrich/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jensdietrich/ab54c290-4f44-4d77-9842-cdc18922d7b4/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>c6959038-a7a4-4c63-9033-ee273baff03d</slot_id>
      <title>Higher-Order Demand-Driven Program Analysis</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/20</date>
      <start_time>10:30</start_time>
      <end_time>10:55</end_time>
      <description>We explore a novel approach to higher-order program analysis which brings ideas of on-demand lookup from first-order CFL-reachability program analyses to higher-order programs. The analysis needs to produce only a control-flow graph; it can derive all other information including values of variables directly from the graph. Several challenges had to be overcome, including how to build the control-flow graph on-the-fly and how to deal with nonlocal variables in functions. The resulting analysis is flow- and context-sensitive with a provable polynomial-time bound. The analysis is formalized and proved correct and terminating, and an initial implementation is described.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Zachary</first_name>
          <last_name>Palmer</last_name>
          <affiliation>Swarthmore College</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://cs.swarthmore.edu/~zpalmer/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/zacharypalmer/80334ed8-062a-448f-be15-336f1d834018/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Scott F.</first_name>
          <last_name>Smith</last_name>
          <affiliation>The Johns Hopkins University</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>f038e386-4d48-4763-9405-2eaf600281a0</slot_id>
      <title>Interprocedural Type Specialization of JavaScript Programs Without Type Analysis</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/20</date>
      <start_time>10:55</start_time>
      <end_time>11:20</end_time>
      <description>Previous work proposed lazy basic block versioning, a technique for just-in-time compilation of dynamic languages which we believe represents an interesting point in the design space. Basic block versioning is simple to implement, simple enough that a single developer can build a complete just-in-time compiler for JavaScript in a year, yet it performs surprisingly well as it propagates context-sensitive type information to generate type-specialized code on-the-fly. In this paper, we demonstrate that lazy basic block versioning can be extended in simple ways to propagate type information across function call boundaries. This gives some of the benefits of whole-program analysis, or a tracing compiler, without having to implement the machinery for either. We have implemented this proposal in the Higgs JavaScript virtual machine and report on the empirical evaluation of this system on a set of industry standard benchmarks. We are able to eliminate 94.3% of dynamic type tests on average, which we show is more than what is achievable with any static whole-program type analysis.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Maxime</first_name>
          <last_name>Chevalier-Boisvert</last_name>
          <affiliation>University of Montreal</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://pointersgonewild.com/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/maximechevalierboisvert/f261df22-6ef1-4d94-91f0-33444d486bb4/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Marc</first_name>
          <last_name>Feeley</last_name>
          <affiliation>Université de Montréal</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.iro.umontreal.ca/~feeley/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/marcfeeley/e7d31a6c-9e51-4735-8c89-58530982dac8/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>7a09685d-9cdf-4119-a3de-c659927d1f23</subevent_id>
    <title>Research Track: DN Talk</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/22</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-papers</url>
    <url_link_display>Research Track</url_link_display>
    <tracks>
      <track>Research Track</track>
    </tracks>
    <timeslot>
      <slot_id>d3ddcade-346a-453a-a18b-a35694cb8ea6</slot_id>
      <title>Synthesis and Verification for All (Junior DN Prize Lecture)</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/22</date>
      <start_time>09:00</start_time>
      <end_time>10:00</end_time>
      <description>Automatic programming is the ultimate programmer’s dream: the programmer specifies what he wants (e.g., a sorting procedure), and the computer produces a program (e.g., the merge sort) that captures his intent. Realizing this dream requires the computer to synthesize an implementation and to verify its correctness—two tasks that are unachievable in a world of arbitrary programs and specifications. But in a finite world, which bounds the size of program executions and inputs, both synthesis and verification become search problems, mechanizable by reduction to satisfiability solving. 
Yet building practical verification or synthesis tools is no easy task, even with the availability of high-performance solvers. Real applications require the underlying solver to explore astronomically large search spaces while looking for an implementation that satisfies a given specification (synthesis) or a program state that violates it (verification). As a result, straightforward reductions to satisfiability seldom scale in practice, and it takes months or years of expert work to build a practical tool for a new application domain.
In this talk, I will describe some of the solver-aided tools I have built over the years, the lessons I learned from these experiences, and their reflection in my current work on solver-aided languages. To successfully navigate massive search spaces, a tool needs to employ clever encodings and efficient code, but above all, it must expose the right abstractions. The right abstraction enables the tool’s client, be it a programmer or another tool, to provide domain-specific knowledge that can exponentially accelerate the underlying search. This acceleration, in turn, makes it possible to synthesize and verify real programs in a wide variety of application domains, from safety-critical software to router configuration to K-12 education. When such abstractions are built into a programming language, these benefits carry over to the task of creating the tools themselves, making it possible for every programmer to realize his own dream of automatic programming.</description>
      <persons>
        <person>
          <role>Presenter</role>
          <sort_key>1</sort_key>
          <first_name>Emina</first_name>
          <last_name>Torlak</last_name>
          <affiliation>University of Washington</affiliation>
          <bio>Emina Torlak is an Assistant Professor at the University of Washington, working at the intersection of programming languages, formal methods, and software engineering. She received her Bachelors (2003), Masters (2004), and Ph.D. (2009) degrees from MIT, and subsequently worked at IBM Research, LogicBlox, and as a research scientist at U.C. Berkeley. Her research aims to help people create better software more easily. As part of this agenda, she develops new languages and tools for computer-aided design, verification, and synthesis of software. Emina is the creator of the Kodkod constraint solver, which has been used in over 70 academic and industrial tools for software engineering. Her current work integrates constraint solvers into the Rosette programming language, which enables easy creation of solver-based tools for all kinds of systems, from radiotherapy machines to automated algebra tutors. Emina is a Sloan Research Fellow (2016) and a recepient of the AITO Dahl-Nygaard Junior Prize (2016).</bio>
          <homepage_url>http://people.csail.mit.edu/emina/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/eminatorlak/e32cf5a6-837c-42ed-9b8f-5a179d4d3a36/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>8e283fce-6e32-4f5a-b7d0-147511c61420</subevent_id>
    <title>Research Track: Session 2</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/20</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-papers</url>
    <url_link_display>Research Track</url_link_display>
    <tracks>
      <track>Research Track</track>
    </tracks>
    <timeslot>
      <slot_id>1f84e4e8-e001-4bf5-ad52-8da191d5bfac</slot_id>
      <title>C++ const and Immutability: An Empirical Study of Writes-Through-const</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/20</date>
      <start_time>13:45</start_time>
      <end_time>14:10</end_time>
      <description>The ability to specify immutability in a programming language is a powerful tool for developers, enabling them to better understand and more safely transform their code without fearing unintended changes to program state. The C++ programming language allows developers to specify a form of immutability using the const keyword. In this work, we characterize the meaning of the C++ const qualifier and present the ConstSanitizer tool, which dynamically verifies a stricter form of immutability than that defined in C++: it identifies const uses that are either not consistent with transitive immutability, that write to mutable fields, or that write to formerly-const objects whose const`-ness has been cast away.
We evaluate a set of 7 C++ benchmark programs to find writes-through-const, establish root causes for how they fail to respect our stricter definition of immutability, and assign attributes to each write (namely: synchronized, not visible, buffer/cache, delayed initialization, and incorrect). ConstSanitizer finds 17 archetypes for writes in these programs which do not respect our version of immutability. Over half of these seem unnecessary to us. Our classification and observations of behaviour in practice contribute to the understanding of a widely-used C++ language feature.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Jonathan</first_name>
          <last_name>Eyolfson</last_name>
          <affiliation>University of Waterloo</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://eyl.io/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jonathaneyolfson/9aed800d-9a09-4939-bf54-62205e458bd8/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Patrick</first_name>
          <last_name>Lam</last_name>
          <affiliation>University of Waterloo, Canada</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://patricklam.ca</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/patricklam/b7e6157b-2048-4606-b269-987a08722ba2/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>33a6c6e8-fe33-4f2a-b3c8-ba18e85b29d3</slot_id>
      <title>Towards Ontology-Based Program Analysis</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/20</date>
      <start_time>14:35</start_time>
      <end_time>15:00</end_time>
      <description>Program analysis is fundamental for program optimizations, debugging, and many other tasks. But developing program analyses has been a challenging and error-prone process for general users. Declarative program analysis has shown the promise to dramatically improve the productivity in the development of program analyses. Current declarative program analysis is however subject to some major limitations in supporting cooperations among analysis tools, guiding program optimizations, and often requires much effort for repeated program preprocessing. In this work, we advocate the integration of ontology into declarative program analysis. As a way to standardize the definitions of concepts in a domain and the representation of the knowledge in the domain, ontology offers a promising way to address the limitations of current declarative program analysis. We develop a prototype framework named PATO for conducting program analysis upon ontology-based program representation. Experiments on six program analyses confirm the potential of ontology for complementing existing declarative program analysis. It supports multiple analyses without separate program preprocessing, promotes cooperative Liveness analysis between two compilers, and effectively guides a data placement optimization for Graphic Processing Units (GPU).</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Yue</first_name>
          <last_name>Zhao</last_name>
          <affiliation>NCSU</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Guoyang</first_name>
          <last_name>Chen</last_name>
          <affiliation>undefined</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Chunhua</first_name>
          <last_name>Liao</last_name>
          <affiliation>LLNL</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Xipeng</first_name>
          <last_name>Shen</last_name>
          <affiliation>NCSU</affiliation>
          <bio>Xipeng Shen is an associate professor at the Computer Science Department, North Carolina State University (NCSU). He has been an IBM Canada CAS Research Faculty Fellow since 2010, and a receipt of the 2010 NSF CAREER Award, 2011 DOE Early Career Award, and 2015 Google Faculty Research Award. Before joining NCSU, he was an Adina Allen Term Distinguished Associate Professor at the College of William and Mary.</bio>
          <homepage_url>http://people.engr.ncsu.edu/xshen5/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/xipengshen/0df8882b-75f4-4ad4-aa03-8216260442e4/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>a8f0e0a6-3918-4596-946d-4b51253f2f13</slot_id>
      <title>Formal Language Recognition with the Java Type Checker</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/20</date>
      <start_time>14:10</start_time>
      <end_time>14:35</end_time>
      <description>This paper is a theoretical study of practical problem: the automatic generation of Java Fluent APIs from their specification. We explain why the problem’s core lies with the expressive power of Java generics. Our main result is that automatic generation is possible whenever the specification is an instance of the set of deterministic context-free languages, a set which contains most practical languages. Other contributions include a collection of techniques and idioms o the limited meta-programming possible with Java generics, and an empirical measurement demonstrating that the runtime of the ``javac’’ compiler of Java the may be exponential in the program’s length, even for programs composed of a handful of lines and which do not rely on overly complex use of generics.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Yossi</first_name>
          <last_name>Gill</last_name>
          <affiliation>Israel Institute of Technology</affiliation>
          <bio>I am an Associate Professor in the Department of Computer Science at Technion - Israel Institute of Technology, Israel.
Research Interests: Software engineering, in particular: aspects related to the object-oriented paradigm, programming languages and parsing.</bio>
          <homepage_url>http://www.cs.technion.ac.il/~yogi/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/yossigill/39acc62e-1b7f-48c1-a488-421e3565bdb2/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Tomer</first_name>
          <last_name>Levy</last_name>
          <affiliation>Technion – Israel Institute of Technology</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>f889b068-1dc8-4ce0-bf24-79353d94cae4</subevent_id>
    <title>Research Track: Session 6</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/21</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-papers</url>
    <url_link_display>Research Track</url_link_display>
    <tracks>
      <track>Research Track</track>
    </tracks>
    <timeslot>
      <slot_id>389f9fa6-8d5e-4a24-8842-d21eafad0aea</slot_id>
      <title>Object Inheritance without Classes</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/21</date>
      <start_time>15:30</start_time>
      <end_time>15:55</end_time>
      <description>Which comes first: the object or the class? Language designers enjoy the conceptual simplicity of object-based languages (such as Emerald or Self) while many programmers prefer the pragmatic utility of classical inheritance (such as Simula and Java). Programmers in object-based languages have a tendency to build libraries to support traditional inheritance, and language implementations are often contorted to the same end. In this paper, we revisit the relationship between classes and objects. We model various kinds of inheritance in the context of an object-oriented language whose objects are not defined by classes, and explain why class inheritance and initialisation cannot be easily modelled purely by delegation.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Timothy</first_name>
          <last_name>Jones</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>Programming languages PhD student at VUW working on Grace.</bio>
          <homepage_url>http://homepages.ecs.vuw.ac.nz/~tim</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/timothyjones/2f3ecea2-e161-41ad-842c-d2457b2eebaa/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Michael</first_name>
          <last_name>Homer</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://ecs.vuw.ac.nz/~mwh</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/michaelhomer/d0f1e3dc-74d6-4562-b07c-8e27e5cae71b/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>James</first_name>
          <last_name>Noble</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>James Noble is Professor of Computer Science and Software Engineering at Victoria University of Wellington, New Zealand. James has B.Sc(Hons) and Ph.D. degrees, both from VUW, completed in 1997. After leaving VUW, James worked in Sydney, first at the University of Technology, Sydney, and then at the Microsoft Research Institute, Macquarie University. James returned to VUW as a lecturer in late 1999, just in time to avoid the predicted end of the world.
James’s research centres around software design. This includes the design of the users’ interface, the parts of software that users have to deal with every day, and the programmers’ interface, the internal structures and organisations of software that programmers see only when they are designing, building, or modifying software. His research in both of these areas is coloured by my longstanding interest in object oriented approaches to design, and topics he has studies range from aliasing and object ownership, design patterns, agile methodology, via usability, visualisation and computer music, to postmodernism and the semiotics of programming.</bio>
          <homepage_url>http://homepages.mcs.vuw.ac.nz/~kjx/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jamesnoble/6f993a92-503e-44c6-9bbb-bfd05bf4ed23/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Kim</first_name>
          <last_name>Bruce</last_name>
          <affiliation>Pomona College</affiliation>
          <bio>Kim B. Bruce has been Reuben C. and Eleanor Winslow Professor of Computer Science at Pomona College since the summer of 2005. He is the Frederick Latimer Wells Professor of Computer Science emeritus at Williams College, where he taught for 28 years. His first position out of graduate school was as an instructor in Mathematics at Princeton University from 1975 to 1977. His research program was originally in the model theory of languages with generalized quantifiers, but his interests turned to programming languages after his stay at M.I.T. His research focus evolved from models of the polymorphic lambda calculus to the study of semantics and type theory. This led to his continuing work in the design of object-oriented languages. His most recent research project involves the design of a new language, Grace, designed for use in the first two years of Computer Science education.</bio>
          <homepage_url>http://www.cs.pomona.edu/~kim/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/kimbruce/75d65698-aaf4-4173-88cc-4a4ddbaefe1f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>bdf64500-8f49-4ebb-9b00-44c9817e2288</slot_id>
      <title>Program Tailoring: Slicing by Sequential Criteria</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/21</date>
      <start_time>15:55</start_time>
      <end_time>16:20</end_time>
      <description>Protocol and typestate analyses often report some sequences of statements ending at a program point P that needs to be scrutinized, since P may be erroneous or imprecisely analyzed. Program slicing focuses only on the behavior at P by computing a slice of the program affecting the values at P. In this paper, we propose to restrict our attention to the subset of that behavior at P affected by one or several statement sequences, called a sequential criterion (SC). By leveraging the ordering information in a SC, e.g., the temporal order in a few valid/invalid API method invocation sequences, we introduce a new technique, program tailoring, to compute a tailored program that comprises the statements in all possible execution paths passing through at least one sequence in SC in the given order. With a prototyping implementation, Tailor, we show why tailoring is practically useful by conducting two case studies on seven large real-world Java applications. For program debugging and understanding, Tailor can complement program slicing by removing SC-irrelevant statements. For program analysis, Tailor can enable a pointer analysis, which is unscalable to a program, to perform a more focused and therefore potentially scalable analysis to its specific parts containing hard language features such as reflection.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Yue</first_name>
          <last_name>Li</last_name>
          <affiliation>UNSW Australia</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.cse.unsw.edu.au/~yueli/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/yueli/9deb7139-2e62-4b48-a44d-4aac87fbecf8/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Tian</first_name>
          <last_name>Tan</last_name>
          <affiliation>UNSW Australia</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.cse.unsw.edu.au/~tiantan</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/tiantan/5d4e4f09-af53-4247-afa6-5de377d6b138/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Yifei</first_name>
          <last_name>Zhang</last_name>
          <affiliation>UNSW Australia</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.cse.unsw.edu.au/~yzhang/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/yifeizhang/170594e1-233f-4492-bf5c-bd4f9ba8c6e7/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Jingling</first_name>
          <last_name>Xue</last_name>
          <affiliation>UNSW Australia</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.cse.unsw.edu.au/~jingling/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jinglingxue/4494c516-6e22-408f-aa7e-f610026290c2/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>f6276725-e779-4048-8ffb-c211702a880c</slot_id>
      <title>Scopes Describe Frames: A Uniform Model for Memory Layout in Dynamic Semantics</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/21</date>
      <start_time>16:20</start_time>
      <end_time>16:45</end_time>
      <description>Semantic specifications do not make a systematic connection between the names and scopes in the static structure of a program and memory layout, and access during its execution. In this paper, we introduce a systematic approach to the alignment of names in static semantics and memory in dynamic semantics, building on the scope graph framework for name resolution. We develop a uniform memory model consisting of frames that instantiate the scopes in the scope graph of a program. This provides a language-independent correspondence between static scopes and run-time memory layout, and between static resolution paths and run-time memory access paths. The approach scales to a range of binding features, supports straightforward type soundness proofs, and provides the basis for a language-independent specification of sound reachability-based garbage collection.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Casper</first_name>
          <last_name>Bach Poulsen</last_name>
          <affiliation>TU Delft</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://casperbp.net</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/casperbachpoulsen/2cddd6a9-d920-4f73-9fcf-f4d9462eb0e3/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Pierre</first_name>
          <last_name>Neron</last_name>
          <affiliation>French Network and Information Security Agency (ANSSI)</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/pierreneron/bba8f085-6296-4767-bfdd-1d80a1a3c9d3/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Andrew</first_name>
          <last_name>Tolmach</last_name>
          <affiliation>Portland State University</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.cs.pdx.edu/~apt</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/andrewtolmach/b38b75b5-46f8-42c2-adf0-780715d233c0/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Eelco</first_name>
          <last_name>Visser</last_name>
          <affiliation>Delft University of Technology</affiliation>
          <bio>Eelco Visser is Antoni van Leeuwenhoek Professor of Computer Science at Delft University of Technology. He received a master’s and doctorate in computer science from the University of Amsterdam in 1993 and 1997, respectively. Previously he served as postdoc at the Oregon Graduate Institute, as Assistant Professor at Utrecht University, and as Associate Professor at TU Delft.
His research interests include programming languages, software language engineering, domain-specific programming languages, program transformation, software security, and interaction design. With his students he has designed and implemented the Spoofax language workbench, as well as many domain-specific languages, including DSLs for syntax definition (SDF), program transformation (Stratego), software deployment (Nix), web application development (WebDSL), and mobile phone applications (mobl). He is the lead developer of the researchr bibliography management system and the WebLab learning management system.</bio>
          <homepage_url>http://eelcovisser.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/eelcovisser/9f5c00bc-90ba-4aba-b5bf-9fc9085cbe1f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>8d27a87d-26f9-4f9c-af43-f8b960578687</subevent_id>
    <title>Research Track: Session 7</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/22</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-papers</url>
    <url_link_display>Research Track</url_link_display>
    <tracks>
      <track>Research Track</track>
    </tracks>
    <timeslot>
      <slot_id>104a9183-8a53-4d79-9bb4-603cd41409fd</slot_id>
      <title>Reference Capabilities for Concurrency Control</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/22</date>
      <start_time>11:20</start_time>
      <end_time>11:45</end_time>
      <description>The proliferation of shared mutable state in object-oriented programming complicates software development as two seemingly unrelated operations may interact via an alias and produce unexpected results. In concurrent programming this manifests itself as data-races. Concurrent object-oriented programming suffers from the fact that code that warrants synchronisation cannot easily be distinguished from code that does not. The burden is placed solely on the programmer to reason about alias freedom, sharing across threads and side-effects to deduce where and when to apply concurrency control, without inadvertently blocking parallelism. This paper presents a reference capability approach to concurrent and parallel object-oriented programming where all uses of aliases are guaranteed to be data-race free. Locations’ static types describe their possible sharing. Type information can express non-interfering deterministic parallelism without dynamic concurrency control, thread-locality, lock-based schemes, and guarded-by relations giving multi-object atomicity to nested data structures. Unification of capabilities and traits allows trait-reuse across multiple concurrency scenarios with minimal code duplication. The resulting system brings together features from a wide range of prior work in a unified way.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Elias</first_name>
          <last_name>Castegren</last_name>
          <affiliation>Uppsala University</affiliation>
          <bio>I am a PhD student working with capability type systems for concurrent and parallel object oriented programming. My advisor is Tobias Wrigstad</bio>
          <homepage_url>http://www.it.uu.se/katalog/elica697</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/eliascastegren/aecb1ac3-b069-40d5-b121-c19b63182708/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Tobias</first_name>
          <last_name>Wrigstad</last_name>
          <affiliation>Uppsala University</affiliation>
          <bio>I am an associate professor at Department of Information Technology, Uppsala University, Uppsala, Sweden.</bio>
          <homepage_url>http://wrigstad.com</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/tobiaswrigstad/4abf5948-cecc-4d23-8806-261022caa110/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>838431ca-bcae-49e9-b541-40423612b83f</slot_id>
      <title>IceDust: Incremental and Eventual Computation of Derived Values in Persistent Object Graphs</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/22</date>
      <start_time>10:55</start_time>
      <end_time>11:20</end_time>
      <description>Derived values are values calculated from base values. They can be expressed in object-oriented languages by means of getters calculating the derived value, and in relational or logic databases by means of (materialized) views. However, switching to a different calculation strategy (for example caching) in object-oriented programming requires invasive code changes, and the databases limit expressiveness by disallowing recursive aggregation.
In this paper, we present IceDust, a data modeling language for expressing derived attribute values without committing to a calculation strategy. IceDust provides three strategies for calculating derived values in persistent object graphs: Calculate-on-Read, Calculate-on-Write, and Calculate-Eventually. We have developed a path-based abstract interpretation that provides static dependency analysis to generate code for these strategies. Benchmarks show that different strategies perform better in different scenarios. In addition we have conducted a case study that suggests that derived value calculations of systems used in practice can be expressed in IceDust.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Daco</first_name>
          <last_name>Harkes</last_name>
          <affiliation>Delft University of Technology</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/dacoharkes/fec5babc-7401-4a7e-8ba1-bcccbc523031/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Danny M.</first_name>
          <last_name>Groenewegen</last_name>
          <affiliation>Delft University of Technology</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Eelco</first_name>
          <last_name>Visser</last_name>
          <affiliation>Delft University of Technology</affiliation>
          <bio>Eelco Visser is Antoni van Leeuwenhoek Professor of Computer Science at Delft University of Technology. He received a master’s and doctorate in computer science from the University of Amsterdam in 1993 and 1997, respectively. Previously he served as postdoc at the Oregon Graduate Institute, as Assistant Professor at Utrecht University, and as Associate Professor at TU Delft.
His research interests include programming languages, software language engineering, domain-specific programming languages, program transformation, software security, and interaction design. With his students he has designed and implemented the Spoofax language workbench, as well as many domain-specific languages, including DSLs for syntax definition (SDF), program transformation (Stratego), software deployment (Nix), web application development (WebDSL), and mobile phone applications (mobl). He is the lead developer of the researchr bibliography management system and the WebLab learning management system.</bio>
          <homepage_url>http://eelcovisser.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/eelcovisser/9f5c00bc-90ba-4aba-b5bf-9fc9085cbe1f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>f8945e9e-1825-4f48-8221-f3d8b199ae63</slot_id>
      <title>Boomerang: Demand-Driven Flow- and Context-Sensitive Pointer Analysis for Java</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/22</date>
      <start_time>10:30</start_time>
      <end_time>10:55</end_time>
      <description>Many current program analyses require highly precise pointer information about small, targeted parts of a given program. This motivates the need for demand-driven pointer analyses that compute information only where required. Pointer analyses generally compute points-to sets of program variables or answer boolean alias queries. However, many client analyses require richer pointer information. For example, taint and typestate analyses often need to know the set of all aliases of a given variable under a certain calling context. With most current pointer analyses, clients must compute such information through repeated points-to or alias queries, increasing complexity and computation time for them. This paper presents Boomerang, a demand-driven, flow-, field-, and context-sensitive pointer analysis for Java programs. Boomerang computes rich results that include both the possible allocation sites of a given pointer (points-to information) and all pointers that can point to those allocation sites (alias information). For increased precision and scalability, clients can query Boomerang with respect to particular calling contexts of interest. Our experiments show that Boomerang is more precise than existing demand-driven pointer analyses. Additionally, using Boomerang, the taint analysis FlowDroid issues up to 29.4x fewer pointer queries compared to using other pointer analyses that return simpler pointer information. Furthermore, the search space of Boomerang can be significantly reduced by requesting calling contexts from the client analysis.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Johannes</first_name>
          <last_name>Späth</last_name>
          <affiliation>Fraunhofer SIT</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/johannesspath/d1badf6e-21bc-40b7-ad61-77db02919168/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Lisa</first_name>
          <last_name>Nguyen Quang Do</last_name>
          <affiliation>Fraunhofer IEM</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://de.linkedin.com/in/nguyenqdlisa/en</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/lisanguyenquangdo/ac17c0cc-4eb6-41f4-a45c-05593f05045f/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Karim</first_name>
          <last_name>Ali</last_name>
          <affiliation>TU Darmstadt</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://karimali.ca</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/karimali/f2959cbf-d957-4eaa-bc48-9af76e9eeca6/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Eric</first_name>
          <last_name>Bodden</last_name>
          <affiliation>Heinz Nixdorf Institut, Paderborn University and Fraunhofer IEM</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.bodden.de/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/ericbodden/a593f263-fe1e-4e20-b421-d874e9193993/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>70853eb2-7b23-4670-bbec-d7160573dc7b</subevent_id>
    <title>Research Track: Session 8</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/22</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-papers</url>
    <url_link_display>Research Track</url_link_display>
    <tracks>
      <track>Research Track</track>
    </tracks>
    <timeslot>
      <slot_id>3fb51d58-460c-438c-9e20-8723483ad295</slot_id>
      <title>Staccato: A Bug Finder for Dynamic Configuration Updates</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/22</date>
      <start_time>14:45</start_time>
      <end_time>15:10</end_time>
      <description>Modern software applications are highly configurable, allowing configuration options to be changed even during program execution. When dynamic configuration updating is implemented incorrectly, program errors can result. These program errors occur primarily when stale data—computed from old configurations—or inconsistent data—computed from different configurations—are used. We introduce Staccato, the first tool designed to detect these errors. Staccato uses a dynamic analysis in the style of taint analysis to find the use of stale configuration data in Java programs. It supports concurrent programs running on commodity JVMs. In some cases, Staccato can provide automatic bug avoidance and semi-automatic repair when errors occur.
We evaluated Staccato on 3 open-source applications that support complex reconfigurability. Staccato found multiple errors in all of them. Staccato requires only modest annotation overhead and has moderate performance overhead.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>John</first_name>
          <last_name>Toman</last_name>
          <affiliation>University of Washington</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Dan</first_name>
          <last_name>Grossman</last_name>
          <affiliation>University of Washington, USA</affiliation>
          <bio>Dan Grossman is a Professor in the Department of Computer Science &amp;amp; Engineering at the University of Washington where he has been a faculty member since 2003. He holds the J. Ray Bowen Professorship for Innovation in Engineering Education. He is his department’s Associate Chair for Education.
Dan completed his Ph.D. at Cornell University and his undergraduate studies at Rice University. His research interests lie in the area of programming languages, ranging from theory to design to implementation, with a focus on improving software quality. In recent years, he has focused on better techniques for expressing, analyzing, and executing multithreaded programs. He has collaborated actively with researchers in several other disciplines of computer science, particularly computer architecture on problems at the hardware/software interface including approximate programming.
Dan has served on roughly thirty conference and workshop program committees. He has served on the ACM SIGPLAN Executive Committee and the Steering Committee for the ACM / IEEE-CS 2013 Computer Science Curriculum. He currently serves on the CRA Board and the ACM Education Board.
Dan is the instructor for a popular MOOC on undergraduate topics in programming languages and functional programming.
Dan is the proud and obsessed father of two sons, born December 2013 and September 2015. Prior to that all-encompassing-change, Dan enjoyed playing (poorly) and watching ice hockey, (road) bicycling, hiking, non-fiction, and enjoying good food, beer, and live theatre. Now he usually manages to read one book a month. Dan lives with a dog that was born on the streets of Brazil. Dan has never had a cavity.</bio>
          <homepage_url>http://homes.cs.washington.edu/~djg/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/dangrossman/e95af5ee-ac81-4b5b-8fd6-fbb071f43be4/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>629ba3cd-358c-416f-b013-d6977200217c</slot_id>
      <title>Adjourn</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/22</date>
      <start_time>15:10</start_time>
      <end_time>15:20</end_time>
      <description>undefined</description>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>d639dd02-0b05-498b-8b1d-1c966ba2ebab</slot_id>
      <title>One Way to Select Many</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/22</date>
      <start_time>14:20</start_time>
      <end_time>14:45</end_time>
      <description>Selecting items from a collection is one of the most common tasks users perform with graphical user interfaces. Practically every application supports this task with a selection feature different from that of any other application. Defects are common, especially in manipulating selections of non-adjacent elements, and flexible selection features are often missing when they would clearly be useful. As a consequence, user effort is wasted. The loss of productivity is experienced in small doses, but all computer users are impacted. The undesirable state of support for multi-element selection prevails because the same selection features are redesigned and reimplemented repeatedly. This article seeks to establish common abstractions for multi-selection. It gives generic but precise meanings to selection operations and makes multi-selection reusable; a JavaScript implementation is described. Application vendors benefit because of reduced development effort. Users benefit because correct and consistent multi-selection becomes available in more contexts.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Jaakko</first_name>
          <last_name>Järvi</last_name>
          <affiliation>Texas A&amp;M University</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://parasol.tamu.edu/~jarvi/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jaakkojarvi/41c48e53-1928-4ff2-8f2d-56b9928d5f6e/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Sean</first_name>
          <last_name>Parent</last_name>
          <affiliation>Adobe Systems, Inc.</affiliation>
          <bio>undefined</bio>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>f7fc8f9a-0103-47b0-9579-48484083ad3c</slot_id>
      <title>Composing Interfering Abstract Protocols</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/22</date>
      <start_time>13:30</start_time>
      <end_time>13:55</end_time>
      <description>The undisciplined use of shared mutable state can be a source of program errors when aliases unsafely interfere with each other. While protocol-based techniques to reason about interference abound, they do not address two practical concerns: the decidability of protocol composition and its integration with protocol abstraction. We show that our composition procedure is decidable and that it ensures safe interference even when composing abstract protocols. To evaluate the expressiveness of our protocol framework for ensuring safe shared memory interference, we show how this same protocol framework can be used to model safe, typeful message-passing concurrency idioms.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Filipe</first_name>
          <last_name>Militão</last_name>
          <affiliation>Carnegie Mellon University &amp; Universidade Nova de Lisboa</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Jonathan</first_name>
          <last_name>Aldrich</last_name>
          <affiliation>Carnegie Mellon University</affiliation>
          <bio>Jonathan Aldrich is Associate Professor of Computer Science at Carnegie Mellon University. He is the director of CMU’s Ph.D. and undergraduate minor programs in Software Engineering, and teaches courses in programming languages, software engineering, and program analysis for quality and security. In addition, he serves as a consultant on architecture, design, and legal issues in the software industry. Dr. Aldrich joined the CMU faculty after completing a Ph.D. at the University of Washington and a B.S. at Caltech.
Dr. Aldrich’s research centers on programming languages and type systems that are deeply informed by software engineering considerations. His research contributions include verifying the correct implementation of an architectural design, modular formal reasoning about code, and API protocol specification and verification. For his work on software architecture, Aldrich received a 2006 NSF CAREER award and the 2007 Dahl-Nygaard Junior Prize, given annually for a significant technical contribution to object-oriented programming. Current areas of research focus include extensible programming languages, analysis and type systems for security and productivity, and foundations of object-oriented programming.</bio>
          <homepage_url>http://www.cs.cmu.edu/~aldrich/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jonathanaldrich/5ce0ecc9-71c5-44d2-91db-8ee048d1c046/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Luís</first_name>
          <last_name>Caires</last_name>
          <affiliation>FCT / Universidade Nova de Lisboa</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://ctp.di.fct.unl.pt/~lcaires/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/luiscaires/cc41dbba-b74e-41ee-90b1-d1e615408faf/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>fb8abb2f-df1f-4765-85a6-0601fc77288b</slot_id>
      <title>Fine-grained Language Composition: A Case Study</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/22</date>
      <start_time>13:55</start_time>
      <end_time>14:20</end_time>
      <description>Although run-time language composition is common, it normally takes the form of a crude Foreign Function Interface (FFI). While useful, such compositions tend to be coarse-grained and slow. In this paper we introduce a novel fine-grained syntactic composition of PHP and Python which allows users to embed each language inside the other, including referencing variables across languages. This composition raises novel design and implementation challenges. We show that good solutions can be found to the design challenges; and that the resulting implementation imposes an acceptable performance overhead of, at most, just over 2x.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Edd</first_name>
          <last_name>Barrett</last_name>
          <affiliation>King's College London</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://eddbarrett.co.uk/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/eddbarrett/182cdf91-a04a-4978-bfc7-12499b838a3e/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Carl Friedrich</first_name>
          <last_name>Bolz</last_name>
          <affiliation>King's College London </affiliation>
          <bio>I am researcher in Computer Science with Laurence Tratt as a member of the Software Development Team at King’s College London since 2013. I live in Hamburg. Before, I was at Hasso-Plattner-Institute Potsdam with Robert Hirschfeld and Heinrich-Heine-Universit&amp;auml;t D&amp;uuml;sseldorf with Michael Leuschel.
My main research interests are techniques for the efficient implementation of dynamic programming languages. I am interested in tracing JITs, optimizations, partial evaluation, particularly at runtime. I am a member of the Python Software Foundation.</bio>
          <homepage_url>http://cfbolz.de/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/carlfriedrichbolz/ef3ea68a-4eec-4490-95a3-6386f14eaa74/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Lukas</first_name>
          <last_name>Diekmann</last_name>
          <affiliation>King's College London</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/lukasdiekmann/a32795ba-90b8-421c-9491-6b5f71e3a6bf/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Laurence</first_name>
          <last_name>Tratt</last_name>
          <affiliation>King's College London</affiliation>
          <bio>I am a programmer and Reader in Software Development in the Department of Informatics at King’s College London where I lead the Software Development Team. I am an EPSRC Fellow. I co-founded Elbatrop.</bio>
          <homepage_url>http://tratt.net/laurie/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/laurietratt/e1b23f1a-fac9-4566-856c-a8fea953adb2/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>1db41464-5a52-42b1-8404-3f5e915c01a5</subevent_id>
    <title>Research Track: Session 3</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/20</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-papers</url>
    <url_link_display>Research Track</url_link_display>
    <tracks>
      <track>Research Track</track>
    </tracks>
    <timeslot>
      <slot_id>3365055a-b459-4a32-a3f7-401f4e3791d1</slot_id>
      <title>Transactional Tasks: Parallelism in Software Transactions</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/20</date>
      <start_time>16:20</start_time>
      <end_time>16:45</end_time>
      <description>Many programming languages, such as Clojure, Scala, and Haskell, support different concurrency models. In practice these models are often combined, however the semantics of the combinations are not always well-defined. In this paper, we study the combination of futures and Software Transactional Memory. Currently, futures created within a transaction cannot access the transactional state safely, violating the serializability of the transactions and leading to unexpected behavior. We define transactional tasks: a construct that allows futures to be created in transactions. Transactional tasks allow the parallelism in a transaction to be exploited, while providing safe access to the state of their encapsulating transaction. We show that transactional tasks have several useful properties: they are coordinated, they maintain serializability, and they do not introduce non-determinism. As such, transactional tasks combine futures and Software Transactional Memory, allowing the potential parallelism of a program to be fully exploited, while preserving the properties of the separate models where possible.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Janwillem</first_name>
          <last_name>Swalens</last_name>
          <affiliation>Vrije Universiteit Brussel</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Joeri</first_name>
          <last_name>De Koster</last_name>
          <affiliation>Vrije Universiteit Brussel</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://soft.vub.ac.be/soft/members/jdekoste</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/joeridekoster/60c553e5-02bb-408d-9e8f-b3ca014fa962/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Wolfgang</first_name>
          <last_name>De Meuter</last_name>
          <affiliation>Vrije Universiteit Brussel</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://soft.vub.ac.be/soft/members/wdmeuter</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/wolfgangdemeuter/331349b2-02a4-453b-8a40-0facac5a29e6/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>d3653069-2748-4e79-b63f-c28881bba69e</slot_id>
      <title>Making an Embedded DBMS JIT-friendly</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/20</date>
      <start_time>15:30</start_time>
      <end_time>15:55</end_time>
      <description>While DataBase Management Systems (DBMSs) are highly optimized, interactions across the Programming Language (PL) / DBMS boundary are costly, even for in-process embedded DBMSs. In this paper we show that programs that interact with the widely-used embedded DBMS SQLite can be significantly optimized – by a factor of 3.4 in our benchmarks – by inlining across the PL / DBMS boundary. We achieved this speed-up by replacing parts of SQLite’s C interpreter with RPython code and composing the resulting meta-tracing VM – called SQPyte – with the PyPy VM. SQPyte does not compromise stand-alone SQL performance: it is 2.2% faster than SQLite on the widely used TPC-H benchmark suite.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Carl Friedrich</first_name>
          <last_name>Bolz</last_name>
          <affiliation>King's College London </affiliation>
          <bio>I am researcher in Computer Science with Laurence Tratt as a member of the Software Development Team at King’s College London since 2013. I live in Hamburg. Before, I was at Hasso-Plattner-Institute Potsdam with Robert Hirschfeld and Heinrich-Heine-Universit&amp;auml;t D&amp;uuml;sseldorf with Michael Leuschel.
My main research interests are techniques for the efficient implementation of dynamic programming languages. I am interested in tracing JITs, optimizations, partial evaluation, particularly at runtime. I am a member of the Python Software Foundation.</bio>
          <homepage_url>http://cfbolz.de/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/carlfriedrichbolz/ef3ea68a-4eec-4490-95a3-6386f14eaa74/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Darya</first_name>
          <last_name>Kurilova</last_name>
          <affiliation>Carnegie Mellon University</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.cs.cmu.edu/~dkurilov/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/daryakurilova/dd1aba2a-1ed3-43a6-ae6e-b9905a5a8bc2/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Laurence</first_name>
          <last_name>Tratt</last_name>
          <affiliation>King's College London</affiliation>
          <bio>I am a programmer and Reader in Software Development in the Department of Informatics at King’s College London where I lead the Software Development Team. I am an EPSRC Fellow. I co-founded Elbatrop.</bio>
          <homepage_url>http://tratt.net/laurie/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/laurietratt/e1b23f1a-fac9-4566-856c-a8fea953adb2/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>d83d264c-8ed7-43a4-b677-77f95cf546fe</slot_id>
      <title>QL: Object-oriented Queries on Relational Data</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/20</date>
      <start_time>15:55</start_time>
      <end_time>16:20</end_time>
      <description>This paper describes QL, a language for querying complex, potentially recursive data structures. QL compiles to Datalog and runs on a standard relational database, yet it provides familiar-looking object-oriented features such as classes and methods, reinterpreted in logical terms: classes are logical properties describing sets of values, subclassing is implication, and virtual calls are dispatched dynamically by considering the most specific classes containing the receiver. Furthermore, types in QL are prescriptive and actively influence program evaluation rather than just describing it. In combination, these features enable the development of concise queries based on reusable libraries, which are written in a purely declarative style, yet can be efficiently executed even on very large data sets. In particular, we have used QL to implement static analyses for various programming languages, which scale to millions of lines of code.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Pavel</first_name>
          <last_name>Avgustinov</last_name>
          <affiliation>Semmle</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Oege</first_name>
          <last_name>de Moor</last_name>
          <affiliation>Semmle</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Michael Peyton</first_name>
          <last_name>Jones</last_name>
          <affiliation>Semmle</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Max</first_name>
          <last_name>Schaefer</last_name>
          <affiliation>Semmle</affiliation>
          <bio>I am a research engineer at Semmle Ltd. in Oxford. Previously, I was an assistant professor at the School of Computer Engineering of Nanyang Technological University in Singapore; a post-doctoral researcher at IBM T.J. Watson Research Center in New York; and a PhD student at the Department of Computer Science of Oxford University.</bio>
          <homepage_url>http://xiemaisi.github.io</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/maxschaefer/ca389fb8-7947-4c7b-ac76-e3f1f072ceaf/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>9e2310db-b905-4276-8d41-988a21168ce6</subevent_id>
    <title>Research Track: Invited Talk</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/20</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-papers</url>
    <url_link_display>Research Track</url_link_display>
    <tracks>
      <track>Research Track</track>
    </tracks>
    <timeslot>
      <slot_id>4c2fcc0d-89fd-424f-a55f-255b03400b02</slot_id>
      <title>Welcome address</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/20</date>
      <start_time>08:45</start_time>
      <end_time>09:00</end_time>
      <description>undefined</description>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>fa6c5a2c-7e3f-4162-97a0-24a6b3a4e63d</slot_id>
      <title>The Elements of Decision Alignment: Large programs as complex organizations</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/20</date>
      <start_time>09:00</start_time>
      <end_time>10:00</end_time>
      <description>When one object makes a request of another, why do we expect that the second object’s behavior correctly satisfies the first object’s request? The need to cope with such principal-agent problems shapes programming practice as much as it shapes human organizations and economies. However, the literature about such plan coordination issues among humans is almost disjoint from the literature about these issues among objects. Even the terms used are unrelated.
Instead, these fields have much to learn from each other—both from their similarities and from the causes of their differences. We propose a framework for thinking about decision alignment as a bridge between these disciplines.</description>
      <persons>
        <person>
          <role>Presenter</role>
          <sort_key>1</sort_key>
          <first_name>Mark</first_name>
          <last_name>Miller</last_name>
          <affiliation>Google Inc.</affiliation>
          <bio>Mark S. Miller is the main designer of the E and Dr. SES distributed object-capability programming languages, inventor of Miller Columns, a pioneer of agoric (market-based secure distributed) computing, an architect of the Xanadu hypertext publishing system, a representative to the EcmaScript committee, and one of Yedalog’s creators.</bio>
          <homepage_url>http://research.google.com/pubs/author35958.html</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/markmiller/64622953-ab96-4f03-ade5-4ed19b244771/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>9b0e47d7-64eb-4d28-b653-e96936365a19</subevent_id>
    <title>Research Track: Session 4</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/21</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-papers</url>
    <url_link_display>Research Track</url_link_display>
    <tracks>
      <track>Research Track</track>
    </tracks>
    <timeslot>
      <slot_id>0c26c3fc-c779-41a7-8dbf-14c776d7c369</slot_id>
      <title>A Calculus for Variational Programming</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/21</date>
      <start_time>10:30</start_time>
      <end_time>10:55</end_time>
      <description>Variation is ubiquitous in software. Many applications can benefit from making this variation explicit, then manipulating and computing with it directly—a technique we call “variational programming”. This idea has been independently discovered in several application domains, such as efficiently analyzing and verifying software product lines, combining bounded and symbolic model-checking, and computing with alternative privacy profiles. Although these domains share similar core problems, and there are also many similarities in the solutions, there is no dedicated programming language support for variational programming. This makes the various implementations tedious, prone to errors, hard to maintain and reuse, and difficult to compare. In this paper we present a calculus that forms the basis of a programming language with explicit support for representing, manipulating, and computing with variation in programs and data. We illustrate how such a language can simplify the implementation of variational programming tasks. We present the syntax and semantics of the core calculus, a sound type system, and a type inference algorithm that produces principal types.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Sheng</first_name>
          <last_name>Chen</last_name>
          <affiliation>University of Louisiana at Lafayette</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://sciences.louisiana.edu/node/147</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/shengchen/3a19723e-4509-46a1-8368-d4341219eb40/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Martin</first_name>
          <last_name>Erwig</last_name>
          <affiliation>Oregon State University</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://web.engr.oregonstate.edu/~erwig/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/martinerwig/dfe4f738-b2df-4037-a60e-036123594ef1/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Eric</first_name>
          <last_name>Walkingshaw</last_name>
          <affiliation>Oregon State University</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://web.engr.oregonstate.edu/~walkiner/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/ericwalkingshaw/9d21e6d5-d09c-457f-be22-cbc041f94b1e/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>b892f587-c924-4a2e-a3c2-b6befe951f16</slot_id>
      <title>A Calculus with Partially Dynamic Records for Typeful Manipulation of JSON Objects</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/21</date>
      <start_time>10:55</start_time>
      <end_time>11:20</end_time>
      <description>This paper investigates language constructs for high-level and type-safe manipulation of JSON objects in a typed functional language. A major obstacle in representing JSON in a static type system is their heterogeneous nature: in most practical JSON APIs, a JSON array is a heterogeneous list consisting of, for example, objects having common fields and possibly some optional fields. This paper presents a typed calculus that reconciles static typing constraints and heterogeneous JSON arrays based on the idea of partially dynamic records originally proposed and sketched by Buneman and Ohori for complex database object manipulation. Partially dynamic records are dynamically typed records, but some parts of their structures are statically known. This feature enables us to represent JSON objects as typed data structures. The proposed calculus smoothly extends with ML-style pattern matching and record polymorphism. These results yield a typed functional language where the programmer can directly import JSON data as terms having static types, and can manipulate them with the full benefits of static polymorphic type-checking. The proposed calculus has been embodied in SML#, an extension of Standard ML with record polymorphism and other practically useful features. This paper also reports on the details of the implementation and demonstrates its feasibility through examples using actual Web APIs. The SML# version 3.1.0 compiler includes JSON support presented in this paper, and is available from Tohoku University as open-source software under a BSD-style license.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Atsushi</first_name>
          <last_name>Ohori</last_name>
          <affiliation>Tohoku University</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.pllab.riec.tohoku.ac.jp/~ohori/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/atsushiohori/077213ad-c678-4476-84bb-16d31c7c6b12/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Katsuhiro</first_name>
          <last_name>Ueno</last_name>
          <affiliation>Tohoku University</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/katsuhiroueno/c0541351-f7c7-40ab-988a-8ee597a95381/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Tomohiro</first_name>
          <last_name>Sasaki</last_name>
          <affiliation>Tohoku University</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Daisuke</first_name>
          <last_name>Kikuchi</last_name>
          <affiliation>Tohoku University and Hitachi Solutions East Japan, Ltd.</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://www.kb.ecei.tohoku.ac.jp/~kikuchi/</homepage_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>ce7e4260-ef55-4039-a5fd-f7170f39a040</slot_id>
      <title>Transforming programs between APIs with Many-to-Many Mappings</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/21</date>
      <start_time>11:20</start_time>
      <end_time>11:45</end_time>
      <description>Transforming programs between two APIs or different versions of the same API is a common software engineering task. However, existing languages supporting for such transformation cannot satisfactorily handle the cases when the relations between elements in the old API and the new API are many-to-many mappings: multiple invocations to the old API are supposed to be replaced by multiple invocations to the new API. Since the multiple invocations of the original APIs may not appear consecutively and the variables in these calls may have different names, writing a tool correctly to cover all such invocation cases is not an easy task. In this paper we propose a novel guided-normalization approach to address this problem. Our core insight is that programs in different forms can be semantics-equivalently normalized into a basic form guided by transformation goals, and developers only need to write rules for the basic form to address the transformation. Based on this approach, we design a declarative program transformation language, PATL, for adapting Java programs between different APIs. PATL has simple syntax and basic semantics to handle transformations only considering consecutive statements inside basic blocks, while with guided-normalization, it can be extended to handle complex forms of invocations. Furthermore, PATL ensures that the user-written rules would not accidentally break def-use relations in the program. We formalize the semantics of PATL on Middleweight Java and prove the semantics-preserving property of guided-normalization. We also evaluated our language with three non-trivial case studies: i.e. updating Google Calendar API, switching from JDom to Dom4j, and switching from Swing to SWT. The result is encouraging; it shows that our language allows successful transformations of real world programs with a small number of rules and little manual resolution.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Chenglong</first_name>
          <last_name>Wang</last_name>
          <affiliation>University of Washington</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/chenglongwang/a5eaa2e6-bcfe-4c30-9032-9baa6b1125f2/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Jiajun</first_name>
          <last_name>Jiang</last_name>
          <affiliation>Peking University</affiliation>
          <bio>undefined</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/jiajunjiang/7ff2cfc7-97cb-4102-b174-1bd2cd07574c/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>3</sort_key>
          <first_name>Jun</first_name>
          <last_name>Li</last_name>
          <affiliation>Peking University</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>4</sort_key>
          <first_name>Yingfei</first_name>
          <last_name>Xiong</last_name>
          <affiliation>Peking University</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://sei.pku.edu.cn/~xiongyf04/</homepage_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>5</sort_key>
          <first_name>Xiangyu</first_name>
          <last_name>Luo</last_name>
          <affiliation>Peking University</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>6</sort_key>
          <first_name>Lu</first_name>
          <last_name>Zhang</last_name>
          <affiliation>Peking University</affiliation>
          <bio>undefined</bio>
        </person>
        <person>
          <role>Author</role>
          <sort_key>7</sort_key>
          <first_name>Zhenjiang</first_name>
          <last_name>Hu</last_name>
          <affiliation>National Institute of Informatics</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://research.nii.ac.jp/~hu/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/zhenjianghu/2f9ab5e7-9c06-4cfb-aeb0-393eaa8f5dbe/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>3f06a33d-8f53-4035-8f55-f98027a4559c</subevent_id>
    <title>Research Track: DN Talk</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/21</date>
    <url>http://2016.ecoop.org/track/ecoop-2016-papers</url>
    <url_link_display>Research Track</url_link_display>
    <tracks>
      <track>Research Track</track>
    </tracks>
    <timeslot>
      <slot_id>018a507a-75c0-478f-83b8-8eac1387603e</slot_id>
      <title>Half a Life in Software (Senior DN Prize Lecture)</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/21</date>
      <start_time>09:00</start_time>
      <end_time>10:00</end_time>
      <description>I was born in the same year SIMULA was standardised, bought my first computer with the proceeds from a paper round, and my second computer after I was fired from a summer programming camp. Beginning with several varieties of BASIC, and going on to Informix, Pascal, C, Perl, Tcl, Smalltalk, Self, C++, Java, programming languages and objects have taken up an inordinate amount of my time and interest. In this talk I’ll meander through some of this history, explain how many of the concerns from the past have — often unwittingly — influenced my current research, and speculate on what I might do with the other half of my life.</description>
      <persons>
        <person>
          <role>Presenter</role>
          <sort_key>1</sort_key>
          <first_name>James</first_name>
          <last_name>Noble</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>James Noble is Professor of Computer Science and Software Engineering at Victoria University of Wellington, New Zealand. James has B.Sc(Hons) and Ph.D. degrees, both from VUW, completed in 1997. After leaving VUW, James worked in Sydney, first at the University of Technology, Sydney, and then at the Microsoft Research Institute, Macquarie University. James returned to VUW as a lecturer in late 1999, just in time to avoid the predicted end of the world.
James’s research centres around software design. This includes the design of the users’ interface, the parts of software that users have to deal with every day, and the programmers’ interface, the internal structures and organisations of software that programmers see only when they are designing, building, or modifying software. His research in both of these areas is coloured by my longstanding interest in object oriented approaches to design, and topics he has studies range from aliasing and object ownership, design patterns, agile methodology, via usability, visualisation and computer music, to postmodernism and the semiotics of programming.</bio>
          <homepage_url>http://homepages.mcs.vuw.ac.nz/~kjx/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jamesnoble/6f993a92-503e-44c6-9bbb-bfd05bf4ed23/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>Research Track</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>c78aaff0-517c-43d8-bd7e-b9099d6d7d05</subevent_id>
    <title>CurryOn : Keynote</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>8c9f4404-653e-471d-b96e-8c64a96b6cf7</slot_id>
      <title>It's the End of the World as We Know It, and I Feel Fine</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/19</date>
      <start_time>09:00</start_time>
      <end_time>09:50</end_time>
      <description>Perl can be a first computer language, but we try to think of it more as a last computer language. Our philosophy, based on how natural language works, says that a future-proof language should be flexible enough to evolve while providing a rich cultural lexicon to discourage gratuitous use of that flexibility. Perl 5 has done okay with that approach over the years, but its design is starting to run into its limits, as have the designs of various other popular languages. Perl 6 is a grand experiment to see if we can transcend the limits of existing languages, to create a new general-purpose, multi-paradigm language that could serve not just as the next flavor-of-the-month language, but as a stable, comfortable mother tongue for new generations of programmers. Come and see how we’re doing on that so far.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Larry</first_name>
          <last_name>Wall</last_name>
          <affiliation>undefined</affiliation>
          <bio>Larry Wall was educated at various places including the Cornish School of Music, the Seattle Youth Symphony, Seattle Pacific University, Multnomah School of the Bible, SIL International, U.C. Berkeley, and UCLA. Though trained primarily in music, chemistry, and linguistics, Larry has been working with computers for the last 40 years or so. He is most famous for writing rn, patch, and the Perl programming language, but prefers to think of himself as a cultural hacker whose vocation in life is to bring a bit of joy into the dreary existence of programmers. For various definitions of “work for”, Larry has worked for Seattle Pacific, MusiComedy Northwest, System Development Corporation, Burroughs, Unisys, the NSA, Telos, ConTel, GTE, JPL, NetLabs, Seagate, Tim O’Reilly, the Perl Foundation, Broadcom, and himself. He is currently serving as Artist in Residence for craigslist.</bio>
          <homepage_url>http://www.wall.org/~larry/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/larrywall/db14cae8-161f-4e28-bdc0-f970c8911ea7/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>6400cae7-8cf7-4c22-8e74-b347a41857e1</subevent_id>
    <title>CurryOn : Session 7a</title>
    <subevent_type type="regular"/>
    <room>Foscolo</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>2ab64ac9-3f84-4a33-9d2c-70eb77f3644a</slot_id>
      <title>To Macros and Beyond!: How macros changed Scala, and what's coming next</title>
      <room>Foscolo</room>
      <date>2016/07/19</date>
      <start_time>17:40</start_time>
      <end_time>18:20</end_time>
      <description>Scala has transformed in a big way when it got macros in early 2013. Very soon after their introduction, macros spread like wildfire, and now they are used in many major libraries in the Scala community. Why such a sudden success? Can macros be useful to your language? Come join us to learn from our experiences and see what we’re planning for future versions of Scala.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Eugene</first_name>
          <last_name>Burmako</last_name>
          <affiliation>EPFL</affiliation>
          <bio>Programming languages enthusiast, PhD student at EPFL, member of the Scala team, Scala macros guy</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/eugeneburmako/b226995a-dbc2-43a2-92f9-9e67bfd03f09/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>6fb2e64b-eba7-4461-b31c-035b3e9d1833</subevent_id>
    <title>CurryOn : Session 6a</title>
    <subevent_type type="regular"/>
    <room>Foscolo</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>21db9582-90fb-439f-baa6-a516956e65c0</slot_id>
      <title>Are We Ready for Secure Languages?</title>
      <room>Foscolo</room>
      <date>2016/07/19</date>
      <start_time>16:50</start_time>
      <end_time>17:30</end_time>
      <description>Language designers and developers want better ways to write good code — languages designed with simpler, more powerful abstractions accessible to a larger community of developers. However, language design does not seem to take into account security, leaving developers with the onerous task of writing attack-proof code. In 20 years, we have gone from 25 reported vulnerabilities to 6,883 vulnerabilities. We see some of the most common vulnerabilities happening in commonly used software — cross-site scripting, SQL injections, and buffer overflows. Attacks are becoming sophisticated, often exploitation three or four weaknesses; making it harder for developers to reason about the source of the problem.
I’ll overview some recent attacks and argue our languages must take security seriously. Languages need security-oriented constructs, and compiler must let developers know when there is a problem with their code. We need to empower developers with the concept of “security for the masses” by making available languages that do not necessarily require an expert in order to determine whether the code being written is vulnerable to attack or not.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Cristina</first_name>
          <last_name>Cifuentes</last_name>
          <affiliation>Oracle Labs, Australia</affiliation>
          <bio>Cristina is the Director of Oracle Labs Australia and an Architect at Oracle. Headquartered in Brisbane, the focus of the Lab is Program Analysis as it applies to finding vulnerabilities in software and enhancing the productivity of developers worldwide. 
Prior to founding Oracle Labs Australia, Cristina was the Principal Investigator of the Parfait bug tracking project at Sun Microsystems, then Oracle. Today, Oracle Parfait has become the defacto tool used by thousands of Oracle developers for bug and vulnerability detection in real-world, commercially sized C/C++/Java applications. The success of the Parfait tool is founded on the pioneering work in advancing static program analysis techniques carried out by Cristina’s team of Researchers and Engineers at Oracle Labs Australia.
Cristina’s passion for tackling the big issues in the field of Program Analysis began with her doctoral work in binary decompilation at Queensland’s University of Technology. In an interview with Richard Morris for Geek of the Week, Cristina talks about Parfait, Walkabout and her career journey in this field. 
Prior to her work at Oracle and Sun Microsystems, Cristina held teaching posts at major Australian Universities, co-edited Going Digital, a landmark book on cybersecurity, and served on the executive committees of ACM SIGPLAN and IEEE Reverse Engineering. 
Cristina continues to play an active role in the international programming language, compiler construction and software security communities. On the weekends, she channels her interests into mentoring young programmers through the CoderDojo network.</bio>
          <homepage_url>http://labs.oracle.com/people/cristina</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/cristinacifuentes/bbfed49d-5ed9-4045-ae58-939073a07e0d/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>d2efd83f-3e69-46a1-a635-17a2c1cb407b</slot_id>
      <title>What is programming?</title>
      <room>Foscolo</room>
      <date>2016/07/19</date>
      <start_time>16:00</start_time>
      <end_time>16:40</end_time>
      <description>As programmers and language designers we have a first-hand account of what this activity consists. But can we define it?</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Juan</first_name>
          <last_name>Lulkin</last_name>
          <affiliation>Klarna</affiliation>
          <bio>Developer and philosopher. In the industry since the last millennium. Currently building interfaces with functional techniques.</bio>
          <homepage_url>https://medium.com/@joaomilho/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/juanlulkin/6e7e6fbe-e695-40c0-870f-49c92f83f6d2/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>4823babf-6c71-4af6-9ed1-3c456d448a23</subevent_id>
    <title>CurryOn : Curry On Party!</title>
    <subevent_type type="regular"/>
    <room>Mercati di Traiano</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>55980374-344a-4fbd-9cb9-0359fda5f143</slot_id>
      <title>Curry On Party!</title>
      <room>Mercati di Traiano</room>
      <date>2016/07/18</date>
      <start_time>19:30</start_time>
      <end_time>23:00</end_time>
      <description>undefined</description>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>ef18dc52-d9e8-49b2-9a5d-83ba785d8678</subevent_id>
    <title>CurryOn : Session 4a</title>
    <subevent_type type="regular"/>
    <room>Foscolo</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>09a15e78-7cbd-4f57-b22f-a5f72bec76e6</slot_id>
      <title>The Future of Programming will be Live </title>
      <room>Foscolo</room>
      <date>2016/07/19</date>
      <start_time>10:55</start_time>
      <end_time>11:35</end_time>
      <description>Live programming aims to provide programmers with useful continuous feedback from a live executing program. Realizing the “useful” part is not easy: automatic re-execution and even time travel debugging do not significantly augment the general abstract reasoning that makes programming hard. This talk show how lessons learned from research on direct manipulation; example-centric, conversational, learnable, and visual programming; live coding; and even Hollywood’s fictional interfaces, can help us envision and design amazing new programming experiences.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Sean</first_name>
          <last_name>McDirmid</last_name>
          <affiliation>Microsoft Research</affiliation>
          <bio>I am a programming language researcher at Microsoft Research Asia’s Systems Research Group who focuses on design, objects, IDEs, live programming, and how we could program with touch.</bio>
          <homepage_url>http://research.microsoft.com/en-us/people/smcdirm/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/seanmcdirmid/d85dbc0e-c0e4-4c3c-abf8-e59f46fbb59f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>37fa2ac7-9be9-472a-9c4a-76bf09db10ea</slot_id>
      <title>From Unikernels to Databases to UIs: Truly full-stack apps in OCaml</title>
      <room>Foscolo</room>
      <date>2016/07/19</date>
      <start_time>11:45</start_time>
      <end_time>12:25</end_time>
      <description>What happens when your app is its own VM, boots in 50ms, and can share the same code across browser/mobile/server components? Let’s find out!
With libraries like Mirage, js_of_ocaml, &amp;amp; ARM compiler output OCaml apps can operate at such a low level we don’t even need operating systems on the backend anymore (removing 15 million lines of memory-unsafe code) - while at the same time, writing UI’s is easier &amp;amp; more reliable than ever before, with lightweight type-checked code sharing between server, browser clients, &amp;amp; native mobile apps.
We’ll look at a thought experiment of what’s enabled by new tech in OCaml like Unikernels, efficient JS/ARM output, React/Native support, and easy host interop.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Sean</first_name>
          <last_name>Grove</last_name>
          <affiliation>None</affiliation>
          <bio>Sean’s been convinced there are better ways to develop applications across the stack for years, and built time-traveling debuggers, interface builders, layout tools, and graphic design tools in his quest to explore the space. His company was the first to deploy ClojureScript’s Om library to a production app in early 2014, he helped lay the architecture for CircleCI’s open-source frontend app and https://www.precursorapp.com.</bio>
          <homepage_url>https://www.riseos.com</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/seangrove/daa3bd76-2ef3-4bdf-a351-84e2e7e1775b/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>a4583ec9-4cd4-4dba-8e7d-d74808ba2bbb</slot_id>
      <title>Functional Programming and Foreign Language Interfaces: Essentials in Distributed Computing</title>
      <room>Foscolo</room>
      <date>2016/07/19</date>
      <start_time>10:05</start_time>
      <end_time>10:45</end_time>
      <description>The need to analyze massive scientific data sets on the one hand and the availability of distributed compute resources with an increasing number of CPU cores on the other hand have promoted the development of a variety of languages and systems for parallel, distributed data analysis.
In this talk we argue that both integrating existing tools and libraries and expressing complex workflows in a functional programming model is a necessity in contemporary languages for distributed computing.
We demonstrate the usefulness of these features by the example of Cuneiform, a minimal functional language for large-scale scientific data analysis running on the Erlang VM. We discuss applications in bioinformatics and machine learning.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Jörgen</first_name>
          <last_name>Brandt</last_name>
          <affiliation>Humboldt-Universität zu Berlin</affiliation>
          <bio>J&amp;ouml;rgen Brandt is a PhD student at the Humboldt-Universit&amp;auml;t in Berlin since 2013. His research interests include next generation sequencing, scientific workflows and functional programming languages. He graduated in Computer Science with a specialization on intelligent systems at Technische Universit&amp;auml;t Berlin in 2011 and in Information Technology and Networked Systems at Hochschule f&amp;uuml;r Technik und Wirtschaft in 2008.</bio>
          <homepage_url>http://www.cuneiform-lang.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jorgenbrandt/dcb9bd85-d923-4f9f-a7a3-0155c21368c5/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>32296138-dbe4-414c-b2c5-0234b1fec1ce</subevent_id>
    <title>CurryOn : Session 3a</title>
    <subevent_type type="regular"/>
    <room>Foscolo</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>1f9964d5-4209-4083-bed3-a50a4afe495e</slot_id>
      <title>Exercises in Programming Style</title>
      <room>Foscolo</room>
      <date>2016/07/18</date>
      <start_time>16:50</start_time>
      <end_time>17:30</end_time>
      <description>Back in the 1940s, the French writer Raymond Queneau wrote a book titled Exercises in Style featuring 99 renditions of the exact same short story, each in a different style. This talk, based on a book with the same name, shamelessly does the same for a simple program. From monolithic to object-oriented to continuations to relational to publish/subscribe to monadic to aspect-oriented, and much more. You will get a tour through the richness of human computational thought by through the lens of one, simple, program in many different guises.
More than an academic exercise; this about freedom of expression. I’ll argue that you are in dangers of getting trapped into a single prescribed style during your professional career, and the understanding all is needed to truly understand how to architect large-scale systems.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Crista</first_name>
          <last_name>Lopes</last_name>
          <affiliation>University of California, Irvine</affiliation>
          <bio>Crista Lopes is a Professor of Informatics in the School of Information and Computer Sciences at the University of California, Irvine. Her research focuses on software engineering for large-scale data and systems. Early in her career, she was a founding member of the team at Xerox PARC that developed Aspect-Oriented Programming. Along with her research program, she is also a prolific software developer. Her open source contributions include being one of the core developers of OpenSimulator, a virtual world server. She is also a founder and consultant of Encitra, a company specializing in online virtual reality for early-stage sustainable urban redevelopment projects. She has a PhD from Northeastern University, and MS and BS degrees from Instituto Superior Tecnico in Portugal. She is the recipient of several National Science Foundation grants, including a prestigious CAREER Award. She claims to be the only person in the world who is both an ACM Distinguished Scientist and Ohloh Kudos Rank 9.</bio>
          <homepage_url>https://www.ics.uci.edu/~lopes/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/cristalopes/2a709b22-4c7e-489a-8b15-9573227850bb/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>a3a4acc8-f7da-4780-98a0-bbf2af42bd64</slot_id>
      <title>Why The Free Monad isn't Free</title>
      <room>Foscolo</room>
      <date>2016/07/18</date>
      <start_time>16:00</start_time>
      <end_time>16:40</end_time>
      <description>Functional programmers love to discuss Monads, their metaphors, and their many use cases. Recognizing that monadic design and development patterns have their place, this talk will discuss the price of implementing the Free Monad in your code - spoiler alert - it’s not free.
The Free Monad’s basis in Category Theory hails from an academic look at mathematics and functional programming, but this talk will prove you don’t have to have a PhD to understand and apply these concepts. We’ll define the building blocks of the abstraction by discussing the practical use cases, trade-offs, and alternative patterns using real Scala code. Let’s have a conversation about code complexity and the benefits and disadvantages of using theoretical concepts in an industry application.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Kelley</first_name>
          <last_name>Robinson</last_name>
          <affiliation>Sharethrough</affiliation>
          <bio>Kelley is Scala developer, most recently working with data and infrastructure at Sharethrough in San Francisco. In her spare time, she enjoys testing new recipes and trying to keep her plants alive.</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/kelleyrobinson/8e538113-38b3-43d8-b267-f828c4ac6208/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>0ce27996-18d2-433d-aa66-243192e94d82</subevent_id>
    <title>CurryOn : Session 2b</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>5ca25554-76ab-4ca9-849a-ae77303ffa2b</slot_id>
      <title>Building Scalable Stateful Services</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/18</date>
      <start_time>13:50</start_time>
      <end_time>14:30</end_time>
      <description>The Stateless Service design principle has become ubiquitous in the tech industry for creating horizontally scalable services. However our applications do have state, we just have moved all of it to caches and databases. Today as applications are becoming more data intensive and request latencies are expected to be incredibly low, we’d like the benefits of stateful services, like data locality and sticky consistency. In this talk I will address the benefits of stateful services, how to build them so that they scale, and discuss distributed and scalable services in the real world that implement these techniques successfully.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Caitie</first_name>
          <last_name>McCaffrey</last_name>
          <affiliation>Twitter</affiliation>
          <bio>Caitie McCaffrey is a Backend Brat and Distributed Systems Diva at Twitter. Prior to that she spent the majority of her career building large scale services and systems that power the entertainment industry at 343 Industries, Microsoft Game Studios, and HBO. Caitie has a degree in Computer Science from Cornell University, and has worked on several video games including Gears of War 2, Gears of War 3, Halo 4, and Halo 5 She maintains a blog at CaitieM.com and frequently discusses technology on Twitter @Caitie</bio>
          <homepage_url>http://caitiem.com</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/caitiemccaffrey/99838d91-b74e-470b-9f82-0b0c358c430a/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>c1f9fd56-92d4-44ee-ae8b-d46f85a96c8c</slot_id>
      <title>Data-driven Software security using Differential Privacy and Deep Learning</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/18</date>
      <start_time>14:40</start_time>
      <end_time>15:20</end_time>
      <description>For computer software, our security models, policies, mechanisms, and means of assurance were primarily conceived and developed before the end of the 1970‘s. However, since that time, software has changed radically: it is thousands of times larger, comprises countless libraries, layers, and services, and is used for more purposes, in far more complex ways. This suggests that we should revisit some of our core computer security concepts. For example, what does the Principle of Least Privilege mean when all software contains libraries that can express arbitrary functionality? And, what security policy should be enforced when software is too complex for either its developers or its users to explain its intended behavior in detail? One possibility is to take an empirical, data-driven approach to modern software, and determine its exact, concrete behavior via comprehensive, online monitoring. Such an approach can be a practical, effective basis for security—as demonstrated by its success in spam and abuse fighting—but its use to constrain software behavior raises many questions. In particular, two questions seem critical. First, is it possible to learn the details of how software is behaving, without intruding on the privacy of its users? Second, are those details a good foundation for deriving security policies that constrain how software should behave? This talk answers both these questions in the affirmative, as part of an overall approach to data-driven security. Specifically, the talk describes techniques for learning detailed software statistics while providing differential privacy for its users, and how deep learning can help derive useful security policies that match users’ expectations with intended software behavior. Those techniques are both practical and easy to adopt, and have already been used at scale for billions of users.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Úlfar</first_name>
          <last_name>Erlingsson</last_name>
          <affiliation>Google</affiliation>
          <bio>&amp;Uacute;lfar currently heads a security research team at Google. Previously, he has been a researcher at Microsoft Research, Silicon Valley, an Associate Professor at Reykjavik University, Iceland, and led security technology at two startups: GreenBorder and deCODE Genetics. He holds a PhD in computer science from Cornell University.</bio>
          <homepage_url>http://research.google.com/pubs/ulfar.html</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/ulfarerlingsson/3d58eb0b-8fb4-4dd8-87c5-8c7cd97a1076/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>b2a28cf7-feaa-4d78-a250-dd4fbea825fd</subevent_id>
    <title>CurryOn : Keynote</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>3eef36ba-c6f7-433d-ae33-a46c2c5a20df</slot_id>
      <title>Building an Open Source Research Lab</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/19</date>
      <start_time>18:30</start_time>
      <end_time>19:20</end_time>
      <description>When I joined Mozilla as a full-time employee in 2010, I knew I wanted to combine technology research with Mozilla’s open source culture to serve our mission of advancing the Web platform. I also knew I had no idea how to do it. So I cofounded Mozilla Research to experiment with ways of doing innovation with open source.
Fast forward to 2016, and we have a number of exciting technologies we’ve spearheaded or collaborated on, including asm.js, WebAssembly, Emscripten, AOMedia Video, Rust, and Servo. We’ve also made our share of mistakes, and tried to extract lessons from them.
In this talk, I will recount some of my experiences running an open source research lab, and talk about how I’ve come to believe that investing in open source communities is a unique and powerful tactic for advancing the state of our understanding of software.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Dave</first_name>
          <last_name>Herman</last_name>
          <affiliation>Mozilla Research</affiliation>
          <bio>I’m a founder of and Director of Strategy at Mozilla Research, where we are working to expand the foundations of the Open Web. I participate in a number of Web platform projects, including:
•task.js •sweet.js •asm.js •Rust •Servo •Shumway
I also participate in open standards, in particular as a representative on TC39, the committee that standardizes JavaScript.</bio>
          <homepage_url>http://calculist.org/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/daveherman/bcba556b-bc97-4230-9b6d-71f773afe9d3/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>53920e7a-28ba-4bd9-9e62-3462ba47ef18</subevent_id>
    <title>CurryOn : Session 4b</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>09fd86fd-8458-4778-938a-91c7e84a69e1</slot_id>
      <title>Static analysis for security at the Facebook scale</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/19</date>
      <start_time>11:45</start_time>
      <end_time>12:25</end_time>
      <description>The scale and continuous growth of commercial code bases are the greatest challenges for adoption of automated analysis tools in Industry. Alas, scale is largely ignored by academic research. We developped a new static analysis tool for security to scale to Facebook scale. It relies on abstract interpretation to focus on the properties that really matter to security engineers and provides fine control on the cost/precision ratio. It was designed from day one for “real world” security and privacy problems at scale. Facebook codebase is huge, and we can analyze it, from scratch in 13 minutes. This talk will give attendees a peek at some of the secret sauce we use to achieve such amazing performance and precision</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Francesco</first_name>
          <last_name>Logozzo</last_name>
          <affiliation>Facebook</affiliation>
          <bio>I love static program analysis. I’ve been designing and implementing widely used static analysis tools. I published papers in the most important research conferences and gave talks at main industrial conferences as e.g., Build.</bio>
          <homepage_url>https://it.linkedin.com/in/francesco-logozzo-4106386</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/francescologozzo/f70bf450-fed8-4488-88cb-579091e43a4d/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>3418d6bb-0a4c-47c6-932d-16d83fdb0f74</slot_id>
      <title>Redesigning Type Systems for Industry OO</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/19</date>
      <start_time>10:55</start_time>
      <end_time>11:35</end_time>
      <description>Programming languages are an interface between people and computers. Many have explored one side or the other. In this talk, I will illustrate the insights that can be gained by exploring both. For example, I will show how understanding human behavior can solve undecidable problems, and how understanding mathematical models can predict human expectations. I will discuss how this work was inspired by and adopted by the Ceylon design team at Red Hat and the Kotlin design team at JetBrains.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Ross</first_name>
          <last_name>Tate</last_name>
          <affiliation>Cornell University</affiliation>
          <bio>Ross is an Assistant Professor at Cornell University. He has served as an advisor to the Ceylon design team at Red Hat and the Kotlin design team at JetBrains.</bio>
          <homepage_url>http://www.cs.cornell.edu/~ross/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/rosstate/ad295f25-d112-4298-8931-afcb135c0e62/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>ce132628-d244-45a3-865c-d654126310fd</slot_id>
      <title>Dartino - a managed language on micro-controllers?</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/19</date>
      <start_time>10:05</start_time>
      <end_time>10:45</end_time>
      <description>Abstract: Developing software for a connected, embedded device often makes you want to throw it out the window. Instead of being able to rely on modern, managed languages, developers are stuck with C/C++. How do we make developers productive even when they are working on low-end devices?</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Kasper</first_name>
          <last_name>Lund</last_name>
          <affiliation>Google</affiliation>
          <bio>Kasper Lund is a software engineer at Google working on the design and implementation of programming languages. He has more than 15 years of industrial experience in designing and implementing virtual machines and runtime systems and his primary areas of interests and expertise are efficient interpretation, dynamic compilation, and adaptive optimizations.</bio>
          <homepage_url>https://plus.google.com/u/0/100258330325630692559</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/kasperlund/7d0f0039-5d9a-4e60-ba6b-decc7a0d5d7f/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>9dac6ac3-1e2c-48d5-93d4-a92025486118</subevent_id>
    <title>CurryOn : Session 2a</title>
    <subevent_type type="regular"/>
    <room>Foscolo</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>885b9da6-7347-40e4-8376-9f9d84db5724</slot_id>
      <title>Sieve: Cryptographically Enforced Access Control for User Data in Untrusted Clouds</title>
      <room>Foscolo</room>
      <date>2016/07/18</date>
      <start_time>13:50</start_time>
      <end_time>14:30</end_time>
      <description>Modern web services rob users of low-level control over cloud storage—a user’s single logical data set is scattered across multiple storage silos whose access controls are set by web services, not users. The consequence is that users lack the ultimate authority to determine how their data is shared with other web services. In this talk, we introduce Sieve, a new platform which selectively (and securely) exposes user data to web services. Sieve has a user-centric storage model: each user uploads encrypted data to a single cloud store, and by default, only the user knows the decryption keys. Given this storage model, Sieve defines an infrastructure to support rich, legacy web applications. Using attribute-based encryption, Sieve allows users to define intuitively understandable access policies that are cryptographically enforceable. Using key homomorphism, Sieve can re-encrypt user data on storage providers in situ, revoking decryption keys from web services without revealing new keys to the storage provider. Using secret sharing and two-factor authentication, Sieve protects cryptographic secrets against the loss of user devices like smartphones and laptops. The result is that users can enjoy rich, legacy web applications, while benefiting from cryptographically strong controls over which data a web service can access.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Frank</first_name>
          <last_name>Wang</last_name>
          <affiliation>MIT CSAIL</affiliation>
          <bio>Frank Wang is a 4th year PhD student at MIT focusing on building secure systems. He is advised by Nickolai Zeldovich and James Mickens. He did his undergraduate at Stanford, focusing on cryptography. He runs the MIT security seminar and is a member of the student team at Roughdraft Ventures, which provides small capital to early stage student startups. He has interned at the security teams at Google and Facebook as well as consulted for various security companies, such as Qualys.</bio>
          <homepage_url>https://www.frankwang.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/frankwang/e3a659f1-b874-443b-8a08-cde91a003253/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>d6becad2-b7b4-4510-861d-37f441f7f017</slot_id>
      <title>Rascal: the Swiss Army Knife of Meta Programming</title>
      <room>Foscolo</room>
      <date>2016/07/18</date>
      <start_time>14:40</start_time>
      <end_time>15:20</end_time>
      <description>Meta programs are programs that consume other programs as input. There are many tools for solving meta programming tasks, like grep and AWK for the simple stuff, and parser generators or compiler-compilers for more complex tasks. Rascal is a functional programming language that addresses all meta programming concerns in a single, unified language. The use cases for Rascal range from computing source code metrics and automated code smell detection, to implementing refactorings and full-blown compilers. Rascal provides an integrated set of features to simplify such source code analysis and transformation tasks, including built-in context-free grammars for syntax definition, constructs for automated traversal of syntax trees, powerful pattern matching primitives, and domain-specific data types. In this talk I will provide an overview of the language, and illustrate how it can be used as a tool for source code analysis and as a language workbench for developing domain-specific languages (DSLs).</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Tijs</first_name>
          <last_name>van der Storm</last_name>
          <affiliation>CWI</affiliation>
          <bio>Tijs van der Storm is researcher at Centrum Wiskunde &amp;amp; Informatica (CW), the Dutch national institute for computer science and mathematics and teaches Software Construction at the Universiteit van Amsterdam (UvA). In his work he tries to solve software engineering problems through better language design and language engineering. He is one of the designers of the Rascal language. Apart from all that, he likes literature and hates ugly code.</bio>
          <homepage_url>http://www.cwi.nl/~storm/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/tijsvanderstorm/292525ce-bb43-4bcf-9ec0-4ba85faca75b/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>a3b265d7-0748-4550-a1a9-8aaa8b23cf84</subevent_id>
    <title>CurryOn : Session 7b</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>ff92639b-68d2-4b94-81a0-d1014c904122</slot_id>
      <title>A brief and incomplete history of programming languages</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/19</date>
      <start_time>17:40</start_time>
      <end_time>18:20</end_time>
      <description>Why do programming languages look the way they do today? How did it all started? In this talk we will go over a brief history of programming languages, from the very early days. We will go over greatest hits from Hilbert, Turing, Church, Hopper and more.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Andrea</first_name>
          <last_name>Magnorsky</last_name>
          <affiliation>undefined</affiliation>
          <bio>I really enjoy finding different ways to write code, sometimes for performance, other times for succinctness, sometimes, just because you can, there is no better way to learn than trying.
When I am not working I tend to play with Haskell or other languages or cats
Conferences and meetups are a great way to learn more, so I try to help when I can to make them happen. For that reason I co-organise Functional Kats and GameCraft. I also speak at local and international conferences like CodeMesh, Progressive.Net, ProF#, Lambda Days and many more.</bio>
          <homepage_url>http://www.roundcrisis.com</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/andreamagnorsky/393a23b4-aead-4cf5-a1c4-ff1acdd552e4/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>06212622-b73b-4405-99c3-3fc1f444c976</subevent_id>
    <title>CurryOn : Session 3b</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>3a02d311-a9de-4ecb-914a-35e450fa5a99</slot_id>
      <title>Doing data science with Clojure: the ugly, the sad, the joyful</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/18</date>
      <start_time>16:00</start_time>
      <end_time>16:40</end_time>
      <description>Having programmers do data science is terrible, if only everyone else were not even worse. The problem is of course tools. We seem to have settled on either: a bunch of disparate libraries thrown into a more or less agnostic IDE, or some point-and-click wonder which no matter how glossy, never seems to truly fit our domain once we get down to it. The dual lisp tradition of grow-your-own-language and grow-your-own-editor gives me hope there is a third way. 
This talk is a meditation on the ideal environment for doing data science and how to (almost) get there. I will cover how I approach data problems with Clojure (and why Clojure in the first place), what I believe the process of doing data science should look like and the tools needed to get there. Some already exists (or can at least be bodged together); others can be made with relative ease (and we are already working on some of these); but a few will take a lot more hammock time.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Simon</first_name>
          <last_name>Belak</last_name>
          <affiliation>GoOpti</affiliation>
          <bio>Built my first computer out of Lego bricks and learned to program soon after. Emergence, networks, modes of thought, limits of language and expression are what makes me smile (and keeps me up at night). Currently working at GoOpti making the company data-driven; setting up our analytics infrastructure (end goal: provide any answer stemming from data in 2 min or less); and building our predictive-real time-superduper pricing engine.</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/simonbelak/825fc07f-2599-4ea6-8252-b78824c98a5b/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>68f31547-38f3-440a-a4d8-adbbd2fb6a76</slot_id>
      <title>Oden - A Functional Programming Language for the Go Ecosystem</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/18</date>
      <start_time>16:50</start_time>
      <end_time>17:30</end_time>
      <description>This talk will introduce Oden, an experimental, statically typed, functional programming language being built for the Go ecosystem. We will look at how Oden aims to leverage the great features of Go — static linking, cross-compilation, goroutines, channels and the great set of libraries and tools — and enable higher-level abstractions, generics and a safer yet more flexible type system.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Oskar</first_name>
          <last_name>Wickström</last_name>
          <affiliation>None (this is a free time project)</affiliation>
          <bio>After some years of musical education Oskar Wickstr&amp;ouml;m began his journey into the world of software development as a self-taught programmer. He started a company practicing web design and development for small businesses. He now works with software analysis and repository mining at Empear, along with various open source projects on his free time.
Among the technical topics that interest Oskar are functional programming, systems design and programming languages. His more aestetic side, which mostly involves making music, draws him towards graphics and UI design every now and then. He’s a bit of a restless soul, but it also means he gets a lot done.</bio>
          <homepage_url>https://owickstrom.github.io/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/oskarwickstrom/de218570-64fa-46a9-95c8-27eccd604610/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>c02480dd-54b7-4a22-9214-995335f9e8d7</subevent_id>
    <title>CurryOn : Session 5b</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>48cb0287-f42e-44bb-aa97-177bd5d56361</slot_id>
      <title>Distributed Iterative Computation in TensorFlow</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/19</date>
      <start_time>14:40</start_time>
      <end_time>15:20</end_time>
      <description>Deep learning is driving significant advances in Artificial Intelligence. In this talk, I will describe the design and implementation of TensorFlow, the Google platform for large-scale training of neural networks. The talk will focus on one important aspect of the system: distributed execution of iterative TensorFlow programs.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Yuan</first_name>
          <last_name>Yu</last_name>
          <affiliation>undefined</affiliation>
          <bio>Yuan Yu is a research scientist at Google Research, working on the Google Brain project. His current research focus is on programming abstractions, compilers, and runtimes for large-scale parallel and distributed computing. Prior to joining Google, he was a researcher at Microsoft Research and DEC/Compaq Systems Research Center.</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/yuanyu/d7e2b687-355c-43e2-869a-c5f07cb5d35c/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>78e47602-176f-4d8d-aeca-d82f2ddaa7a4</slot_id>
      <title>Practical Demystification of CRDTs</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/19</date>
      <start_time>13:50</start_time>
      <end_time>14:30</end_time>
      <description>In a connected world, synchronising mutable information between different devices with different clock precision can be a difficult problem. A piece of data may have many out-of-sync replicas but all of those should eventually be in a consistent state. For example, TomTom users, having personal navigation devices, smartphones, MyDrive website accounts, expect their navigation information be synchronised properly even in the occasional absence of network connection. Conflict-free Replicated Data Types (CRDTs) provide robust data structures to achieve proper synchronisation in an unreliable network of devices. They enable the conflict resolution being done locally at the data type level while guaranteeing the eventual consistency between replicas. In this talk, in addition to an introduction to common CRDT types, our main focus will be on a special subtype of CRDT Set called OUR-Set (Observed, Updated, Removed), which we created to extend known CRDT sets with update functionality. We will exhibit basic implementations of various CRDTs in Scala and Java, and will enumerate subtle considerations which should be taken into account. We will also explain the advantages of these data structures to solve many synchronisation problems as well as their limitations.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Dmitry</first_name>
          <last_name>Ivanov</last_name>
          <affiliation>TomTom</affiliation>
          <bio>Dmitry is a senior software engineer at TomTom, Amsterdam. He has been obsessed with Scala language since 2010 and is fascinated with all things related to Cloud, DevOps and building scalable distributed systems. Prior to joining TomTom, Dmitry worked on backend services in a few international startups (Reltio, AmbiqTech). In his spare time he is involved in organising various programming meetups around Amsterdam, and occasionally gives talks at those</bio>
          <homepage_url>http://dmitryivanov.io/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/dmitryivanov/8b754eb4-d358-4a0c-9114-79e6a5ae4bd0/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Nami</first_name>
          <last_name>Nasserazad</last_name>
          <affiliation>TomTom</affiliation>
          <bio>undefined</bio>
          <homepage_url>https://twitter.com/namiazad</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/naminasserazad/43140ff9-21e8-4fc3-aacb-370cc4f7b998/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>b6b92724-d786-4507-a434-0e08fb6264e0</subevent_id>
    <title>CurryOn : Keynote</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>c749aefa-fcc4-4faf-8b25-c0f9b5a7f06f</slot_id>
      <title>Curry On opening remarks</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/18</date>
      <start_time>08:45</start_time>
      <end_time>09:00</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Presenter</role>
          <sort_key>1</sort_key>
          <first_name>Jan</first_name>
          <last_name>Vitek</last_name>
          <affiliation>Northeastern University</affiliation>
          <bio>Jan Vitek is a Professor of Computer Science at Northeastern University. Dr. Vitek was born in Czechoslovakia and educated in Switzerland. Over the years, he worked on topics related to programming languages, their design, use, and implementation. With Noble and Potter, he proposed the notion of flexible alias control which became know as Ownership Types. He led the Ovm project which produced the first real-time Java virtual machine to be flight tested on a ScanEagle drone (he claims no one was harmed). Outcomes of this project include the Schism real-time garbage collector and the FijiVM – a production VM for embedded systems. More recently, he worked on dynamic languages, trying to make sense of JavaScript and to design a new language called, Thorn. Nowadays, he spends his time with statisticians and data scientists. Jan believes that his 2012 election as Chair of SIGPLAN was an accident; since has been busy trying to rock the boat to ensure this does not happen again. In his spare time, Jan enjoys organizing conferences and sitting on PCs (over 25 in the last decade). He founded the MOS (mobile objects), IWACO (alias control), STOP (gradual typing), and TRANSACT (transactional memory) workshop series. He was the first program chair of VEE and chaired ESOP, ECOOP, Coordination and TOOLS. He was the general chair of PLDI (in Beijing!), ISMM and LCTES. He may still be sitting on the steering committees of ECOOP, JTRES, ICFP, OOPLSA, POPL, PLDI, LCTES, ESOP.</bio>
          <homepage_url>http://janvitek.org</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/janvitek/53f115e3-8db9-4b80-b49a-f5eb2a0c8696/small.jpg</picture_url>
        </person>
        <person>
          <role>Presenter</role>
          <sort_key>2</sort_key>
          <first_name>Heather</first_name>
          <last_name>Miller</last_name>
          <affiliation>Ecole Polytechnique Federale de Lausanne</affiliation>
          <bio>I am a Research Scientist at EPFL, and the Executive Director of the Scala Center, working on the Scala programming language. In October 2015, I earned my PhD under the supervision of Professor Martin Odersky the Programming Methods Laboratory (LAMP for short) at EPFL. Before moving to Switzerland, I was born in and lived all over the US.
I’m interested in programming language and compiler support for distributed programming. In particular, I’m interested in using type systems to facilitate the design of new, functional distributed systems.</bio>
          <homepage_url>http://heather.miller.am/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/heathermiller/bcbc4db2-52f8-4135-b4ab-5bf33879d8dd/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>f0f6121d-2f4c-4cc4-b998-e0e4de4d0530</slot_id>
      <title>How To Win Big With Old Ideas</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/18</date>
      <start_time>09:00</start_time>
      <end_time>09:50</end_time>
      <description>From both an academic and industrial perspective Clojure programmers are living in the computational stone age. Lisp (1957), tries (1965), and Datalog (1977) form the working day conceptual foundation for many professional Clojure engineers. Paradoxically Clojure programmers leverage these cobweb infested ideas to successfully target two of the most pervasive and active industry technology platforms - the Java Virtual Machine and JavaScript. While many mainstream developers continue to bicker over the finer points of MVC, Clojure developers are building complex client user interfaces with functional programming and immutable data structures at the core. While academics forge ahead with ever more sophisticated forms of verification, Clojure programmers build robust and compelling systems with hardly more type safety than the earliest Lisp implementation. Perhaps good ideas never grow old and Clojure can show us that better software is often a matter of looking back to the future.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>David</first_name>
          <last_name>Nolen</last_name>
          <affiliation>Cognitec</affiliation>
          <bio>undefined</bio>
          <homepage_url>http://swannodette.github.io/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/davidnolen/a3c5b350-604c-4148-aab5-124f3fda6ddd/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>5ce0d323-3c13-4ca6-9f27-a64e234d8b38</subevent_id>
    <title>CurryOn : Keynote</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>1634c4ba-1e06-4ebd-885a-81d37b2bb55f</slot_id>
      <title>The Racket Manifesto</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/18</date>
      <start_time>17:40</start_time>
      <end_time>18:30</end_time>
      <description>The creation of a programming language calls for guiding principles that point the developers to goals. I spell out the three basic principles behind the 20-year development of Racket. First, programming is about stating and solving problems, and this activity normally takes place in a context with its own language of discourse; good programmers ought to formulate this language as a programming language. Hence, Racket is a programming language for creating new programming languages. Second, by following this language-oriented approach to programming, systems become multi-lingual collections of interconnected components. Each language and component must be able to protect its specific invariants. In support, we offer protection mechanisms to implement a full language spectrum, from C-level bit manipulation to soundly typed extensions. Third, because Racket considers programming as problem solving in the correct language, Racket must also turn extra-linguistic mechanisms into linguistic constructs, especially mechanisms for managing resources and projects. I explains these principles and how Racket lives up to them, presents the evaluation framework behind the design process, and concludes with a sketch of imperfections and opportunities for improvements.
htm: http://www.ccs.neu.edu/home/matthias/manifesto/ pdf: http://www.ccs.neu.edu/racket/pubs/#manifesto</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Matthias</first_name>
          <last_name>Felleisen</last_name>
          <affiliation>Northeastern University</affiliation>
          <bio>Matthias Felleisen, a Trustee Professor at Northeastern University’s College of Computer Science, has spent 30 years exploring programming languages and the pedagogy of software development. After receiving his PhD at Indiana University in 1987, he launched his academic career at Rice University; in 2001, he moved to Northeastern.
For the first decade of his career, Felleisen developed a new theoretical framework for modeling programming languages. Over time, this framework has provided the most widely used technique for proving type soundness theorems, the fundamental correctness claims for programming languages.
In 1995, Felleisen launched two related projects: (1) a K-12 outreach project with the goal of synthesizing mathematics and programming education and (2) the Racket language design project in support of the outreach project. Felleisen and his team taught dozens of intensive 5-day teacher training workshops over 20 years, focusing on program design as systematic problem solving. Working with Northeastern undergraduates, they also created the Bootstrap curriculum for middle schools; the curriculum has been adopted by code.org. The team’s Racket programming language has become a test bed for language design ideas from mixins to frameworks for domain-specific languages, from software contracts to gradual typing systems, and from web programming disciplines to distributed interactions. It is used in many applications, from DoD software to Naughty Dog’s games.
For his research on programming languages, Felleisen was inducted as an ACM Fellow in 2006 and received ACM SIGPLAN’s Achievement Award in 2012. Also in 2012, his paper on contracts for higher-order languages was picked asthe most influential ICFP 2002 publication. Felleisen has delivered keynote addresses at many programming language conferences, including POPL, ECOOP, and ICFP. For his educational outreach, ACM honored Felleisen with the Karl V. Karlstrom Award in 2010. ACM SIGCSE named Felleisen Outstanding Educator of the Year in 2011. In conjunction with the latter, he delivered the keynote at the annual Symposium on Computer Science Education.</bio>
          <homepage_url>http://www.ccs.neu.edu/home/matthias/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/matthiasfelleisen/7a851444-de7f-4206-86ed-a00a9536f985/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>0a0e22a4-9565-4b32-94c2-296d1863b13c</subevent_id>
    <title>CurryOn : Session 1a</title>
    <subevent_type type="regular"/>
    <room>Foscolo</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>605c5619-6491-4c0e-b4eb-96419eb3b5f0</slot_id>
      <title>The Functional Programming Languages Nomad</title>
      <room>Foscolo</room>
      <date>2016/07/18</date>
      <start_time>10:05</start_time>
      <end_time>10:45</end_time>
      <description>I have used functional programming in industrial projects since 1998; starting with a stage lighting system, which is still in use. I wrote it while still a research assistant. While I have a strong attachment to Scheme - I was project editor for the R6RS standard - I also use Racket, OCaml, Scala, Clojure, Erlang, F#, Haskell, and Star in a wide variety of projects from social pedagogy to semiconductor fab control.
My work continually force me to question if I am still on the path to correct, effective, and maintainable software. Time and again, functional approaches won out, and failures hid in the imperative and OO parts of my projects. Consequently, the journey from academic research to industrial applications also ironically marks a journey away from imperative objects towards functional purity. (Static types, not so much, however.) The talk is a tour through my industrial projects, I encourage you mine them for insights on how to write and not to write software.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Michael</first_name>
          <last_name>Sperber</last_name>
          <affiliation>Active Group GmbH</affiliation>
          <bio>I am CTO of Active Group.
We do most of our software development using functional programming.</bio>
          <homepage_url>http://www.deinprogramm.de/sperber/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/michaelsperber/2d788532-c704-4ea2-8dd2-dc148e548aef/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>6dfdf357-200f-436f-8bf6-be7f781e3416</slot_id>
      <title>Why Writing Correct Software Is Hard and Why Math (Alone) Won’t Help Us</title>
      <room>Foscolo</room>
      <date>2016/07/18</date>
      <start_time>11:45</start_time>
      <end_time>12:25</end_time>
      <description>undefined</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Ron</first_name>
          <last_name>Pressler</last_name>
          <affiliation>Parallel Universe</affiliation>
          <bio>Ron Pressler is the founder of Parallel Universe, a YC company building a JVM-based server-side stack for easily writing high-performance, low latency applications that work in harmony with modern hardware architecture rather than fight it. Prior to founding Parallel Universe, Ron was a developer and a software architect in the Israeli Air Force, where he developed and designed air-traffic control and missile-defense systems, as well as large, clustered physics simulations.</bio>
          <homepage_url>http://www.paralleluniverse.co/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/ronpressler/47af994e-0b65-4395-afae-355e22c9e600/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>7d082f27-2698-48df-934e-5c86308c1a95</slot_id>
      <title>Creating a Fun Game with Elm</title>
      <room>Foscolo</room>
      <date>2016/07/18</date>
      <start_time>10:55</start_time>
      <end_time>11:35</end_time>
      <description>You are Joe, the courier. It is your job, to deliver all the fashion to all the customers. Sometimes, you have to pick up stuff and return it to the warehouse. However, customers keep ordering more and more — and your bicycle only has room for so many boxes… In this talk we want to tell you how the Elm Architecture empowered us to put the “Elm Street 404” game together. We will give you some insight into the algorithms at play and how we applied functional concepts to the domain of game programming.Some of the challenges we were facing include: implementing a path-finding solution, the random generation of the map and game objects, improving the performance and rendering with WebGL.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Andrey</first_name>
          <last_name>Kuzmin</last_name>
          <affiliation>Zalando</affiliation>
          <bio>Andrey Kuzmin is a senior frontend engineer at Zalando. He has contributed to frontend tooling, most notably with his gulp-svgstore and gulp-postcss open source projects. Recently Andrey has been learning a functional reactive programming in Elm. Apart from work, he enjoys live music in Berlin and is a yoga newbie.</bio>
          <homepage_url>https://tech.zalando.com/blog/using-elm-to-create-a-fun-game-in-just-five-days/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/andreykuzmin/493ebeb4-d403-465e-8f85-a38dd80195eb/small.jpg</picture_url>
        </person>
        <person>
          <role>Author</role>
          <sort_key>2</sort_key>
          <first_name>Kolja</first_name>
          <last_name>Wilcke</last_name>
          <affiliation>Zalando</affiliation>
          <bio>Kolja Wilcke has worked alternatingly as an illustrator and as a frontend developer, currently with Zalando STUPS. Of late, he took an interest in functional programming and ClojureScript. He also enjoys learning languages outside of the realm of programming.</bio>
          <picture_url>http://2016.ecoop.org/getProfileImage/koljawilcke/dac1cab0-de99-4b23-9b15-46977944d5ff/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>f5cbca92-68bb-46d3-bb64-1599b836ae3e</subevent_id>
    <title>CurryOn : Session 5a</title>
    <subevent_type type="regular"/>
    <room>Foscolo</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>1ad2e713-06e4-47b2-af74-b450d593fede</slot_id>
      <title>Become a Polyglot by learning Java!</title>
      <room>Foscolo</room>
      <date>2016/07/19</date>
      <start_time>14:40</start_time>
      <end_time>15:20</end_time>
      <description>In a world running at breakneck speed to embrace JavaScript, it is refreshing to see a project that embraces Java to provides solution that deal with the new world and even improve it. I describe Truffle, a project that aim to build multi-language, multi-tenant, multi-threaded, multi-node, multi-tooling and multi-system environment on top of Java virtual machine with the goal to form the fastest and most flexible execution environment on the planet! Learn about Truffle and its Java API to become real polyglot, use the best language for a task and never ask again: Do I really have to use that crummy language?
Jaroslav Tulach is the founder and initial architect of NetBeans, which is not just a well known IDE, but also the first modular desktop application framework written in Java. I have seen, made and helped to recover from many API design mistakes. Such experiences forced me to write a book titled “Practical API Design”. These days I am helping OracleLabs to design the API of Truffle which is the fastest virtual machine on the planet.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Jaroslav</first_name>
          <last_name>Tulach</last_name>
          <affiliation>Oracle Labs</affiliation>
          <bio>I am the founder and initial architect of NetBeans, which is not just a well known IDE, but also the first modular desktop application framework written in Java. My name sounds Slavic and has a strange pronunciation (read the initial J as Y and last ch as in Scottish loch or in German Bach), because I am Czech. However, as NetBeans has been the flagship software product of Sun and Oracle for a while now, you don’t have to worry that content of the TheAPIBook might not be widely applicable and understandable. 
Maintaining NetBeans Platform, its architecture and APIs has always been the primary focus of Jaroslav. During more than fifteen years of participating in the NetBeans.org project, Jaroslav has seen, made and helped to recover from many design mistakes. Such experience obligated Jaroslav to sit down and summarize it.</bio>
          <homepage_url>http://wiki.apidesign.org/wiki/User:JaroslavTulach</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jaroslavtulach/1e439040-b573-4226-8a57-2a1234d1c102/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>bd967ea8-56ed-4226-b615-a1392e28c2b7</slot_id>
      <title>On the chemistry of typestate-oriented actors</title>
      <room>Foscolo</room>
      <date>2016/07/19</date>
      <start_time>13:50</start_time>
      <end_time>14:30</end_time>
      <description>Typestate-oriented programming is an extension of the OO paradigm where objects are modeled not just in terms of interfaces but in terms of their usage protocols, describing legal sequences of method calls, possibly depending on the object’s internal state. We argue that the Actor Model allows typestate-OOP in an inherently distributed setting, whereby objects/actors can be accessed concurrently by several processes, and local entities cooperate to carry out a communication protocol. In this presentation we illustrate the approach by means of a number of examples written in Scala Akka. We show that Scala’s abstractions support clean and natural typestate-oriented actor programming with the usual asynchronous and non-blocking semantics. We also show that the standard type system of Scala and a typed wrapping of usual (untyped) Akka’s ActorRef are enough to provide rich forms of type safety so that well-typed actors respect their intended communication protocols.
This approach draws on a solid theoretical background, consisting of a sound behavioral type system for the Join Calculus, that is a foundational calculus of distributed asynchronous processes whose semantics is based on the Chemical Abstract Machine, that unveiled its strong connections with typestate-oriented programming of both concurrent objects and Actors.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Silvia</first_name>
          <last_name>Crafa</last_name>
          <affiliation>Università di Padova, Italy</affiliation>
          <bio>Silvia Crafa is Professor of Advanced Topics in Programming Languages at University of Padova, and she is member of the IFIP Working Group n.1.8: Concurrency Theory. Her research focuses on formal methods for the analysis of concurrent and distributed systems, ranging form the study of semantic foundations to logics and type systems.</bio>
          <homepage_url>http://www.math.unipd.it/~crafa/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/silviacrafa/5f97ba05-32f8-4d62-a880-17450848f655/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>96670671-ce11-4d36-81c6-06513c8c50b4</subevent_id>
    <title>CurryOn : Session 6b</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/19</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>3277fa7d-d8d1-4e53-9d68-e9570533ab4e</slot_id>
      <title>Using Object Algebras To Design Embedded Domain Specific Languages</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/19</date>
      <start_time>16:50</start_time>
      <end_time>17:30</end_time>
      <description>Object algebras have very interesting properties and are yet underused for defining embedded DSLs. Object algebras allow the developer to define embedded DSLs in an extensible and modular way: DSLs can be broken down into independent pieces and can have several independent interpretations. Furthermore, with object algebras it is easy to define families of DSLs, that is, DSLs that specialize other DSLs. Finally, the cost of interpretation is cheap because there is no intermediate representation. This talk shows how to design such DSLs in Scala, and exercises the aforementioned features on a practical example: a DSL describing HTTP APIs in which one can derive clients, servers and documentation.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Julien</first_name>
          <last_name>Richard-Foy</last_name>
          <affiliation>Zengularity</affiliation>
          <bio>Julien Richard-Foy is a consultant for Zengularity. He likes designing code at the right level of abstraction.</bio>
          <homepage_url>http://julien.richard-foy.fr</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/julienrichardfoy/09db18fb-df5b-46e1-9668-93bb1fc8f553/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>eb9e6836-4f27-49b7-9801-86c4eea8aff0</slot_id>
      <title>Distributed Configuration with Clojure</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/19</date>
      <start_time>16:00</start_time>
      <end_time>16:40</end_time>
      <description>Configuration is one of those features that almost each application solves in a different way. But the problem is always the same: how can we change the behaviour of a system without (hopefully) restarting it, re-building it, or God forbid, changing the code. At the same time, how can we track and &amp;quot;diff” config changes effectively? Files, DBs, key-value stores: there are many ways to store configuration and each one adds some valuable aspect. In this presentation I want to talk about a solution that groups together all the requirements above in a simple and elegant way. In the process we are going to see what aspects of a functional language like Clojure enables real-time, client/server communication and fail-over capabilities.</description>
      <persons>
        <person>
          <role>Author</role>
          <sort_key>1</sort_key>
          <first_name>Renzo</first_name>
          <last_name>Borgatti</last_name>
          <affiliation>Mailonline</affiliation>
          <bio>Renzo Borgatti is a developer currently working at the Mailonline on a large Clojure codebase. I started professionally around 2000 but I’ve got my Commodore C16 sometimes in 1986. I’ve done work/research for different industries, corporate and startups, Europe and USA. I moved between Java, Ruby, Objective-C and finally landed on Clojure.</bio>
          <homepage_url>http://reborg.net</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/renzoborgatti/d0a92f1e-7317-4250-9564-4158da3b9881/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
  <subevent>
    <subevent_id>556bb234-7e1d-484d-8625-20c2c71f1faf</subevent_id>
    <title>CurryOn : Session 1b</title>
    <subevent_type type="regular"/>
    <room>Auditorium Loyola</room>
    <date>2016/07/18</date>
    <url>http://2016.ecoop.org/track/curryon-2016</url>
    <url_link_display>CurryOn</url_link_display>
    <tracks>
      <track>CurryOn</track>
    </tracks>
    <timeslot>
      <slot_id>1d7582cb-aabe-45e9-814a-6857ba532073</slot_id>
      <title>A Type is Worth a Thousand Tests</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/18</date>
      <start_time>11:45</start_time>
      <end_time>12:25</end_time>
      <description>One of the biggest changes in the transition from Objective-C to Swift is the new type system. This change is at the heart of Swift’s language design, from optionals over value types to constrained generics, and to truly understand the language, a thorough understanding of its type system is indispensable. In this talk, I will explain the advantages of Swift’s strong commitment to a sophisticated type system. I will illustrate the impact on language and program design through a series of examples, drawn from my experience of developing one of the first Swift-based applications published in the Mac App Store. I will discuss why type-driven design benefits from functional programming principles, and also, how it enables us to write less tests without a loss of confidence in our code.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Manuel</first_name>
          <last_name>Chakravarty</last_name>
          <affiliation>UNSW Australia &amp; Applicative</affiliation>
          <bio>Manuel M T Chakravarty is an Associate Professor at the University of New South Wales. His core research interests are functional programming, novel compiler technology, and high-performance computing. He graduated from the University of Karlsruhe and received a doctoral degree from the Berlin Institute of Technology. His major contributions include work on Haskell’s foreign function interface, the C-&amp;gt;Haskell binding generator, the theory and implementation of type families in the Glasgow Haskell Compiler, and the development of multiple systems for data parallel programming of multicore CPUs and GPUs, including Accelerate, Data Parallel Haskell, and Repa. He is the principal author of the interactive development environment Haskell for Mac and he is excited by the opportunities presented by the Swift programming language. Most importantly, he believes in the fruitful combination of theory and practice.</bio>
          <homepage_url>http://justtesting.org/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/manuelchakravarty/1d2a8239-fd12-4472-9186-632d7afbb5c3/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>909f8a7c-4405-4226-8414-50956608ae25</slot_id>
      <title>Move Fast to Fix More Things</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/18</date>
      <start_time>10:05</start_time>
      <end_time>10:45</end_time>
      <description>I spent most of my career in academia, working on such topics as denotational semantics and logics of programs. Now I work for Facebook with a team that deploys a program analyser, Infer, based on recent research in program analysis, which itself applied a relatively recent theoretical development in logics of programs, separation logic. In this talk I will talk about our experience deploying this technology, some the challenges we faced, and lessons learned. Most importantly, adapting to Facebook’s fast-paced engineering culture - illustrated by the “Move Fast and Break Things” and similar posters adorning its office walls - has taught me that if verification technology can move fast, in tune with programmers’ workflow, then they will fix more things. This contrasts sharply with the “Move Slow and Break Almost Nothing” attitude to using verification that I learned as an academic. I will also argue that there are ways in which work in program analysis can focus more on the value that can be brought to programmers; for example, I will discuss the merits of “fix rate” as a measure of analysis value, as compared to the more traditional ” false positive rate” concept.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>Peter</first_name>
          <last_name>O'Hearn</last_name>
          <affiliation>Facebook</affiliation>
          <bio>Peter O’Hearn works as an Engineering Manager at Facebook with the Static Analysis Tools team, and as a Professor of Computer Science at University College London. His research has been in the broad areas of programming languages and logic, ranging from new logics and mathematical models to industrial applications of program proof. With John Reynolds he developed separation logic, a theory which opened up new practical possibilities for program proof. In 2009 he cofounded a software verification startup company, Monoidics Ltd, which was acquired by Facebook in 2013. The Facebook Infer program analyzer, recently open-sourced, runs on every modification to the code of Facebook’s mobile apps — including the main Facebook apps for Android and iOS, Facebook Messenger and Instagram — in a typical month issuing millions of calls to a custom separation logic theorem prover and resulting in hundreds of bugs being fixed before they reach production.</bio>
          <homepage_url>http://www0.cs.ucl.ac.uk/staff/p.ohearn/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/peterohearn/ad32c6c0-6321-4602-8499-e7c11f23b143/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
    <timeslot>
      <slot_id>c226a05a-53f5-46d0-a1d2-8e0a90473d46</slot_id>
      <title>Notes on Post-Post-Modern-Modern Programming</title>
      <room>Auditorium Loyola</room>
      <date>2016/07/18</date>
      <start_time>10:55</start_time>
      <end_time>11:35</end_time>
      <description>The ultimate goal of all computer science is the program. In the beginning, so our myths and stories tell us, the programmer created the program from the eternal nothingness of the void. These notes have the status of letters written to ourselves: we wrote them down because, without doing so, we found ourselves making up new arguments over and over again. In 2002 at the first OOPSLA Onward track, James Noble and Robert Biddle presented a paper entitled “Notes on Postmodern Programming”. The paper was a both a paean, a homage to the love of programming and its lore, but also a mocking attack. One common question was whether the paper was serious or a joke? It was both, and that was the agenda. In following years, similar papers were presented, with diminishing impact: the shock of the new wears off. In this retrospective, we revisit some of the propositions made in the early papers, and attempt to re-experience the shock. Old men forget: yet all shall be forgot, but we’ll remember with advantages what feats we did that day.</description>
      <persons>
        <person>
          <role>Speaker</role>
          <sort_key>1</sort_key>
          <first_name>James</first_name>
          <last_name>Noble</last_name>
          <affiliation>Victoria University of Wellington</affiliation>
          <bio>James Noble is Professor of Computer Science and Software Engineering at Victoria University of Wellington, New Zealand. James has B.Sc(Hons) and Ph.D. degrees, both from VUW, completed in 1997. After leaving VUW, James worked in Sydney, first at the University of Technology, Sydney, and then at the Microsoft Research Institute, Macquarie University. James returned to VUW as a lecturer in late 1999, just in time to avoid the predicted end of the world.
James’s research centres around software design. This includes the design of the users’ interface, the parts of software that users have to deal with every day, and the programmers’ interface, the internal structures and organisations of software that programmers see only when they are designing, building, or modifying software. His research in both of these areas is coloured by my longstanding interest in object oriented approaches to design, and topics he has studies range from aliasing and object ownership, design patterns, agile methodology, via usability, visualisation and computer music, to postmodernism and the semiotics of programming.</bio>
          <homepage_url>http://homepages.mcs.vuw.ac.nz/~kjx/</homepage_url>
          <picture_url>http://2016.ecoop.org/getProfileImage/jamesnoble/6f993a92-503e-44c6-9bbb-bfd05bf4ed23/small.jpg</picture_url>
        </person>
      </persons>
      <tracks>
        <track>CurryOn</track>
      </tracks>
    </timeslot>
  </subevent>
</event>
